cmake_minimum_required(VERSION 2.8)

include(RezBuild)
include(AL_CMakeLib)
include ( ExternalProject )

SET(CMAKE_CXX_FLAGS "-std=c++11")

# must put find_package before rez_find_packages or will not work......
find_package(OpenGL REQUIRED)
if (OPENGL_FOUND)
	include_directories(${OPENGL_INCLUDE_DIR})
	link_libraries(${OPENGL_LIBRARIES})

endif()

rez_find_packages(PREFIX pkgs AUTO)

include_directories(src)

set(source_files
	"src/pluginMain.cpp"
#	"LHRepulsorDeformer.cpp"
#	"LHRepulsorDeformer.h"
#	"LHGetDeformPoints.cpp"
#	"LHGetDeformPoints.h"
#	"LHTemplateNode.cpp"
#	"LHTemplateNode.h"
#	"LHTemplateDeformer.cpp"
#	"LHTemplateDeformer.h"
	"src/LHWeightNode.cpp"
	"src/LHWeightNode.h"
#	"LHMultiCluster.cpp"
#	"LHMultiCluster.h"
#	"LHComputeDeformer.cpp"
#	"LHComputeDeformer.h"
#	"splatDeformer.cpp"
#	"splatDeformer.h"
#	"sseDeformer.cpp"
#	"sseDeformer.h"
#	"LHMultiClusterThreaded.cpp"
#	"LHMultiClusterThreaded.h"
	"src/LHCollisionDeformer.cpp"
	"src/LHCollisionDeformer.h"
	"src/LHLocator.cpp"
	"src/LHLocator.h"
	"src/threading.cpp"
	"src/LHCollisionLocator.cpp"
	"src/LHCollisionLocator.h"
	"src/nullTransform.cpp"
	"src/nullTransform.h"
	"src/nullMatrixTransform.cpp"
	"src/nullMatrixTransform.h"
	"src/LHGeometryConstraint.cpp"
	"src/LHGeometryConstraint.h"
	"src/LHSlideDeformer.cpp"
	"src/LHSlideDeformer.h"
	"src/LHVectorDeformer.cpp"
	"src/LHVectorDeformer.h"
	"src/LHCurveRollDeformer.cpp"
	"src/LHCurveRollDeformer.h"
	"src/LHCurveWeightNode.cpp"
	"src/LHCurveWeightNode.h"
	"src/LHKDoubleArrayToKFloatArray.cpp"
#	"src/LHKDoubleArrayToKFloatArray.h"
	"src/LHWeightNodeFloat.cpp"
#	"src/LHWeightNodeFloat.h"
	"src/LHTemplateGPUDeformer.cpp"
#	"src/LHTemplateGPUDeformer.h"
	"src/LHTemplateGPUDeformer.cl"
	"src/LHMultiWrap.cpp"
	"src/LHMultiWrap.h"
	"src/LHSlideSimple.cpp"
	"src/LHSlideSimple.h"
	"src/LHNakedLocator.cpp"
	"src/LHNakedLocator.h"
	"src/LHMatrixDeformer.cpp"
	"src/LHMatrixDeformer.h"
	"src/LHBlendshapeSimple.h"

)
#message("SOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO" ${COLLISION_PLUGINS})
#message(${COLLISION_PLUGINS})
#message(${COLLISION_PLUGINS})
#message(${COLLISION_PLUGINS})
#message(${COLLISION_PLUGINS})
add_library(collision SHARED ${source_files})
set_target_properties(collision PROPERTIES PREFIX "")

link_directories(${stdlib_ROOT}/lib64)
find_package(OpenMP)

target_link_libraries(collision tbb clew cuda cudart ${maya_LIBRARIES} Foundation OpenMaya)

install(TARGETS collision DESTINATION plugins)


