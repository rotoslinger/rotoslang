global proc shelf_LeviCustom () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "for s in cmds.ls(sl=True):\n    cmds.lockNode(s, lock=False)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "for s in cmds.ls(sl=True):\n    cmds.lockNode(s, lock=False)" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "UNLOCK" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "for s in cmds.ls(sl=True):\n    cmds.lockNode(s, lock=False)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "polyToCurve -form 2 -degree 1 -conformToSmoothMeshPreview 0;\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "E2Crv" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "E2Crv" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "polyToCurve -form 2 -degree 1 -conformToSmoothMeshPreview 0;\n" 
        -sourceType "mel" 
        -doubleClickCommand "polyToCurve -form 2 -degree 1 -conformToSmoothMeshPreview 0;\n" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "rebuildCurve -ch 1 -rpo 1 -rt 0 -end 0 -kr 0 -kcp 0 -kep 1 -kt 0 -fr 0 -s 0 -d 1 -tol 0.01;\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "RbldCrv" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "RbldCrv" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "rebuildCurve -ch 1 -rpo 1 -rt 0 -end 0 -kr 0 -kcp 0 -kep 1 -kt 0 -fr 0 -s 0 -d 1 -tol 0.01;\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "reverseCurve -ch 1 -rpo 1 " 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "RvseCrv" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "RvseCrv" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "reverseCurve -ch 1 -rpo 1 " 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Adjust how much influence a Blend Shape deformer has over specific parts of the mesh surface." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Blend Shape" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "paintBlendshape.png" 
        -image1 "paintBlendshape.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "ArtPaintBlendShapeWeightsTool" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 1
        -flexibleWidthValue 32
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "delete intermediate objs" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Delete Intermediate Objects" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "DelIntOb" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "execfile(\"/home/ntsang/bin/deleteIntermediateObjects.py\")" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 1
        -flexibleWidthValue 32
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Straighten Curve" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "StraightenCurve" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "strcrv" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "curveEP.png" 
        -image1 "curveEP.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "$sel = `ls -sl`;\n\nfor($obj in $sel){\n\n\trebuildCurve -ch 1 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 1 -d 1 -tol 0.01 $obj;\n\n}\n\nselect $sel;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 1
        -flexibleWidthValue 32
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "3 knot curve" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "3Knot" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "3Knt" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "curveEP.png" 
        -image1 "curveEP.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "$sel = `ls -sl`;\nfor($obj in $sel){\n\trebuildCurve -ch 1 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 2 -d 3 -tol 0.01 $obj;\n}\nselect $sel;\n\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 1
        -flexibleWidthValue 32
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "5 knot curve" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "5Knot" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "5Knt" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "curveEP.png" 
        -image1 "curveEP.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "$sel = `ls -sl`;\nfor($obj in $sel){\n\trebuildCurve -ch 1 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 4 -d 3 -tol 0.01 $obj;\n}\nselect $sel;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 2
        -flexibleWidthValue 32
        -enable 1
        -width 32
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Even Verts Along Edge" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "SmoothCurve" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "EVAE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "source px_edgeTools; EvenVertsAlongEdge();" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    $gBuffStr = `toolButton -style iconOnly -doubleClickCommand "toolPropertyWindow" -cl toolCluster `;
    $gBuffStr1 = `    wireContext
        -image1 "wire.png" 
        -image2 "vacantCell.png" 
        -image3 "vacantCell.png" 
        -holder 0
        -groupWithBase 0
        -envelope 1
        -crossingEffect 0
        -dropoffDistance 1
        -localInfluence 0
        -deformationOrder "Default" 
        -exclusivePartition "deformPartition" 
        -exclusive 0
`;
    toolButton -edit -tool $gBuffStr1 -toolImage1 $gBuffStr1 "wire.png" $gBuffStr;
    toolButton -edit -tool $gBuffStr1 $gBuffStr;

    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "WrapBlend" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "WrapBlend" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "WrapBlend" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "import os\nimport sys\npath = \"/home/leviharrison/maya/2019/scripts/\"\nif os not in sys.path:\n    sys.path.append(path)\n\nimport arg_ui\nreload(arg_ui)\narg_ui.ui_wrap_blend()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "ab_reset" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "reset" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "ab_reset" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "A_ATTR = \"\"\nB_ATTR = \"\"\n\ndef a_b_toggle(reset=False):\n    if reset:\n        global A_ATTR\n        global B_ATTR\n        sel = cmds.ls(sl=True)\n        A_ATTR = sel[0] + \".visibility\"\n        B_ATTR = sel[1] + \".visibility\"\n\n    if cmds.getAttr(A_ATTR) == 0:\n        cmds.setAttr(A_ATTR,1)\n        cmds.setAttr(B_ATTR,0)\n    else:\n        cmds.setAttr(A_ATTR,0)\n        cmds.setAttr(B_ATTR,1)\n\na_b_toggle(True)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "AB" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "AB" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "AB" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "\n\ndef a_b_toggle(reset=False):\n    if reset:\n        global A_ATTR\n        global B_ATTR\n        sel = cmds.ls(sl=True)\n        A_ATTR = sel[0] + \".visibility\"\n        B_ATTR = sel[1] + \".visibility\"\n\n    if cmds.getAttr(A_ATTR) == 0:\n        cmds.setAttr(A_ATTR,1)\n        cmds.setAttr(B_ATTR,0)\n    else:\n        cmds.setAttr(A_ATTR,0)\n        cmds.setAttr(B_ATTR,1)\n\na_b_toggle(False)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Scl0" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Scl0" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Scl0" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "scale -r -p 0cm 0cm 0cm 0 1 1 " 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "ToggleDisplayColorsAttr;\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "ClrTggle" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "ClrTggle" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "ToggleDisplayColorsAttr;\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "source px_edgeTools; EvenVertsAlongEdge();" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "source px_edgeTools; EvenVertsAlongEdge();" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "EvenSpace" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "source px_edgeTools; EvenVertsAlongEdge();" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "def simplify_edges(even_spacing=True, select_all_handles=False, select_handles=False, redo=False):\n    #get selection\n    selection = cmds.ls(sl=True, fl=True);    \n    selEdges = list()\n    #find which are edges\n    for idx, mayaObject in enumerate(selection):\n        if \".e[\" in mayaObject:\n            maya_mesh = mayaObject.split(\".e\")[0]\n            selEdges.append(mayaObject)\n    #for ($a=0; $a <= `size selection`; $a++) {aq\n    num_bez_tools= len(cmds.ls( 'EdgeBezierTool*', exactType=\"transform\", s=False))\n    counter_suffix= \"{0:02d}\".format(num_bez_tools)\n    if redo:\n        counter_suffix = \"{0:02d}\".format(0)\n    #if selection was edges, run edge bezier tool\n    if (len(selEdges) > 0):\n        selObj = selEdges[0].split(\".\")\n        if redo and cmds.objExists(\"EdgeBezierTool\" + counter_suffix):\n            cmds.delete(maya_mesh, ch=True)\n            cmds.delete(\"EdgeBezierTool\" + counter_suffix)\n\n        refCurve = \"edgeBezier_ReferenceCurve\" + counter_suffix\n        cmds.select(selEdges,r=True)\n        cmds.polyToCurve(form = 0, degree=1, n=refCurve)\n\n        cmds.HideSelectedObjects()\n        targetCurve = \"edgeBezier_TargetCurve\" + counter_suffix\n        cmds.rebuildCurve(refCurve, ch=1,rpo=0, rt=0, end=1, kr=0, kcp=0, kep=1, kt=0, s=1, d=3, tol=0, n=targetCurve)\n        cmds.select(targetCurve)\n        cmds.nurbsCurveToBezier()\n        # delete history\n        cmds.delete([targetCurve, refCurve], ch=True)\n        bez_wire= cmds.wire(selEdges,w= targetCurve, n=\"edgeBezierProject\" + counter_suffix, gw=False, en=1.000000, ce=0.000000, dds=[0, 10000], li=0.000000)\n\n        \n        cmds.setAttr(bez_wire[0]+\".scale[0]\", 0)\n        cmds.setAttr(bez_wire[0]+\".rotation\", 0)\n       \n        cmds.group(targetCurve, targetCurve+\"BaseWire\", refCurve, n=\"EdgeBezierTool\" + counter_suffix)\n        \n        if not select_handles:\n            cmds.select(maya_mesh, r=True)\n            cmds.selectMode(component=True )\n            cmds.selectType(edge=True)\n            cmds.select(selEdges, r=True)\n\n            return\n            \n                  \n        print 'doMenuComponentSelection('+ targetCurve +', \"controlVertex\")'\n        cmds.select(targetCurve, r=True)\n        cmds.selectMode(component=True )\n        \n        if select_all_handles:\n            all_target_curves = list()\n            for idx in range(num_bez_tools+1):\n                all_target_curves.append(\"edgeBezier_TargetCurve{0:02d}\".format(idx))\n                \n            cmds.select(all_target_curves, r=True)\n            cmds.selectMode(component=True )\n            cmds.selectType(controlVertex=True)\n        \ncmds.undoInfo(openChunk=True)\t\nsimplify_edges(redo=True)\ncmds.undoInfo(closeChunk=True)\t\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "def simplify_edges(even_spacing=True, select_all_handles=False, ..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "SimpRedo" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "def simplify_edges(even_spacing=True, select_all_handles=False, select_handles=False, redo=False):\n    #get selection\n    selection = cmds.ls(sl=True, fl=True);    \n    selEdges = list()\n    #find which are edges\n    for idx, mayaObject in enumerate(selection):\n        if \".e[\" in mayaObject:\n            maya_mesh = mayaObject.split(\".e\")[0]\n            selEdges.append(mayaObject)\n    #for ($a=0; $a <= `size selection`; $a++) {aq\n    num_bez_tools= len(cmds.ls( 'EdgeBezierTool*', exactType=\"transform\", s=False))\n    counter_suffix= \"{0:02d}\".format(num_bez_tools)\n    if redo:\n        counter_suffix = \"{0:02d}\".format(0)\n    #if selection was edges, run edge bezier tool\n    if (len(selEdges) > 0):\n        selObj = selEdges[0].split(\".\")\n        if redo and cmds.objExists(\"EdgeBezierTool\" + counter_suffix):\n            cmds.delete(maya_mesh, ch=True)\n            cmds.delete(\"EdgeBezierTool\" + counter_suffix)\n\n        refCurve = \"edgeBezier_ReferenceCurve\" + counter_suffix\n        cmds.select(selEdges,r=True)\n        cmds.polyToCurve(form = 0, degree=1, n=refCurve)\n\n        cmds.HideSelectedObjects()\n        targetCurve = \"edgeBezier_TargetCurve\" + counter_suffix\n        cmds.rebuildCurve(refCurve, ch=1,rpo=0, rt=0, end=1, kr=0, kcp=0, kep=1, kt=0, s=1, d=3, tol=0, n=targetCurve)\n        cmds.select(targetCurve)\n        cmds.nurbsCurveToBezier()\n        # delete history\n        cmds.delete([targetCurve, refCurve], ch=True)\n        bez_wire= cmds.wire(selEdges,w= targetCurve, n=\"edgeBezierProject\" + counter_suffix, gw=False, en=1.000000, ce=0.000000, dds=[0, 10000], li=0.000000)\n\n        \n        cmds.setAttr(bez_wire[0]+\".scale[0]\", 0)\n        cmds.setAttr(bez_wire[0]+\".rotation\", 0)\n       \n        cmds.group(targetCurve, targetCurve+\"BaseWire\", refCurve, n=\"EdgeBezierTool\" + counter_suffix)\n        \n        if not select_handles:\n            cmds.select(maya_mesh, r=True)\n            cmds.selectMode(component=True )\n            cmds.selectType(edge=True)\n            cmds.select(selEdges, r=True)\n\n            return\n            \n                  \n        cmds.select(targetCurve, r=True)\n        cmds.selectMode(component=True )\n        \n        if select_all_handles:\n            all_target_curves = list()\n            for idx in range(num_bez_tools+1):\n                all_target_curves.append(\"edgeBezier_TargetCurve{0:02d}\".format(idx))\n                \n            cmds.select(all_target_curves, r=True)\n            cmds.selectMode(component=True )\n            cmds.selectType(controlVertex=True)\n        \ncmds.undoInfo(openChunk=True)\t\nsimplify_edges(redo=True)\ncmds.undoInfo(closeChunk=True)\t\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "def simplify_edges(even_spacing=True, select_all_handles=True, select_handles=False):\n    #get selection\n    selection = cmds.ls(sl=True, fl=True);    \n    selEdges = list()\n    #find which are edges\n    for idx, mayaObject in enumerate(selection):\n        if \".e[\" in mayaObject:\n            maya_mesh = mayaObject.split(\".e\")[0]\n            selEdges.append(mayaObject)\n    #for ($a=0; $a <= `size selection`; $a++) {\n    num_bez_tools= len(cmds.ls( 'EdgeBezierTool*', exactType=\"transform\", s=False))\n    counter_suffix= \"{0:02d}\".format(num_bez_tools)\n    #if selection was edges, run edge bezier tool\n    if (len(selEdges) > 0):\n        selObj = selEdges[0].split(\".\")\n        refCurve = \"edgeBezier_ReferenceCurve\" + counter_suffix\n        cmds.select(selEdges,r=True)\n        cmds.polyToCurve(form = 0, degree=1, n=refCurve)\n\n        cmds.HideSelectedObjects()\n        targetCurve = \"edgeBezier_TargetCurve\" + counter_suffix\n        cmds.rebuildCurve(refCurve, ch=1,rpo=0, rt=0, end=1, kr=0, kcp=0, kep=1, kt=0, s=1, d=3, tol=0, n=targetCurve)\n        cmds.select(targetCurve)\n        cmds.nurbsCurveToBezier()\n        # delete history\n        cmds.delete([targetCurve, refCurve], ch=True)\n        bez_wire= cmds.wire(selEdges,w= targetCurve, n=\"edgeBezierProject\" + counter_suffix, gw=False, en=1.000000, ce=0.000000, dds=[0, 10000], li=0.000000)\n\n        \n        cmds.setAttr(bez_wire[0]+\".scale[0]\", 0)\n        cmds.setAttr(bez_wire[0]+\".rotation\", 0)\n       \n        cmds.group(targetCurve, targetCurve+\"BaseWire\", refCurve, n=\"EdgeBezierTool\" + counter_suffix)\n        \n        if not select_handles:\n            cmds.select(maya_mesh, r=True)\n            cmds.selectMode(component=True )\n            cmds.selectType(edge=True)\n            cmds.select(selEdges, r=True)\n\n            return\n            \n                  \n        print 'doMenuComponentSelection('+ targetCurve +', \"controlVertex\")'\n        cmds.select(targetCurve, r=True)\n        cmds.selectMode(component=True )\n        \n        if select_all:\n            all_target_curves = list()\n            for idx in range(num_bez_tools+1):\n                all_target_curves.append(\"edgeBezier_TargetCurve{0:02d}\".format(idx))\n                \n            cmds.select(all_target_curves, r=True)\n            cmds.selectMode(component=True )\n            cmds.selectType(controlVertex=True)\n        \ncmds.undoInfo(openChunk=True)\t\nsimplify_edges()\ncmds.undoInfo(closeChunk=True)\t\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "def simplify_edges(even_spacing=True, select_all_handles=True, s..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "SimpleMulti" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "def simplify_edges(even_spacing=True, select_all_handles=False, select_handles=False):\n    #get selection\n    selection = cmds.ls(sl=True, fl=True);    \n    selEdges = list()\n    #find which are edges\n    for idx, mayaObject in enumerate(selection):\n        if \".e[\" in mayaObject:\n            maya_mesh = mayaObject.split(\".e\")[0]\n            selEdges.append(mayaObject)\n    #for ($a=0; $a <= `size selection`; $a++) {\n    num_bez_tools= len(cmds.ls( 'EdgeBezierTool*', exactType=\"transform\", s=False))\n    counter_suffix= \"{0:02d}\".format(num_bez_tools)\n    #if selection was edges, run edge bezier tool\n    if (len(selEdges) > 0):\n        selObj = selEdges[0].split(\".\")\n        refCurve = \"edgeBezier_ReferenceCurve\" + counter_suffix\n        cmds.select(selEdges,r=True)\n        cmds.polyToCurve(form = 0, degree=1, n=refCurve)\n\n        cmds.HideSelectedObjects()\n        targetCurve = \"edgeBezier_TargetCurve\" + counter_suffix\n        cmds.rebuildCurve(refCurve, ch=1,rpo=0, rt=0, end=1, kr=0, kcp=0, kep=1, kt=0, s=1, d=3, tol=0, n=targetCurve)\n        cmds.select(targetCurve)\n        cmds.nurbsCurveToBezier()\n        # delete history\n        cmds.delete([targetCurve, refCurve], ch=True)\n        bez_wire= cmds.wire(selEdges,w= targetCurve, n=\"edgeBezierProject\" + counter_suffix, gw=False, en=1.000000, ce=0.000000, dds=[0, 10000], li=0.000000)\n\n        \n        cmds.setAttr(bez_wire[0]+\".scale[0]\", 0)\n        cmds.setAttr(bez_wire[0]+\".rotation\", 0)\n       \n        cmds.group(targetCurve, targetCurve+\"BaseWire\", refCurve, n=\"EdgeBezierTool\" + counter_suffix)\n        \n        if not select_handles:\n            cmds.select(maya_mesh, r=True)\n            cmds.selectMode(component=True )\n            cmds.selectType(edge=True)\n            cmds.select(selEdges, r=True)\n\n            return\n            \n                  \n        cmds.select(targetCurve, r=True)\n        cmds.selectMode(component=True )\n        \n        if select_all:\n            all_target_curves = list()\n            for idx in range(num_bez_tools+1):\n                all_target_curves.append(\"edgeBezier_TargetCurve{0:02d}\".format(idx))\n                \n            cmds.select(all_target_curves, r=True)\n            cmds.selectMode(component=True )\n            cmds.selectType(controlVertex=True)\n        \ncmds.undoInfo(openChunk=True)\t\nsimplify_edges()\ncmds.undoInfo(closeChunk=True)\t\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "def simplify_edges(even_spacing=True, select_all_handles=False, select_handles=False, redo=False, simplify=False):\n    #get selection\n    selection = cmds.ls(sl=True, fl=True);    \n    selEdges = list()\n    #find which are edges\n    for idx, mayaObject in enumerate(selection):\n        if \".e[\" in mayaObject:\n            maya_mesh = mayaObject.split(\".e\")[0]\n            selEdges.append(mayaObject)\n    #for ($a=0; $a <= `size selection`; $a++) {aq\n    num_bez_tools= len(cmds.ls( 'EdgeBezierTool*', exactType=\"transform\", s=False))\n    counter_suffix= \"{0:02d}\".format(num_bez_tools)\n    if redo:\n        counter_suffix = \"{0:02d}\".format(0)\n    #if selection was edges, run edge bezier tool\n    if (len(selEdges) > 0):\n        selObj = selEdges[0].split(\".\")\n        if redo and cmds.objExists(\"EdgeBezierTool\" + counter_suffix):\n            cmds.delete(maya_mesh, ch=True)\n            cmds.delete(\"EdgeBezierTool\" + counter_suffix)\n\n        refCurve = \"edgeBezier_ReferenceCurve\" + counter_suffix\n        cmds.select(selEdges,r=True)\n        cmds.polyToCurve(form = 0, degree=1, n=refCurve)\n\n        cmds.HideSelectedObjects()\n        targetCurve = \"edgeBezier_TargetCurve\" + counter_suffix\n        \n        \n            \n        cmds.rebuildCurve(refCurve, ch=1,rpo=0, rt=0, end=1, kr=0, kcp=0, kep=1, kt=0, s=1, d=3, tol=0, n=targetCurve)\n        \n        cmds.select(targetCurve)\n        cmds.nurbsCurveToBezier()\n        # delete history\n        cmds.delete([targetCurve, refCurve], ch=True)\n        bez_wire= cmds.wire(selEdges,w= targetCurve, n=\"edgeBezierProject\" + counter_suffix, gw=False, en=1.000000, ce=0.000000, dds=[0, 10000], li=0.000000)\n\n        if simplify:\n            cmds.setAttr(bez_wire[0]+\".scale[0]\", 0)\n        cmds.setAttr(bez_wire[0]+\".rotation\", 0)\n       \n        cmds.group(targetCurve, targetCurve+\"BaseWire\", refCurve, n=\"EdgeBezierTool\" + counter_suffix)\n        \n        if not select_handles:\n            cmds.select(maya_mesh, r=True)\n            cmds.selectMode(component=True )\n            cmds.selectType(edge=True)\n            cmds.select(selEdges, r=True)\n\n            return\n            \n                  \n        print 'doMenuComponentSelection('+ targetCurve +', \"controlVertex\")'\n        cmds.select(targetCurve, r=True)\n        cmds.selectMode(component=True )\n        \n        if select_all_handles:\n            all_target_curves = list()\n            for idx in range(num_bez_tools+1):\n                all_target_curves.append(\"edgeBezier_TargetCurve{0:02d}\".format(idx))\n                \n            cmds.select(all_target_curves, r=True)\n            cmds.selectMode(component=True )\n            cmds.selectType(controlVertex=True)\n        \ncmds.undoInfo(openChunk=True)\t\nsimplify_edges(redo=True)\ncmds.undoInfo(closeChunk=True)\t\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "def simplify_edges(even_spacing=True, select_all_handles=False, ..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "BezTool" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "def simplify_edges(even_spacing=True, select_all_handles=False, select_handles=False):\n    #get selection\n    selection = cmds.ls(sl=True, fl=True);    \n    selEdges = list()\n    #find which are edges\n    for idx, mayaObject in enumerate(selection):\n        if \".e[\" in mayaObject:\n            maya_mesh = mayaObject.split(\".e\")[0]\n            selEdges.append(mayaObject)\n    #for ($a=0; $a <= `size selection`; $a++) {\n    num_bez_tools= len(cmds.ls( 'EdgeBezierTool*', exactType=\"transform\", s=False))\n    counter_suffix= \"{0:02d}\".format(num_bez_tools)\n    #if selection was edges, run edge bezier tool\n    if (len(selEdges) > 0):\n        selObj = selEdges[0].split(\".\")\n        refCurve = \"edgeBezier_ReferenceCurve\" + counter_suffix\n        cmds.select(selEdges,r=True)\n        cmds.polyToCurve(form = 0, degree=1, n=refCurve)\n\n        cmds.HideSelectedObjects()\n        targetCurve = \"edgeBezier_TargetCurve\" + counter_suffix\n        cmds.rebuildCurve(refCurve, ch=1,rpo=0, rt=0, end=1, kr=0, kcp=0, kep=1, kt=0, s=1, d=3, tol=0, n=targetCurve)\n        cmds.select(targetCurve)\n        cmds.nurbsCurveToBezier()\n        # delete history\n        cmds.delete([targetCurve, refCurve], ch=True)\n        bez_wire= cmds.wire(selEdges,w= targetCurve, n=\"edgeBezierProject\" + counter_suffix, gw=False, en=1.000000, ce=0.000000, dds=[0, 10000], li=0.000000)\n\n        \n        cmds.setAttr(bez_wire[0]+\".rotation\", 0)\n       \n        cmds.group(targetCurve, targetCurve+\"BaseWire\", refCurve, n=\"EdgeBezierTool\" + counter_suffix)\n        \n        if not select_handles:\n            cmds.select(maya_mesh, r=True)\n            cmds.selectMode(component=True )\n            cmds.selectType(edge=True)\n            cmds.select(selEdges, r=True)\n\n            return\n            \n                  \n        print 'doMenuComponentSelection('+ targetCurve +', \"controlVertex\")'\n        cmds.select(targetCurve, r=True)\n        cmds.selectMode(component=True )\n        \n        if select_all:\n            all_target_curves = list()\n            for idx in range(num_bez_tools+1):\n                all_target_curves.append(\"edgeBezier_TargetCurve{0:02d}\".format(idx))\n                \n            cmds.select(all_target_curves, r=True)\n            cmds.selectMode(component=True )\n            cmds.selectType(controlVertex=True)\n        \ncmds.undoInfo(openChunk=True)\t\nsimplify_edges()\ncmds.undoInfo(closeChunk=True)\t\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "def selectBezTools():\n    num_bez_tools= len(cmds.ls( 'EdgeBezierTool*', exactType=\"transform\", s=False))\n    counter_suffix= \"{0:02d}\".format(num_bez_tools)\n                  \n        \n    all_target_curves = list()\n    for idx in range(num_bez_tools):\n        all_target_curves.append(\"edgeBezier_TargetCurve{0:02d}\".format(idx))\n        \n    cmds.select(all_target_curves, r=True)\n    cmds.selectMode(component=True )\n    cmds.selectType(controlVertex=True)\n        \ncmds.undoInfo(openChunk=True)\t\nselectBezTools()\ncmds.undoInfo(closeChunk=True)\t\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "def selectBezTools():\n    num_bez_tools= len(cmds.ls( 'EdgeBezie..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "SelBzT" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "def selectBezTools():\n    num_bez_tools= len(cmds.ls( 'EdgeBezierTool*', exactType=\"transform\", s=False))\n    counter_suffix= \"{0:02d}\".format(num_bez_tools)\n                  \n        \n    all_target_curves = list()\n    for idx in range(num_bez_tools):\n        all_target_curves.append(\"edgeBezier_TargetCurve{0:02d}\".format(idx))\n        \n    cmds.select(all_target_curves, r=True)\n    cmds.selectMode(component=True )\n    cmds.selectType(controlVertex=True)\n        \ncmds.undoInfo(openChunk=True)\t\nselectBezTools()\ncmds.undoInfo(closeChunk=True)\t\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "def selectCVTool():\n    all_target_curves = cmds.ls(sl=True)\n    cmds.select(all_target_curves, r=True)\n    cmds.selectMode(component=True )\n    cmds.selectType(controlVertex=True)\n        \ncmds.undoInfo(openChunk=True)\t\nselectCVTool()\ncmds.undoInfo(closeChunk=True)\t\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "def selectCVTool():\n    all_target_curves = cmds.ls(sl=True)\n   ..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "SelCVs" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "def selectCVTool():\n    all_target_curves = cmds.ls(sl=True)\n    cmds.select(all_target_curves, r=True)\n    cmds.selectMode(component=True )\n    cmds.selectType(controlVertex=True)\n        \ncmds.undoInfo(openChunk=True)\t\nselectCVTool()\ncmds.undoInfo(closeChunk=True)\t\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "def cleanupBezTools():\n    #geo_to_cleanup = cmds.ls(sl=True, type=\"transform\")\n    geo_to_cleanup = cmds.ls(sl=True, type=\"transform\", long=True)\n    if not geo_to_cleanup:\n        cmds.warning(\"Please select the mesh that the bez tools are deforming\")\n        return\n        \n    cmds.delete(geo_to_cleanup, ch=True)\n    num_bez_tools= len(cmds.ls( 'EdgeBezierTool*', exactType=\"transform\", s=False))\n                  \n        \n    all_target_curves = list()\n    \n    \n    for idx in range(num_bez_tools):\n        tool = \"EdgeBezierTool{0:02d}\".format(idx)\n        cmds.delete(tool)\n\ncmds.undoInfo(openChunk=True)\t\ncleanupBezTools()\ncmds.undoInfo(closeChunk=True)\t\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "def cleanupBezTools():\n    #geo_to_cleanup = cmds.ls(sl=True, ty..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "CLNBezTool" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "def cleanupBezTools():\n    #geo_to_cleanup = cmds.ls(sl=True, type=\"transform\")\n    geo_to_cleanup = cmds.ls(sl=True, type=\"transform\", long=True)\n    if not geo_to_cleanup:\n        cmds.warning(\"Please select the mesh that the bez tools are deforming\")\n        return\n        \n    cmds.delete(geo_to_cleanup, ch=True)\n    num_bez_tools= len(cmds.ls( 'EdgeBezierTool*', exactType=\"transform\", s=False))\n                  \n        \n    all_target_curves = list()\n    \n    \n    for idx in range(num_bez_tools):\n        tool = \"EdgeBezierTool{0:02d}\".format(idx)\n        cmds.delete(tool)\n\ncmds.undoInfo(openChunk=True)\t\ncleanupBezTools()\ncmds.undoInfo(closeChunk=True)\t\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Toggle Display Colors attribute of the selected objects." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Toggle Display Colors Attribute" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "TGCOL" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "polyToggleDisplayColor.png" 
        -image1 "polyToggleDisplayColor.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "ToggleDisplayColorsAttr" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "\"\"\"\n    This script is for quickly blendshape the shared humanBody mouythbag \n    to the character model, based on character's teeth position and scale.\n\n\"\"\"\n\nimport maya.cmds as cmds\n\n# list of vtx indexes of the mouthbag\nmouthbagVtxIndex = ['8156', '8157', '8158', '8161', '8162', '8163', '8164', '8165', '8166', '8174', '8177', '8183', '8185', '8186', '8187', '8188', '8189', '8190', '8191', '8192', '8193', '8194', '8195', '8196', '8197', '8198', '8199', '8200', '8201', '8202', '8205', '8206', '8207', '8296', '8297', '8298', '8299', '8334', '8335', '8336', '8337', '8338', '8339', '8347', '8348', '8349', '8350', '8351', '8352', '8353', '8354', '8355', '8356', '8357', '8358', '8359', '8360', '8361', '8362', '8363', '8364', '8365', '8366', '8367', '8368', '8369', '8370', '8371', '8372', '8373', '8374', '8375', '8376', '8377', '8378', '8379', '8380', '8381', '8382', '8383', '8384', '8422', '8423', '8424', '8425', '8426', '8427', '8428', '8429', '8432', '8438', '8441', '8442', '8443', '8444', '8445', '8446', '8447', '8448', '8449', '8450', '8451', '8452', '8453', '8454', '8455', '8460', '8461', '8466', '8467', '8468', '8469', '8470', '8471', '8472', '8473', '8474', '8479', '8480', '8481', '8482', '8483', '8484', '8485', '8486', '8487', '8488', '8489', '8490', '8491', '8492', '8493', '8494', '8495', '8496', '8497', '8498', '8499', '8500', '8501', '8502', '8503', '8504', '8505', '8506', '8507', '8508', '8509', '8510', '8512', '8515', '8516', '8517', '8536', '8537', '8538', '8539', '8540', '8541', '8542', '8543', '8544', '8545', '8546', '8547', '8548', '8549', '8550', '8574', '8575', '8576', '8577', '8588', '8589', '8590', '8591', '8592', '8593', '8594', '8595', '8596', '8597', '8598', '8599', '8600', '8601', '8602', '8603', '8604', '8605', '8606', '8607', '8608', '8620', '8621', '8622', '8623', '8624', '8625', '8626', '8627', '8628', '8629', '8630', '8631', '8632', '8633', '8634', '8635', '8636', '8637', '8638', '8639', '8640', '8641', '17000', '17001', '17002', '17003', '17038', '17039', '17040', '17041', '17042', '17043', '17051', '17052', '17053', '17054', '17055', '17056', '17057', '17058', '17059', '17060', '17061', '17062', '17063', '17064', '17065', '17066', '17067', '17068', '17069', '17070', '17071', '17072', '17073', '17074', '17075', '17076', '17077', '17078', '17079', '17080', '17081', '17082', '17083', '17084', '17085', '17086', '17087', '17088', '17126', '17127', '17128', '17129', '17130', '17131', '17132', '17133', '17136', '17142', '17145', '17146', '17147', '17148', '17149', '17150', '17151', '17152', '17153', '17154', '17155', '17156', '17157', '17158', '17159', '17164', '17165', '17170', '17171', '17172', '17173', '17174', '17175', '17176', '17177', '17178', '17183', '17184', '17185', '17186', '17187', '17188', '17189', '17190', '17191', '17192', '17193', '17194', '17195', '17196', '17197', '17198', '17199', '17200', '17201', '17202', '17203', '17204', '17205', '17206', '17207', '17208', '17209', '17210', '17211', '17212', '17213', '17214', '17216', '17219', '17220', '17221', '17240', '17241', '17242', '17243', '17244', '17245', '17246', '17247', '17248', '17249', '17250', '17251', '17252', '17253', '17254', '17278', '17279', '17280', '17281', '17292', '17293', '17294', '17295', '17296', '17297', '17298', '17299', '17300', '17301', '17302', '17303', '17304', '17305', '17306', '17307', '17308', '17309', '17310', '17311', '17312', '17324', '17325', '17326', '17327', '17328', '17329', '17330', '17331', '17332', '17333', '17334', '17335', '17336', '17337', '17338', '17339', '17340', '17341', '17342', '17343', '17344', '17345']\n\n\ndef getVtx( bodyGeo, vtxIndex ):\n    vtxList = []\n    count = 0\n    for i in vtxIndex:\n        vtxList.append( '{}.vtx[{}]'.format(bodyGeo, vtxIndex[count]) )\n        count += 1\n    return vtxList\n    \ndef getBboxCenter( bbox ):    \n    xmid = (bbox[0]+bbox[3])/2\n    ymid = (bbox[1]+bbox[4])/2\n    zmid = (bbox[2]+bbox[5])/2\n    bboxCenter = (xmid, ymid, zmid)\n    return bboxCenter\n\ndef getBboxScaleDiff ( bboxA, bboxB ):\n    sxDiff = (bboxA[3]-bboxA[0])/(bboxB[3]-bboxB[0])\n    syDiff = (bboxA[4]-bboxA[1])/(bboxB[4]-bboxB[1])\n    szDiff = (bboxA[5]-bboxA[2])/(bboxB[5]-bboxB[2])\n    scaleDiff = [sxDiff, syDiff, szDiff]\n    return scaleDiff\n\ndef floodVtxWeights( vtx, invertSel = False, value = 0, smooth = 0 ):\n    if len(vtx) == 0:\n        return\n    cmds.select( cl=True )     \n    cmds.select(vtx)\n    if invertSel:\n        geo = vtx[0].split('.')[0]\n        cmds.select( '{}.vtx[*]'.format(geo), tgl=True )\n        \n    paintBlspCtx = cmds.artAttrSkinPaintCtx()\n    cmds.setToolTo( paintBlspCtx )    \n    if smooth == 0:\n        cmds.artAttrSkinPaintCtx( paintBlspCtx, edit=True, val = value )\n        cmds.artAttrSkinPaintCtx( paintBlspCtx, edit=True, sao='absolute' )        \n        cmds.artAttrSkinPaintCtx( paintBlspCtx, edit=True, clr = True )\n    else:\n        cmds.artAttrSkinPaintCtx( paintBlspCtx, edit=True, sao='smooth' )\n        for t in range(0,smooth):\n            cmds.artAttrSkinPaintCtx( paintBlspCtx, edit=True, clr = True )\n    cmds.select( cl=True )         \n\ndef mouthbagMatch( smooth = 5 ):\n    orgCtx = cmds.currentCtx()\n    # get bodyShell and sharedBody\n    sel = cmds.ls( sl=True )\n    if len(sel) == 0:\n        if cmds.objExists('BodyShell_sbdv'):\n            bodyShell = 'BodyShell_sbdv'\n        else:\n            return\n    else:\n        bodyShell = sel[0]\n        \n    if cmds.objExists('SharedHuman_sbdv'):\n        sharedBody = 'SharedHuman_sbdv' \n    else:\n        print (\"Warning: cannot find sharedHuman_sbdv.\")\n        return\n\n    # get the scale/translation difference based on the mouthbag and the teeth bounding box\n    mouthbagVtx = getVtx( sharedBody, mouthbagVtxIndex )\n    mouthbagBbox = cmds.exactWorldBoundingBox( mouthbagVtx )\n    mouthbagCenter = getBboxCenter( mouthbagBbox )\n    teethBbox = cmds.exactWorldBoundingBox( 'Mouth' )\n    cmds.xform( 'Mouth', cp=True)\n    scaleDiff = getBboxScaleDiff ( teethBbox, mouthbagBbox )\n    scaleOut = [1.05, 1.07, 1.22] # default value to scale out the mouthbag a little bit in order to cover the teeth\n\n    # copy and transform sharedBody for blsp\n    sharedBodyCopy = cmds.duplicate( sharedBody, n = 'sharedBodyCopy' )[0]\n    cmds.xform( sharedBodyCopy, ws=True, piv = mouthbagCenter )\n    cmds.matchTransform( sharedBodyCopy, 'Mouth', pos=True )\n    cmds.xform( sharedBodyCopy, scale = scaleDiff, r=True )\n    cmds.xform( sharedBodyCopy, scale = scaleOut, r=True )\n    cmds.makeIdentity( sharedBodyCopy, a=True )\n\n    # create blendShape, flood and smooth weights\n    blspMouthbag = cmds.blendShape( sharedBodyCopy, bodyShell, n = 'mouthbagMatch_blsp' )[0]\n    bodyShellMouthbagVtx = getVtx( bodyShell, mouthbagVtxIndex )\n    floodVtxWeights( bodyShellMouthbagVtx, invertSel = True, value = 0 )\n    floodVtxWeights( bodyShellMouthbagVtx, invertSel = True, smooth = smooth )\n    #cmds.setAttr( '{}.{}'.format(blspMouthbag, sharedBodyCopy), 1 )\n    #cmds.delete( bodyShell, ch=True )\n    cmds.delete( sharedBodyCopy )\n    cmds.setToolTo( orgCtx )\n\ndef safe_blendshape(driver=None, driven=None, pts=None):\n    orgCtx = cmds.currentCtx()\n\n    # create blendShape, flood and smooth weights\n    blspMouthbag = cmds.blendShape( driver, driven, n = 'match_blsp' )[0]\n    vtx = getVtx( driven, pts )\n    floodVtxWeights( vtx, invertSel = True, value = 0 )\n    #floodVtxWeights( vtx, invertSel = True, smooth = 5 )\n    #cmds.setAttr( '{}.{}'.format(blspMouthbag, driver), 1 )\n    #cmds.delete( driven, ch=True )\n    cmds.setToolTo( orgCtx )\n\n\n\ndef safe_blendshape_mouthbag(driver=None, driven=None):\n    safe_blendshape(driver=driver, driven=driven, pts=mouthbagVtxIndex)\n\nsel = cmds.ls(sl=True)\ndriver=sel[0]\ndriven=sel[1]\nsafe_blendshape_mouthbag( driver=driver, driven=driven)\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "\"\"\"\n    This script is for quickly blendshape the shared humanBo..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "MBgBlend" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "\"\"\"\n    This script is for quickly blendshape the shared humanBody mouythbag \n    to the character model, based on character's teeth position and scale.\n\n\"\"\"\n\nimport maya.cmds as cmds\n\n# list of vtx indexes of the mouthbag\nmouthbagVtxIndex = ['8156', '8157', '8158', '8161', '8162', '8163', '8164', '8165', '8166', '8174', '8177', '8183', '8185', '8186', '8187', '8188', '8189', '8190', '8191', '8192', '8193', '8194', '8195', '8196', '8197', '8198', '8199', '8200', '8201', '8202', '8205', '8206', '8207', '8296', '8297', '8298', '8299', '8334', '8335', '8336', '8337', '8338', '8339', '8347', '8348', '8349', '8350', '8351', '8352', '8353', '8354', '8355', '8356', '8357', '8358', '8359', '8360', '8361', '8362', '8363', '8364', '8365', '8366', '8367', '8368', '8369', '8370', '8371', '8372', '8373', '8374', '8375', '8376', '8377', '8378', '8379', '8380', '8381', '8382', '8383', '8384', '8422', '8423', '8424', '8425', '8426', '8427', '8428', '8429', '8432', '8438', '8441', '8442', '8443', '8444', '8445', '8446', '8447', '8448', '8449', '8450', '8451', '8452', '8453', '8454', '8455', '8460', '8461', '8466', '8467', '8468', '8469', '8470', '8471', '8472', '8473', '8474', '8479', '8480', '8481', '8482', '8483', '8484', '8485', '8486', '8487', '8488', '8489', '8490', '8491', '8492', '8493', '8494', '8495', '8496', '8497', '8498', '8499', '8500', '8501', '8502', '8503', '8504', '8505', '8506', '8507', '8508', '8509', '8510', '8512', '8515', '8516', '8517', '8536', '8537', '8538', '8539', '8540', '8541', '8542', '8543', '8544', '8545', '8546', '8547', '8548', '8549', '8550', '8574', '8575', '8576', '8577', '8588', '8589', '8590', '8591', '8592', '8593', '8594', '8595', '8596', '8597', '8598', '8599', '8600', '8601', '8602', '8603', '8604', '8605', '8606', '8607', '8608', '8620', '8621', '8622', '8623', '8624', '8625', '8626', '8627', '8628', '8629', '8630', '8631', '8632', '8633', '8634', '8635', '8636', '8637', '8638', '8639', '8640', '8641', '17000', '17001', '17002', '17003', '17038', '17039', '17040', '17041', '17042', '17043', '17051', '17052', '17053', '17054', '17055', '17056', '17057', '17058', '17059', '17060', '17061', '17062', '17063', '17064', '17065', '17066', '17067', '17068', '17069', '17070', '17071', '17072', '17073', '17074', '17075', '17076', '17077', '17078', '17079', '17080', '17081', '17082', '17083', '17084', '17085', '17086', '17087', '17088', '17126', '17127', '17128', '17129', '17130', '17131', '17132', '17133', '17136', '17142', '17145', '17146', '17147', '17148', '17149', '17150', '17151', '17152', '17153', '17154', '17155', '17156', '17157', '17158', '17159', '17164', '17165', '17170', '17171', '17172', '17173', '17174', '17175', '17176', '17177', '17178', '17183', '17184', '17185', '17186', '17187', '17188', '17189', '17190', '17191', '17192', '17193', '17194', '17195', '17196', '17197', '17198', '17199', '17200', '17201', '17202', '17203', '17204', '17205', '17206', '17207', '17208', '17209', '17210', '17211', '17212', '17213', '17214', '17216', '17219', '17220', '17221', '17240', '17241', '17242', '17243', '17244', '17245', '17246', '17247', '17248', '17249', '17250', '17251', '17252', '17253', '17254', '17278', '17279', '17280', '17281', '17292', '17293', '17294', '17295', '17296', '17297', '17298', '17299', '17300', '17301', '17302', '17303', '17304', '17305', '17306', '17307', '17308', '17309', '17310', '17311', '17312', '17324', '17325', '17326', '17327', '17328', '17329', '17330', '17331', '17332', '17333', '17334', '17335', '17336', '17337', '17338', '17339', '17340', '17341', '17342', '17343', '17344', '17345']\n\n\ndef getVtx( bodyGeo, vtxIndex ):\n    vtxList = []\n    count = 0\n    for i in vtxIndex:\n        vtxList.append( '{}.vtx[{}]'.format(bodyGeo, vtxIndex[count]) )\n        count += 1\n    return vtxList\n    \ndef getBboxCenter( bbox ):    \n    xmid = (bbox[0]+bbox[3])/2\n    ymid = (bbox[1]+bbox[4])/2\n    zmid = (bbox[2]+bbox[5])/2\n    bboxCenter = (xmid, ymid, zmid)\n    return bboxCenter\n\ndef getBboxScaleDiff ( bboxA, bboxB ):\n    sxDiff = (bboxA[3]-bboxA[0])/(bboxB[3]-bboxB[0])\n    syDiff = (bboxA[4]-bboxA[1])/(bboxB[4]-bboxB[1])\n    szDiff = (bboxA[5]-bboxA[2])/(bboxB[5]-bboxB[2])\n    scaleDiff = [sxDiff, syDiff, szDiff]\n    return scaleDiff\n\ndef floodVtxWeights( vtx, invertSel = False, value = 0, smooth = 0 ):\n    if len(vtx) == 0:\n        return\n    cmds.select( cl=True )     \n    cmds.select(vtx)\n    if invertSel:\n        geo = vtx[0].split('.')[0]\n        cmds.select( '{}.vtx[*]'.format(geo), tgl=True )\n        \n    paintBlspCtx = cmds.artAttrSkinPaintCtx()\n    cmds.setToolTo( paintBlspCtx )    \n    if smooth == 0:\n        cmds.artAttrSkinPaintCtx( paintBlspCtx, edit=True, val = value )\n        cmds.artAttrSkinPaintCtx( paintBlspCtx, edit=True, sao='absolute' )        \n        cmds.artAttrSkinPaintCtx( paintBlspCtx, edit=True, clr = True )\n    else:\n        cmds.artAttrSkinPaintCtx( paintBlspCtx, edit=True, sao='smooth' )\n        for t in range(0,smooth):\n            cmds.artAttrSkinPaintCtx( paintBlspCtx, edit=True, clr = True )\n    cmds.select( cl=True )         \n\ndef mouthbagMatch( smooth = 5 ):\n    orgCtx = cmds.currentCtx()\n    # get bodyShell and sharedBody\n    sel = cmds.ls( sl=True )\n    if len(sel) == 0:\n        if cmds.objExists('BodyShell_sbdv'):\n            bodyShell = 'BodyShell_sbdv'\n        else:\n            return\n    else:\n        bodyShell = sel[0]\n        \n    if cmds.objExists('SharedHuman_sbdv'):\n        sharedBody = 'SharedHuman_sbdv' \n    else:\n        print (\"Warning: cannot find sharedHuman_sbdv.\")\n        return\n\n    # get the scale/translation difference based on the mouthbag and the teeth bounding box\n    mouthbagVtx = getVtx( sharedBody, mouthbagVtxIndex )\n    mouthbagBbox = cmds.exactWorldBoundingBox( mouthbagVtx )\n    mouthbagCenter = getBboxCenter( mouthbagBbox )\n    teethBbox = cmds.exactWorldBoundingBox( 'Mouth' )\n    cmds.xform( 'Mouth', cp=True)\n    scaleDiff = getBboxScaleDiff ( teethBbox, mouthbagBbox )\n    scaleOut = [1.05, 1.07, 1.22] # default value to scale out the mouthbag a little bit in order to cover the teeth\n\n    # copy and transform sharedBody for blsp\n    sharedBodyCopy = cmds.duplicate( sharedBody, n = 'sharedBodyCopy' )[0]\n    cmds.xform( sharedBodyCopy, ws=True, piv = mouthbagCenter )\n    cmds.matchTransform( sharedBodyCopy, 'Mouth', pos=True )\n    cmds.xform( sharedBodyCopy, scale = scaleDiff, r=True )\n    cmds.xform( sharedBodyCopy, scale = scaleOut, r=True )\n    cmds.makeIdentity( sharedBodyCopy, a=True )\n\n    # create blendShape, flood and smooth weights\n    blspMouthbag = cmds.blendShape( sharedBodyCopy, bodyShell, n = 'mouthbagMatch_blsp' )[0]\n    bodyShellMouthbagVtx = getVtx( bodyShell, mouthbagVtxIndex )\n    floodVtxWeights( bodyShellMouthbagVtx, invertSel = True, value = 0 )\n    floodVtxWeights( bodyShellMouthbagVtx, invertSel = True, smooth = smooth )\n    #cmds.setAttr( '{}.{}'.format(blspMouthbag, sharedBodyCopy), 1 )\n    #cmds.delete( bodyShell, ch=True )\n    cmds.delete( sharedBodyCopy )\n    cmds.setToolTo( orgCtx )\n\ndef safe_blendshape(driver=None, driven=None, pts=None):\n    orgCtx = cmds.currentCtx()\n\n    # create blendShape, flood and smooth weights\n    blspMouthbag = cmds.blendShape( driver, driven, n = 'match_blsp' )[0]\n    vtx = getVtx( driven, pts )\n    floodVtxWeights( vtx, invertSel = True, value = 0 )\n    #floodVtxWeights( vtx, invertSel = True, smooth = 5 )\n    #cmds.setAttr( '{}.{}'.format(blspMouthbag, driver), 1 )\n    #cmds.delete( driven, ch=True )\n    cmds.setToolTo( orgCtx )\n\n\n\ndef safe_blendshape_mouthbag(driver=None, driven=None):\n    safe_blendshape(driver=driver, driven=driven, pts=mouthbagVtxIndex)\n\nsel = cmds.ls(sl=True)\ndriver=sel[0]\ndriven=sel[1]\nsafe_blendshape_mouthbag( driver=driver, driven=driven)\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "\ncmds.select(cmds.ls(sl=True), r=True)\ncmds.selectMode(component=True )\ncmds.selectType(controlVertex=True)\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "\ncmds.select(cmds.ls(sl=True), r=True)\ncmds.selectMode(component..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "CVS" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "\ncmds.select(cmds.ls(sl=True), r=True)\ncmds.selectMode(component=True )\ncmds.selectType(controlVertex=True)\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "def alignPointToPoint(pointFrom=None, pointTo=None, pointUp=None):\n    print \"Done\"\n    \n    pointGroups = []\n    for point in [pointFrom, pointTo, pointUp]:\n        pointGroup = cmds.group(em=True)\n        pointGroups.append(pointGroup)\n        spaceLoc = cmds.spaceLocator()\n        cmds.parent(spaceLoc, pointGroup)\n        pointP = cmds.pointPosition(point, w=True)\n        cmds.move(pointP[0], pointP[1], pointP[2], pointGroup, a=True)\n        \n                \n    groupOne = pointGroups[0]\n    \n    groupTwo = pointGroups[1]\n    groupThree = pointGroups[2]\n    \n    cmds.aimConstraint(groupTwo, groupOne, wuo=groupThree, wut=1)\n        \n    position = cmds.pointPosition(pointFrom, w=True)\n    print position\n    x = cmds.getAttr(groupOne + \".rx\")\n    y = cmds.getAttr(groupOne + \".ry\")\n    z = cmds.getAttr(groupOne + \".rz\")\n    #cmds.manipPivot(p=position, o=[x, y, z])\n    #cmds.delete(pointGroups)\n    return position, [x, y, z], pointGroups\n\nUP_LID_SPAN_1 = ['7081', '7080', '7079', '6382', '6381', '6378', '6377', '6408', '6410', '6412', '6527', '6529', '6528']\nUP_LID_SPAN_2 = ['6442', '6385', '6384', '6383', '6380', '6379', '6376', '6407', '6409', '6411', '6426', '6431', '6434']\nUP_LID_SPAN_3 = ['7054', '7053', '7052', '7051', '7050', '7049', '7048', '7047', '7046', '7045', '7044', '7043', '7042']\nUP_LID_SPAN_4 = ['6441', '6403', '6402', '6401', '6400', '6399', '6398', '6420', '6421', '6422', '6425', '6432', '6433']\nUP_LID_SPAN_5 = ['6454', '6456', '6457', '6459', '6458', '6461', '6460', '6462', '6463', '6464', '6465', '6526', '6525']\nUP_LID_SPAN_6 = ['6488', '6491', '6494', '6497', '6496', '6501', '6500', '6504', '6506', '6508', '6510', '6513', '6512']\n\nUP_LID_UP_VEC_1 = ['6377']\nUP_LID_UP_VEC_2 = ['6376']\nUP_LID_UP_VEC_3 = ['7048']\nUP_LID_UP_VEC_4 = ['6398']\nUP_LID_UP_VEC_5 = ['6460']\nUP_LID_UP_VEC_6 = ['6500']\nUP_LID_SPANS = [UP_LID_SPAN_1, UP_LID_SPAN_2, UP_LID_SPAN_3, UP_LID_SPAN_4, UP_LID_SPAN_5, UP_LID_SPAN_6]\n\n\n\nLO_LID_SPAN_1 = ['6445', '6395', '6392', '6539', '6390', '6389', '6386', '6413', '6415', '6417', '6532', '6533', '6530']\nLO_LID_SPAN_2 = ['6440', '6394', '6393', '6538', '6391', '6388', '6387', '6414', '6416', '6418', '6428', '6429', '6436']\nLO_LID_SPAN_3 = ['7056', '7057', '7058', '7059', '7060', '7061', '7034', '7035', '7036', '7037', '7038', '7039', '7040']\nLO_LID_SPAN_4 = ['6439', '6405', '6404', '6537', '6406', '6397', '6396', '6419', '6423', '6424', '6427', '6430', '6435']\nLO_LID_SPAN_5 = ['6453', '6452', '6451', '6536', '6450', '6449', '6448', '6447', '6446', '6470', '6468', '6469', '6466']\nLO_LID_SPAN_6 = ['6486', '6484', '6481', '6535', '6480', '6478', '6476', '6474', '6471', '6523', '6522', '6519', '6516']\n\nLO_LID_SPANS = [LO_LID_SPAN_1, LO_LID_SPAN_2, LO_LID_SPAN_3, LO_LID_SPAN_4, LO_LID_SPAN_5, LO_LID_SPAN_6]\n\n\n\ndef lidCloseTool(bodyshellName = None):\n    for lid in [UP_LID_SPANS, LO_LID_SPANS]:\n        for span in lid:\n            upLidSpans = [ str( bodyshellName + \".vtx[\" + x + \"]\") for x in span]\n            posOri = alignPointToPoint(upLidSpans[0], upLidSpans[-1], upLidSpans[5])\n            tx = cmds.getAttr(posOri[2][0] + \".tx\")\n            ty = cmds.getAttr(posOri[2][0] + \".ty\")\n            tz = cmds.getAttr(posOri[2][0] + \".tz\")\n            cmds.scale(1,1,0, upLidSpans, a=True, pivot=[tx,ty, tz] , oa=posOri[1] )\n            cmds.delete(posOri[2])\n\n#oa -2.988679rad -0.0597501rad 0.338526rad -r -p 2.0524cm -8.205391cm 159.538544cm 1 1 1e-05\n#DONT FORGET THE OS FLAG TO KEEP TRACK OF SELECTION ORDER\n#sel=cmds.ls( os =True)\n#alignPointToPoint(sel[0], sel[1], sel[2])\nbodyshellName = cmds.ls(sl=True)[0]\nlidCloseTool(bodyshellName=bodyshellName)\n        " 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "def alignPointToPoint(pointFrom=None, pointTo=None, pointUp=None..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "LidTool" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "def alignPointToPoint(pointFrom=None, pointTo=None, pointUp=None):\n    print \"Done\"\n    \n    pointGroups = []\n    for point in [pointFrom, pointTo, pointUp]:\n        pointGroup = cmds.group(em=True)\n        pointGroups.append(pointGroup)\n        spaceLoc = cmds.spaceLocator()\n        cmds.parent(spaceLoc, pointGroup)\n        pointP = cmds.pointPosition(point, w=True)\n        cmds.move(pointP[0], pointP[1], pointP[2], pointGroup, a=True)\n        \n                \n    groupOne = pointGroups[0]\n    \n    groupTwo = pointGroups[1]\n    groupThree = pointGroups[2]\n    \n    cmds.aimConstraint(groupTwo, groupOne, wuo=groupThree, wut=1)\n        \n    position = cmds.pointPosition(pointFrom, w=True)\n    print position\n    x = cmds.getAttr(groupOne + \".rx\")\n    y = cmds.getAttr(groupOne + \".ry\")\n    z = cmds.getAttr(groupOne + \".rz\")\n    #cmds.manipPivot(p=position, o=[x, y, z])\n    #cmds.delete(pointGroups)\n    return position, [x, y, z], pointGroups\n\nUP_LID_SPAN_1 = ['7081', '7080', '7079', '6382', '6381', '6378', '6377', '6408', '6410', '6412', '6527', '6529', '6528']\nUP_LID_SPAN_2 = ['6442', '6385', '6384', '6383', '6380', '6379', '6376', '6407', '6409', '6411', '6426', '6431', '6434']\nUP_LID_SPAN_3 = ['7054', '7053', '7052', '7051', '7050', '7049', '7048', '7047', '7046', '7045', '7044', '7043', '7042']\nUP_LID_SPAN_4 = ['6441', '6403', '6402', '6401', '6400', '6399', '6398', '6420', '6421', '6422', '6425', '6432', '6433']\nUP_LID_SPAN_5 = ['6454', '6456', '6457', '6459', '6458', '6461', '6460', '6462', '6463', '6464', '6465', '6526', '6525']\nUP_LID_SPAN_6 = ['6488', '6491', '6494', '6497', '6496', '6501', '6500', '6504', '6506', '6508', '6510', '6513', '6512']\n\nUP_LID_UP_VEC_1 = ['6377']\nUP_LID_UP_VEC_2 = ['6376']\nUP_LID_UP_VEC_3 = ['7048']\nUP_LID_UP_VEC_4 = ['6398']\nUP_LID_UP_VEC_5 = ['6460']\nUP_LID_UP_VEC_6 = ['6500']\nUP_LID_SPANS = [UP_LID_SPAN_1, UP_LID_SPAN_2, UP_LID_SPAN_3, UP_LID_SPAN_4, UP_LID_SPAN_5, UP_LID_SPAN_6]\n\n\n\nLO_LID_SPAN_1 = ['6445', '6395', '6392', '6539', '6390', '6389', '6386', '6413', '6415', '6417', '6532', '6533', '6530']\nLO_LID_SPAN_2 = ['6440', '6394', '6393', '6538', '6391', '6388', '6387', '6414', '6416', '6418', '6428', '6429', '6436']\nLO_LID_SPAN_3 = ['7056', '7057', '7058', '7059', '7060', '7061', '7034', '7035', '7036', '7037', '7038', '7039', '7040']\nLO_LID_SPAN_4 = ['6439', '6405', '6404', '6537', '6406', '6397', '6396', '6419', '6423', '6424', '6427', '6430', '6435']\nLO_LID_SPAN_5 = ['6453', '6452', '6451', '6536', '6450', '6449', '6448', '6447', '6446', '6470', '6468', '6469', '6466']\nLO_LID_SPAN_6 = ['6486', '6484', '6481', '6535', '6480', '6478', '6476', '6474', '6471', '6523', '6522', '6519', '6516']\n\nLO_LID_SPANS = [LO_LID_SPAN_1, LO_LID_SPAN_2, LO_LID_SPAN_3, LO_LID_SPAN_4, LO_LID_SPAN_5, LO_LID_SPAN_6]\n\n\n\ndef lidCloseTool(bodyshellName = None):\n    for lid in [UP_LID_SPANS, LO_LID_SPANS]:\n        for span in lid:\n            upLidSpans = [ str( bodyshellName + \".vtx[\" + x + \"]\") for x in span]\n            posOri = alignPointToPoint(upLidSpans[0], upLidSpans[-1], upLidSpans[5])\n            tx = cmds.getAttr(posOri[2][0] + \".tx\")\n            ty = cmds.getAttr(posOri[2][0] + \".ty\")\n            tz = cmds.getAttr(posOri[2][0] + \".tz\")\n            cmds.scale(1,1,0, upLidSpans, a=True, pivot=[tx,ty, tz] , oa=posOri[1] )\n            cmds.delete(posOri[2])\n\n#oa -2.988679rad -0.0597501rad 0.338526rad -r -p 2.0524cm -8.205391cm 159.538544cm 1 1 1e-05\n#DONT FORGET THE OS FLAG TO KEEP TRACK OF SELECTION ORDER\n#sel=cmds.ls( os =True)\n#alignPointToPoint(sel[0], sel[1], sel[2])\nbodyshellName = cmds.ls(sl=True)[0]\nlidCloseTool(bodyshellName=bodyshellName)\n        " 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 1
        -flexibleWidthValue 32
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "def alignPointToPoint(pointFrom=None, pointTo=None, pointUp=None):\n    print \"Done\"\n    \n    pointGroups = []\n    for point in [pointFrom, pointTo, pointUp]:\n        pointGroup = cmds.group(em=True)\n        pointGroups.append(pointGroup)\n        spaceLoc = cmds.spaceLocator()\n        cmds.parent(spaceLoc, pointGroup)\n        pointP = cmds.pointPosition(point, w=True)\n        cmds.move(pointP[0], pointP[1], pointP[2], pointGroup, a=True)\n        \n                \n    groupOne = pointGroups[0]\n    \n    groupTwo = pointGroups[1]\n    groupThree = pointGroups[2]\n    \n    cmds.aimConstraint(groupTwo, groupOne, wuo=groupThree, wut=1)\n        \n    position = cmds.pointPosition(pointFrom, w=True)\n    print position\n    x = cmds.getAttr(groupOne + \".rx\")\n    y = cmds.getAttr(groupOne + \".ry\")\n    z = cmds.getAttr(groupOne + \".rz\")\n    #cmds.manipPivot(p=position, o=[x, y, z])\n    #cmds.delete(pointGroups)\n    return position, [x, y, z], pointGroups\n\nUP_LID_SPAN_1 = ['7081', '7080', '7079', '6382', '6381', '6378', '6377', '6408', '6410', '6412', '6527', '6529', '6528']\nUP_LID_SPAN_2 = ['6442', '6385', '6384', '6383', '6380', '6379', '6376', '6407', '6409', '6411', '6426', '6431', '6434']\nUP_LID_SPAN_3 = ['7054', '7053', '7052', '7051', '7050', '7049', '7048', '7047', '7046', '7045', '7044', '7043', '7042']\nUP_LID_SPAN_4 = ['6441', '6403', '6402', '6401', '6400', '6399', '6398', '6420', '6421', '6422', '6425', '6432', '6433']\nUP_LID_SPAN_5 = ['6454', '6456', '6457', '6459', '6458', '6461', '6460', '6462', '6463', '6464', '6465', '6526', '6525']\nUP_LID_SPAN_6 = ['6488', '6491', '6494', '6497', '6496', '6501', '6500', '6504', '6506', '6508', '6510', '6513', '6512']\n\nUP_LID_UP_VEC_1 = ['6377']\nUP_LID_UP_VEC_2 = ['6376']\nUP_LID_UP_VEC_3 = ['7048']\nUP_LID_UP_VEC_4 = ['6398']\nUP_LID_UP_VEC_5 = ['6460']\nUP_LID_UP_VEC_6 = ['6500']\nUP_LID_SPANS = [UP_LID_SPAN_1, UP_LID_SPAN_2, UP_LID_SPAN_3, UP_LID_SPAN_4, UP_LID_SPAN_5, UP_LID_SPAN_6]\n\n\n\nLO_LID_SPAN_1 = ['6445', '6395', '6392', '6539', '6390', '6389', '6386', '6413', '6415', '6417', '6532', '6533', '6530']\nLO_LID_SPAN_2 = ['6440', '6394', '6393', '6538', '6391', '6388', '6387', '6414', '6416', '6418', '6428', '6429', '6436']\nLO_LID_SPAN_3 = ['7056', '7057', '7058', '7059', '7060', '7061', '7034', '7035', '7036', '7037', '7038', '7039', '7040']\nLO_LID_SPAN_4 = ['6439', '6405', '6404', '6537', '6406', '6397', '6396', '6419', '6423', '6424', '6427', '6430', '6435']\nLO_LID_SPAN_5 = ['6453', '6452', '6451', '6536', '6450', '6449', '6448', '6447', '6446', '6470', '6468', '6469', '6466']\nLO_LID_SPAN_6 = ['6486', '6484', '6481', '6535', '6480', '6478', '6476', '6474', '6471', '6523', '6522', '6519', '6516']\n\nLO_LID_SPANS = [LO_LID_SPAN_1, LO_LID_SPAN_2, LO_LID_SPAN_3, LO_LID_SPAN_4, LO_LID_SPAN_5, LO_LID_SPAN_6]\n\n\n\ndef lidCloseTool(bodyshellName = None):\n    for lid in [UP_LID_SPANS, LO_LID_SPANS]:\n        for span in lid:\n            upLidSpans = [ str( bodyshellName + \".vtx[\" + x + \"]\") for x in span]\n            posOri = alignPointToPoint(upLidSpans[0], upLidSpans[-1], upLidSpans[5])\n            tx = cmds.getAttr(posOri[2][0] + \".tx\")\n            ty = cmds.getAttr(posOri[2][0] + \".ty\")\n            tz = cmds.getAttr(posOri[2][0] + \".tz\")\n            cmds.scale(1,1,0, upLidSpans, a=True, pivot=[tx,ty, tz] , oa=posOri[1] )\n            cmds.delete(posOri[2])\n\n#oa -2.988679rad -0.0597501rad 0.338526rad -r -p 2.0524cm -8.205391cm 159.538544cm 1 1 1e-05\n#DONT FORGET THE OS FLAG TO KEEP TRACK OF SELECTION ORDER\n#sel=cmds.ls( os =True)\n#alignPointToPoint(sel[0], sel[1], sel[2])\nbodyshellName = cmds.ls(sl=True)[0]\nlidCloseTool(bodyshellName=bodyshellName)\n        " 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "def alignPointToPoint(pointFrom=None, pointTo=None, pointUp=None..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "LidTool" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "LidToolIcon.png" 
        -image1 "LidToolIcon.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "def alignPointToPoint(pointFrom=None, pointTo=None, pointUp=None):\n    print \"Done\"\n    \n    pointGroups = []\n    for point in [pointFrom, pointTo, pointUp]:\n        pointGroup = cmds.group(em=True)\n        pointGroups.append(pointGroup)\n        spaceLoc = cmds.spaceLocator()\n        cmds.parent(spaceLoc, pointGroup)\n        pointP = cmds.pointPosition(point, w=True)\n        cmds.move(pointP[0], pointP[1], pointP[2], pointGroup, a=True)\n        \n                \n    groupOne = pointGroups[0]\n    \n    groupTwo = pointGroups[1]\n    groupThree = pointGroups[2]\n    \n    cmds.aimConstraint(groupTwo, groupOne, wuo=groupThree, wut=1)\n        \n    position = cmds.pointPosition(pointFrom, w=True)\n    print position\n    x = cmds.getAttr(groupOne + \".rx\")\n    y = cmds.getAttr(groupOne + \".ry\")\n    z = cmds.getAttr(groupOne + \".rz\")\n    #cmds.manipPivot(p=position, o=[x, y, z])\n    #cmds.delete(pointGroups)\n    return position, [x, y, z], pointGroups\n\nUP_LID_SPAN_1 = ['7081', '7080', '7079', '6382', '6381', '6378', '6377', '6408', '6410', '6412', '6527', '6529', '6528']\nUP_LID_SPAN_2 = ['6442', '6385', '6384', '6383', '6380', '6379', '6376', '6407', '6409', '6411', '6426', '6431', '6434']\nUP_LID_SPAN_3 = ['7054', '7053', '7052', '7051', '7050', '7049', '7048', '7047', '7046', '7045', '7044', '7043', '7042']\nUP_LID_SPAN_4 = ['6441', '6403', '6402', '6401', '6400', '6399', '6398', '6420', '6421', '6422', '6425', '6432', '6433']\nUP_LID_SPAN_5 = ['6454', '6456', '6457', '6459', '6458', '6461', '6460', '6462', '6463', '6464', '6465', '6526', '6525']\nUP_LID_SPAN_6 = ['6488', '6491', '6494', '6497', '6496', '6501', '6500', '6504', '6506', '6508', '6510', '6513', '6512']\n\nUP_LID_UP_VEC_1 = ['6377']\nUP_LID_UP_VEC_2 = ['6376']\nUP_LID_UP_VEC_3 = ['7048']\nUP_LID_UP_VEC_4 = ['6398']\nUP_LID_UP_VEC_5 = ['6460']\nUP_LID_UP_VEC_6 = ['6500']\nUP_LID_SPANS = [UP_LID_SPAN_1, UP_LID_SPAN_2, UP_LID_SPAN_3, UP_LID_SPAN_4, UP_LID_SPAN_5, UP_LID_SPAN_6]\n\n\n\nLO_LID_SPAN_1 = ['6445', '6395', '6392', '6539', '6390', '6389', '6386', '6413', '6415', '6417', '6532', '6533', '6530']\nLO_LID_SPAN_2 = ['6440', '6394', '6393', '6538', '6391', '6388', '6387', '6414', '6416', '6418', '6428', '6429', '6436']\nLO_LID_SPAN_3 = ['7056', '7057', '7058', '7059', '7060', '7061', '7034', '7035', '7036', '7037', '7038', '7039', '7040']\nLO_LID_SPAN_4 = ['6439', '6405', '6404', '6537', '6406', '6397', '6396', '6419', '6423', '6424', '6427', '6430', '6435']\nLO_LID_SPAN_5 = ['6453', '6452', '6451', '6536', '6450', '6449', '6448', '6447', '6446', '6470', '6468', '6469', '6466']\nLO_LID_SPAN_6 = ['6486', '6484', '6481', '6535', '6480', '6478', '6476', '6474', '6471', '6523', '6522', '6519', '6516']\n\nLO_LID_SPANS = [LO_LID_SPAN_1, LO_LID_SPAN_2, LO_LID_SPAN_3, LO_LID_SPAN_4, LO_LID_SPAN_5, LO_LID_SPAN_6]\n\n\n\ndef lidCloseTool(bodyshellName = None):\n    for lid in [UP_LID_SPANS, LO_LID_SPANS]:\n        for span in lid:\n            upLidSpans = [ str( bodyshellName + \".vtx[\" + x + \"]\") for x in span]\n            posOri = alignPointToPoint(upLidSpans[0], upLidSpans[-1], upLidSpans[6])\n            tx = cmds.getAttr(posOri[2][0] + \".tx\")\n            ty = cmds.getAttr(posOri[2][0] + \".ty\")\n            tz = cmds.getAttr(posOri[2][0] + \".tz\")\n            cmds.scale(1,1,0, upLidSpans, a=True, pivot=[tx,ty, tz] , oa=posOri[1] )\n            cmds.delete(posOri[2])\n\n#oa -2.988679rad -0.0597501rad 0.338526rad -r -p 2.0524cm -8.205391cm 159.538544cm 1 1 1e-05\n#DONT FORGET THE OS FLAG TO KEEP TRACK OF SELECTION ORDER\n#sel=cmds.ls( os =True)\n#alignPointToPoint(sel[0], sel[1], sel[2])\nbodyshellName = cmds.ls(sl=True)[0]\nlidCloseTool(bodyshellName=bodyshellName)\n        " 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "def positionLipCurvePivot(curves):\n    for curve in curves:\n        pointPosition = cmds.pointPosition(curve + '.cv[0]')\n        cmds.move( pointPosition[0], pointPosition[1] ,pointPosition[2], curve + \".scalePivot\", curve + \".rotatePivot\", rpr = True,)\n\n\ncurves = cmds.ls(sl=True)\npositionLipCurvePivot(curves)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "def positionLipCurvePivot(curves):\n    for curve in curves:\n    ..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "PivLipCrvs" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "def positionLipCurvePivot(curves):\n    for curve in curves:\n        pointPosition = cmds.pointPosition(curve + '.cv[0]')\n        cmds.move( pointPosition[0], pointPosition[1] ,pointPosition[2], curve + \".scalePivot\", curve + \".rotatePivot\", rpr = True,)\n\n\ncurves = cmds.ls(sl=True)\npositionLipCurvePivot(curves)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "\n\n\npoints = cmds.ls(sl=True)\naveragePosition = [0,0,0]\nfor point in points:\n    position = cmds.xform(point, q=True, ws = True, t=True)\n    averagePosition[0] += position[0]\n    averagePosition[1] += position[1]\n    averagePosition[2] += position[2]\naveragePosition = [averagePosition[0]/len(points), averagePosition[1]/len(points), averagePosition[2]/len(points)]\n    \n    \ncmds.scale(0,0,1, r=True, ws=True, p=averagePosition)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "\n\n\npoints = cmds.ls(sl=True)\naveragePosition = [0,0,0]\nfor point..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "LipNuetralization" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "\n\n\npoints = cmds.ls(sl=True)\naveragePosition = [0,0,0]\nfor point in points:\n    position = cmds.xform(point, q=True, ws = True, t=True)\n    averagePosition[0] += position[0]\n    averagePosition[1] += position[1]\n    averagePosition[2] += position[2]\naveragePosition = [averagePosition[0]/len(points), averagePosition[1]/len(points), averagePosition[2]/len(points)]\n    \n    \ncmds.scale(0,0,1, r=True, ws=True, p=averagePosition)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select curve(s) or curve on surface(s)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Rebuild" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "rebuildCurve.png" 
        -image1 "rebuildCurve.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "performRebuildCurveSet 1 1 0 0.01 4 3 1 0 0 1 0 1 0.05" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select control vertices on curve" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Smooth" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "smoothCurve.png" 
        -image1 "smoothCurve.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "performSmoothCurvePreset 1 1 10" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    $gBuffStr = `toolButton -style iconOnly -doubleClickCommand "toolPropertyWindow" -cl toolCluster `;
    $gBuffStr1 = `    artPuttyCtx
        -image1 "putty.png" 
        -image2 "vacantCell.png" 
        -image3 "vacantCell.png" 
        -tangentOutline 1
        -surfaceConformedBrushVertices 0
        -record 0
        -importreassign 0
        -selectclonesource 0
        -preserveclonesource 1
        -dynclonemode 1
        -pickColor 0
        -expandfilename 0
        -usepressure 1
        -reflectionaboutorigin 0
        -reflection 0
        -projective 1
        -showactive 1
        -brushfeedback 1
        -outwhilepaint 0
        -outline 1
        -accopacity 1
        -brushalignment 1
        -exportaspectratio 1
        -stampDepth 0.5
        -stampSpacing 0.1
        -screenRadius 7.453915
        -worldRadius 2.376797
        -lowerradius 0.001
        -opacity 0.001
        -reflectionaxis "x" 
        -exportfiletype "IFF" 
        -exportfilemode "luminance" 
        -importfilemode "luminance" 
        -strokesmooth "spline" 
        -mappressure "Opacity" 
        -paintmode "screen" 
        -paintoperationtype "Paint" 
        -dragSlider "none" 
        -radius 7.453915
        -stampProfile "poly" 
        -exportfilesizex 256
        -exportfilesizey 256
        -whichTool "putty" 
        -selectedattroper "absolute" 
        -value 1
        -minvalue 0
        -maxvalue 1
        -clamplower 0
        -clampupper 1
        -alphaclamplower 0
        -alphaclampupper 1
        -clamp "none" 
        -alphaclamp "none" 
        -dataTypeIndex 1
        -colorfeedback 1
        -colorfeedbackOverride 0
        -disablelighting 1
        -colorrangelower 0
        -colorrangeupper 1
        -interactiveUpdate 1
        -colorRGBAValue 0 0 0 1 
        -colorRGBValue 0 0 0 
        -colorAlphaValue 1 
        -useColorRamp 0
        -useMaxMinColor 0
        -rampMinColor 0 0 0 
        -rampMaxColor 1 1 1 
        -colorRamp "1,0,0,1,1,1,0.5,0,0.8,1,1,1,0,0.6,1,0,1,0,0.4,1,0,0,1,0,1" 
        -useNumericDisplay 0
        -numericDisplayPrecision 2
        -numericDisplayColor 1 1 0 
        -useNumericColorRamp 0
        -numericColorRamp "1,0,0,1,1,1,0.5,0,0.6,1,1,1,0,0.4,1,1,1,1,0,1" 
        -numericMinColor 1 1 1 
        -numericMaxColor 0 0 0 
        -mouldtypemouse "relax" 
        -mouldtypehead "relax" 
        -mouldtypetail "erase" 
        -refvector "normal" 
        -refvectoru 1
        -refvectorv 0
        -maxdisp 0.0328084
        -autosmooth 0
        -smoothiters 1
        -brushStrength 1
        -refsurface 1
        -erasesrfupd 0
        -invertrefvector 0
        -collapsecvtol 0.0127
`;
    toolButton -edit -tool $gBuffStr1 -toolImage1 $gBuffStr1 "putty.png" $gBuffStr;
    toolButton -edit -tool $gBuffStr1 $gBuffStr;

    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "\"\"\"\n    This script is for quickly blendshape the shared humanBody mouythbag \n    to the character model, based on character's teeth position and scale.\n\n\"\"\"\n\nimport maya.cmds as cmds\n\n# list of vtx indexes of the mouthbag\nBODY_VTX = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '108', '131', '134', '135', '136', '139', '140', '141', '142', '144', '147', '148', '149', '152', '153', '154', '156', '157', '158', '159', '1038', '1039', '1040', '1041', '1042', '1043', '1044', '1045', '1046', '1061', '1062', '1063', '1064', '1065', '1066', '1067', '1070', '1071', '1072', '1073', '1074', '1075', '1076', '1084', '1085', '1086', '1094', '1095', '1096', '1097', '1102', '1103', '1104', '1111', '1112', '1113', '1114', '1117', '1118', '1119', '1120', '1127', '1128', '1129', '1130', '1131', '1133', '1135', '1136', '1144', '1145', '1146', '1153', '1154', '1155', '1173', '1174', '1176', '1177', '1184', '1185', '1186', '1189', '1190', '1191', '1192', '1193', '1194', '1195', '1196', '1197', '1198', '1199', '1200', '1201', '1202', '1203', '1204', '1205', '1206', '1207', '1208', '1209', '1210', '1211', '1212', '1213', '1214', '1215', '1216', '1217', '1218', '1219', '1220', '1221', '1222', '1223', '1224', '1225', '1226', '1227', '1228', '1229', '1230', '1236', '1237', '1240', '1241', '1242', '1243', '1244', '1247', '1248', '1249', '1250', '1251', '1252', '1253', '1254', '1255', '1256', '1257', '1258', '1259', '1260', '1261', '1262', '1263', '1264', '1265', '1266', '1267', '1268', '1269', '1270', '1271', '1272', '1273', '1274', '1275', '1276', '1277', '1278', '1279', '1280', '1281', '1282', '1283', '1284', '1285', '1286', '1287', '1288', '1289', '1290', '1291', '1292', '1293', '1294', '1295', '1296', '1297', '1298', '1299', '1300', '1301', '1302', '1303', '1304', '1305', '1306', '1307', '1308', '1309', '1310', '1311', '1312', '1313', '1314', '1315', '1316', '1317', '1318', '1319', '1320', '1321', '1322', '1323', '1324', '1325', '1326', '1327', '1328', '1329', '1330', '1331', '1332', '1333', '1334', '1335', '1336', '1337', '1338', '1339', '1340', '1341', '1342', '1343', '1344', '1345', '1346', '1347', '1348', '1349', '1350', '1351', '1352', '1353', '1354', '1355', '1356', '1357', '1358', '1359', '1360', '1361', '1362', '1363', '1364', '1365', '1366', '1367', '1368', '1369', '1370', '1371', '1372', '1373', '1374', '1375', '1376', '1377', '1378', '1379', '1380', '1381', '1382', '1383', '1384', '1385', '1386', '1387', '1388', '1389', '1390', '1391', '1392', '1393', '1394', '1395', '1396', '1397', '1398', '1399', '1400', '1401', '1402', '1403', '1404', '1405', '1406', '1407', '1408', '1409', '1410', '1411', '1412', '1413', '1414', '1415', '1416', '1417', '1418', '1419', '1420', '1421', '1422', '1423', '1424', '1425', '1426', '1427', '1428', '1429', '1430', '1431', '1432', '1433', '1434', '1435', '1436', '1437', '1438', '1439', '1440', '1441', '1442', '1443', '1444', '1445', '1446', '1447', '1448', '1449', '1450', '1451', '1452', '1453', '1454', '1455', '1456', '1457', '1458', '1459', '1460', '1461', '1462', '1463', '1464', '1465', '1466', '1467', '1468', '1469', '1470', '1471', '1472', '1473', '1474', '1475', '1476', '1477', '1478', '1479', '1480', '1481', '1482', '1483', '1484', '1485', '1486', '1487', '1488', '1489', '1490', '1491', '1492', '1493', '1494', '1495', '1496', '1497', '1498', '1499', '1500', '1501', '1502', '1503', '1504', '1505', '1506', '1507', '1508', '1509', '1510', '1511', '1512', '1513', '1514', '1515', '1516', '1517', '1518', '1519', '1520', '1521', '1522', '1523', '1524', '1525', '1526', '1527', '1528', '1529', '1530', '1531', '1532', '1533', '1534', '1535', '1536', '1537', '1538', '1539', '1540', '1541', '1542', '1543', '1544', '1545', '1546', '1547', '1548', '1549', '1550', '1551', '1552', '1553', '1554', '1555', '1556', '1557', '1558', '1559', '1560', '1561', '1562', '1563', '1564', '1565', '1566', '1567', '1568', '1569', '1570', '1571', '1572', '1573', '1574', '1575', '1576', '1577', '1578', '1579', '1580', '1581', '1582', '1583', '1584', '1585', '1586', '1587', '1588', '1589', '1590', '1591', '1592', '1593', '1594', '1595', '1596', '1597', '1598', '1599', '1600', '1601', '1602', '1603', '1604', '1605', '1606', '1607', '1608', '1609', '1610', '1611', '1612', '1613', '1614', '1615', '1616', '1617', '1618', '1619', '1620', '1621', '1622', '1623', '1624', '1625', '1626', '1627', '1628', '1629', '1630', '1631', '1632', '1633', '1634', '1635', '1636', '1637', '1638', '1639', '1640', '1641', '1642', '1643', '1644', '1645', '1646', '1647', '1648', '1649', '1650', '1651', '1652', '1653', '1654', '1655', '1656', '1657', '1658', '1659', '1660', '1661', '1662', '1663', '1664', '1665', '1666', '1667', '1668', '1669', '1670', '1671', '1672', '1673', '1674', '1675', '1676', '1677', '1678', '1679', '1680', '1681', '1682', '1683', '1684', '1685', '1686', '1687', '1688', '1689', '1690', '1691', '1692', '1693', '1694', '1695', '1696', '1697', '1698', '1699', '1700', '1701', '1702', '1703', '1704', '1705', '1706', '1707', '1708', '1709', '1710', '1711', '1712', '1713', '1714', '1715', '1716', '1717', '1718', '1719', '1720', '1721', '1722', '1723', '1724', '1725', '1726', '1727', '1728', '1729', '1730', '1731', '1732', '1733', '1734', '1735', '1736', '1737', '1738', '1739', '1740', '1741', '1742', '1743', '1744', '1745', '1746', '1747', '1748', '1749', '1750', '1751', '1752', '1753', '1754', '1755', '1756', '1757', '1758', '1759', '1760', '1761', '1762', '1763', '1764', '1765', '1766', '1767', '1768', '1769', '1770', '1771', '1772', '1773', '1774', '1775', '1776', '1777', '1778', '1779', '1780', '1781', '1782', '1783', '1784', '1785', '1786', '1787', '1788', '1789', '1790', '1791', '1792', '1793', '1794', '1795', '1796', '1797', '1798', '1799', '1800', '1801', '1802', '1803', '1888', '1889', '1890', '1891', '1892', '1893', '1894', '1895', '1896', '1897', '1898', '1899', '1900', '1901', '1902', '1903', '1904', '1905', '1906', '1907', '1908', '1909', '1910', '1911', '1912', '1913', '1914', '1915', '1916', '1917', '1918', '1919', '1920', '1921', '1922', '1923', '1924', '1925', '1926', '1927', '1928', '1929', '1930', '1931', '1932', '1933', '1934', '1935', '1936', '1937', '1938', '1939', '1940', '1941', '1942', '1943', '1944', '1945', '1946', '1947', '1948', '1949', '1950', '1951', '1952', '1953', '1954', '1955', '1956', '1957', '1958', '1959', '1960', '1961', '1962', '1963', '1964', '1965', '1966', '1967', '1968', '1969', '1970', '1971', '1972', '1973', '1974', '1975', '1976', '1977', '1978', '1979', '1980', '1981', '1982', '1983', '1984', '1985', '1986', '1987', '2316', '2317', '2318', '2319', '2320', '2321', '2322', '2323', '2324', '2325', '2326', '2327', '2328', '2329', '2330', '2331', '2332', '2333', '2334', '2335', '2336', '2337', '2338', '2339', '2340', '2341', '2342', '2343', '2344', '2345', '2346', '2347', '2348', '2349', '2350', '2351', '2352', '2353', '2354', '2355', '2356', '2357', '2358', '2359', '2360', '2361', '2362', '2363', '2364', '2365', '2366', '2367', '2368', '2369', '2370', '2371', '2372', '2373', '2374', '2375', '2376', '2377', '2378', '2379', '2380', '2381', '2382', '2383', '2384', '2385', '2386', '2387', '2388', '2389', '2390', '2391', '2392', '2393', '2394', '2395', '2396', '2397', '2398', '2399', '2400', '2401', '2402', '2403', '2404', '2405', '2406', '2407', '2408', '2409', '2410', '2411', '2412', '2413', '2414', '2415', '2416', '2417', '2418', '2419', '2420', '2421', '2422', '2423', '2424', '2425', '2426', '2427', '2428', '2429', '2430', '2431', '2432', '2433', '2434', '2435', '2436', '2437', '2438', '2439', '2440', '2441', '2442', '2443', '2594', '2595', '2596', '2597', '2598', '2599', '2600', '2601', '2602', '2603', '2604', '2605', '2606', '2607', '2608', '2609', '2610', '2611', '2612', '2613', '2614', '2615', '2616', '2617', '2618', '2619', '2620', '2621', '2622', '2623', '2624', '2625', '2626', '2627', '2628', '2629', '2630', '2631', '2632', '2633', '2634', '2635', '2636', '2637', '2638', '2639', '2640', '2641', '2642', '2643', '2644', '2645', '2646', '2647', '2648', '2649', '2650', '2651', '2652', '2653', '2654', '2655', '2656', '2657', '2658', '2659', '2660', '2661', '2662', '2663', '2664', '2665', '2666', '2667', '2668', '2669', '2670', '2671', '2672', '2673', '2674', '2675', '2676', '2677', '2678', '2679', '2680', '2681', '2682', '2683', '2684', '2685', '2686', '2687', '2688', '2689', '2690', '2691', '2692', '2693', '2694', '2695', '2696', '2697', '2698', '2699', '2700', '2701', '2702', '2703', '2704', '2705', '2706', '2707', '2708', '2709', '2710', '2711', '2712', '2713', '2714', '2715', '2716', '2717', '2718', '2719', '2720', '2721', '2722', '2723', '2724', '2725', '2726', '2727', '2728', '2729', '2730', '2731', '2732', '2733', '2734', '2735', '2736', '2737', '2738', '2739', '2740', '2741', '2742', '2743', '2744', '2745', '2746', '2747', '2748', '2749', '2750', '2751', '2752', '2753', '2754', '2755', '2756', '2757', '2758', '2759', '2760', '2761', '2762', '2763', '2764', '2765', '2766', '2767', '2768', '2769', '2770', '2771', '2772', '2773', '2774', '2775', '2776', '2777', '2778', '2779', '2780', '2781', '2782', '2783', '2784', '2785', '2786', '2787', '2788', '2789', '2790', '2791', '2792', '2793', '2794', '2795', '2796', '2797', '2798', '2799', '2800', '2801', '2802', '2803', '2804', '2805', '2806', '2807', '2808', '2809', '2810', '2811', '2812', '2813', '2814', '2815', '2816', '2817', '2818', '2819', '2820', '2821', '2822', '2823', '2824', '2825', '2826', '2827', '2828', '2829', '2830', '2831', '2832', '2833', '2834', '2835', '2836', '2837', '2838', '2839', '2840', '2841', '2842', '2843', '2844', '2845', '2846', '2847', '2848', '2849', '2850', '2851', '2852', '2853', '2854', '2855', '2856', '2857', '2858', '2859', '2860', '2861', '2862', '2863', '2864', '2865', '2866', '2867', '2868', '2869', '2870', '2871', '2872', '2873', '2874', '2875', '2876', '2877', '2878', '2879', '2880', '2881', '2882', '2883', '2884', '2885', '2886', '2887', '2888', '2889', '2890', '2891', '2892', '2893', '2894', '2895', '2896', '2897', '2898', '2899', '2900', '2901', '2902', '2903', '2904', '2905', '2906', '2907', '2908', '2909', '2910', '2911', '3756', '3757', '3758', '3759', '3760', '3761', '3762', '3763', '3764', '3779', '3780', '3781', '3782', '3783', '3784', '3785', '3788', '3789', '3790', '3791', '3792', '3793', '3794', '3802', '3803', '3804', '3812', '3813', '3814', '3815', '3820', '3821', '3822', '3829', '3830', '3831', '3832', '3835', '3836', '3837', '3838', '3845', '3846', '3847', '3848', '3849', '3851', '3853', '3854', '3862', '3863', '3864', '3871', '3872', '3873', '3891', '3892', '3894', '3895', '3902', '3903', '3904', '3907', '3908', '3909', '3910', '3911', '3912', '3913', '3914', '3915', '3916', '3917', '3918', '3919', '3920', '3921', '3922', '3923', '3924', '3925', '3926', '3927', '3928', '3929', '3930', '3931', '3932', '3933', '3934', '3935', '3936', '3937', '3938', '3939', '3940', '3941', '3942', '3943', '3944', '3945', '3946', '3947', '3948', '3954', '3955', '3958', '3959', '3960', '3961', '3962', '3965', '3966', '3967', '3968', '3969', '3970', '3971', '3972', '3973', '3974', '3975', '3976', '3977', '3978', '3979', '3980', '3981', '3982', '3983', '3984', '3985', '3986', '3987', '3988', '3989', '3990', '3991', '3992', '3993', '3994', '3995', '3996', '3997', '3998', '3999', '4000', '4001', '4002', '4003', '4004', '4005', '4006', '4007', '4008', '4009', '4010', '4011', '4012', '4013', '4014', '4015', '4016', '4017', '4018', '4019', '4020', '4021', '4022', '4023', '4024', '4025', '4026', '4027', '4028', '4029', '4030', '4031', '4032', '4033', '4034', '4035', '4036', '4037', '4038', '4039', '4040', '4041', '4042', '4043', '4044', '4045', '4046', '4047', '4048', '4049', '4050', '4051', '4052', '4053', '4054', '4055', '4056', '4057', '4058', '4059', '4060', '4061', '4062', '4063', '4064', '4065', '4066', '4067', '4068', '4069', '4070', '4071', '4072', '4073', '4074', '4075', '4076', '4077', '4078', '4079', '4080', '4081', '4082', '4083', '4084', '4085', '4086', '4087', '4088', '4089', '4090', '4091', '4092', '4093', '4094', '4095', '4096', '4097', '4098', '4099', '4100', '4101', '4102', '4103', '4104', '4105', '4106', '4107', '4108', '4109', '4110', '4111', '4112', '4113', '4114', '4115', '4116', '4117', '4118', '4119', '4120', '4121', '4122', '4123', '4124', '4125', '4126', '4127', '4128', '4129', '4130', '4131', '4132', '4133', '4134', '4135', '4136', '4137', '4138', '4139', '4140', '4141', '4142', '4143', '4144', '4145', '4146', '4147', '4148', '4149', '4150', '4151', '4152', '4153', '4154', '4155', '4156', '4157', '4158', '4159', '4160', '4161', '4162', '4163', '4164', '4165', '4166', '4167', '4168', '4169', '4170', '4171', '4172', '4173', '4174', '4175', '4176', '4177', '4178', '4179', '4180', '4181', '4182', '4183', '4184', '4185', '4186', '4187', '4188', '4189', '4190', '4191', '4192', '4193', '4194', '4195', '4196', '4197', '4198', '4199', '4200', '4201', '4202', '4203', '4204', '4205', '4206', '4207', '4208', '4209', '4210', '4211', '4212', '4213', '4214', '4215', '4216', '4217', '4218', '4219', '4220', '4221', '4222', '4223', '4224', '4225', '4226', '4227', '4228', '4229', '4230', '4231', '4232', '4233', '4234', '4235', '4236', '4237', '4238', '4239', '4240', '4241', '4242', '4243', '4244', '4245', '4246', '4247', '4248', '4249', '4250', '4251', '4252', '4253', '4254', '4255', '4256', '4257', '4258', '4259', '4260', '4261', '4262', '4263', '4264', '4265', '4266', '4267', '4268', '4269', '4270', '4271', '4272', '4273', '4274', '4275', '4276', '4277', '4278', '4279', '4280', '4281', '4282', '4283', '4284', '4285', '4286', '4287', '4288', '4289', '4290', '4291', '4292', '4293', '4294', '4295', '4296', '4297', '4298', '4299', '4300', '4301', '4302', '4303', '4304', '4305', '4306', '4307', '4308', '4309', '4310', '4311', '4312', '4313', '4314', '4315', '4316', '4317', '4318', '4319', '4320', '4321', '4322', '4323', '4324', '4325', '4326', '4327', '4328', '4329', '4330', '4331', '4332', '4333', '4334', '4335', '4336', '4337', '4338', '4339', '4340', '4341', '4342', '4343', '4344', '4345', '4346', '4347', '4348', '4349', '4350', '4351', '4352', '4353', '4354', '4355', '4356', '4357', '4358', '4359', '4360', '4361', '4362', '4363', '4364', '4365', '4366', '4367', '4368', '4369', '4370', '4371', '4372', '4373', '4374', '4375', '4376', '4377', '4378', '4379', '4380', '4381', '4382', '4383', '4384', '4385', '4386', '4387', '4388', '4389', '4390', '4391', '4392', '4393', '4394', '4395', '4396', '4397', '4398', '4399', '4400', '4401', '4402', '4403', '4404', '4405', '4406', '4407', '4408', '4409', '4410', '4411', '4412', '4413', '4414', '4415', '4416', '4417', '4418', '4419', '4420', '4421', '4422', '4423', '4424', '4425', '4426', '4427', '4428', '4429', '4430', '4431', '4432', '4433', '4434', '4435', '4436', '4437', '4438', '4439', '4440', '4441', '4442', '4443', '4444', '4445', '4446', '4447', '4448', '4449', '4450', '4451', '4452', '4453', '4454', '4455', '4456', '4457', '4458', '4459', '4460', '4461', '4462', '4463', '4464', '4465', '4466', '4467', '4468', '4469', '4470', '4471', '4472', '4473', '4474', '4475', '4476', '4477', '4478', '4479', '4480', '4481', '4482', '4483', '4484', '4485', '4486', '4487', '4488', '4489', '4490', '4491', '4492', '4493', '4494', '4495', '4496', '4497', '4498', '4499', '4500', '4501', '4502', '4503', '4504', '4505', '4506', '4507', '4508', '4509', '4510', '4511', '4512', '4513', '4514', '4515', '4516', '4517', '4518', '4519', '4520', '4521', '4606', '4607', '4608', '4609', '4610', '4611', '4612', '4613', '4614', '4615', '4616', '4617', '4618', '4619', '4620', '4621', '4622', '4623', '4624', '4625', '4626', '4627', '4628', '4629', '4630', '4631', '4632', '4633', '4634', '4635', '4636', '4637', '4638', '4639', '4640', '4641', '4642', '4643', '4644', '4645', '4646', '4647', '4648', '4649', '4650', '4651', '4652', '4653', '4654', '4655', '4656', '4657', '4658', '4659', '4660', '4661', '4662', '4663', '4664', '4665', '4666', '4667', '4668', '4669', '4670', '4671', '4672', '4673', '4674', '4675', '4676', '4677', '4678', '4679', '4680', '4681', '4682', '4683', '4684', '4685', '4686', '4687', '4688', '4689', '4690', '4691', '4692', '4693', '4694', '4695', '4696', '4697', '4698', '4699', '4700', '4701', '4702', '4703', '4704', '4705', '5034', '5035', '5036', '5037', '5038', '5039', '5040', '5041', '5042', '5043', '5044', '5045', '5046', '5047', '5048', '5049', '5050', '5051', '5052', '5053', '5054', '5055', '5056', '5057', '5058', '5059', '5060', '5061', '5062', '5063', '5064', '5065', '5066', '5067', '5068', '5069', '5070', '5071', '5072', '5073', '5074', '5075', '5076', '5077', '5078', '5079', '5080', '5081', '5082', '5083', '5084', '5085', '5086', '5087', '5088', '5089', '5090', '5091', '5092', '5093', '5094', '5095', '5096', '5097', '5098', '5099', '5100', '5101', '5102', '5103', '5104', '5105', '5106', '5107', '5108', '5109', '5110', '5111', '5112', '5113', '5114', '5115', '5116', '5117', '5118', '5119', '5120', '5121', '5122', '5123', '5124', '5125', '5126', '5127', '5128', '5129', '5130', '5131', '5132', '5133', '5134', '5135', '5136', '5137', '5138', '5139', '5140', '5141', '5142', '5143', '5144', '5145', '5146', '5147', '5148', '5149', '5150', '5151', '5152', '5153', '5154', '5155', '5156', '5157', '5158', '5159', '5160', '5161', '5310', '5311', '5312', '5313', '5314', '5315', '5316', '5317', '5318', '5319', '5320', '5321', '5322', '5323', '5324', '5325', '5326', '5327', '5328', '5329', '5330', '5331', '5332', '5333', '5334', '5335', '5336', '5337', '5338', '5339', '5340', '5341', '5342', '5343', '5344', '5345', '5346', '5347', '5348', '5349', '5350', '5351', '5352', '5353', '5354', '5355', '5356', '5357', '5358', '5359', '5360', '5361', '5362', '5363', '5364', '5365', '5366', '5367', '5368', '5369', '5370', '5371', '5372', '5373', '5374', '5375', '5376', '5377', '5378', '5379', '5380', '5381', '5382', '5383', '5384', '5385', '5386', '5387', '5388', '5389', '5390', '5391', '5392', '5393', '5394', '5395', '5396', '5397', '5398', '5399', '5400', '5401', '5402', '5403', '5404', '5405', '5406', '5407', '5408', '5409', '5410', '5411', '5412', '5413', '5414', '5415', '5416', '5417', '5418', '5419', '5420', '5421', '5422', '5423', '5424', '5425', '5426', '5427', '5428', '5429', '5430', '5431', '5432', '5433', '5434', '5435', '5436', '5437', '5438', '5439', '5440', '5441', '5442', '5443', '5444', '5445', '5446', '5447', '5448', '5449', '5450', '5451', '5452', '5453', '5454', '5455', '5456', '5457', '5458', '5459', '5460', '5461', '5462', '5463', '5464', '5465', '5466', '5467', '5468', '5469', '5470', '5471', '5472', '5473', '5474', '5475', '5476', '5477', '5478', '5479', '5480', '5481', '5482', '5483', '5484', '5485', '5486', '5487', '5488', '5489', '5490', '5491', '5492', '5493', '5494', '5495', '5496', '5497', '5498', '5499', '5500', '5501', '5502', '5503', '5504', '5505', '5506', '5507', '5508', '5509', '5510', '5511', '5512', '5513', '5514', '5515', '5516', '5517', '5518', '5519', '5520', '5521', '5522', '5523', '5524', '5525', '5526', '5527', '5528', '5529', '5530', '5531', '5532', '5533', '5534', '5535', '5536', '5537', '5538', '5539', '5540', '5541', '5542', '5543', '5544', '5545', '5546', '5547', '5548', '5549', '5550', '5551', '5552', '5553', '5554', '5555', '5556', '5557', '5558', '5559', '5560', '5561', '5562', '5563', '5564', '5565', '5566', '5567', '130', '145', '1068', '1069', '1098', '1100', '1125', '1132', '1159', '1171', '1172', '1175', '1231', '1235', '1238', '1239', '1245', '1246', '2304', '2305', '2306', '2307', '2308', '2309', '2310', '2311', '2312', '2313', '2314', '2315', '3786', '3787', '3816', '3818', '3843', '3850', '3877', '3889', '3890', '3893', '3949', '3953', '3956', '3957', '3963', '3964', '5022', '5023', '5024', '5025', '5026', '5027', '5028', '5029', '5030', '5031', '5032', '5033', '66', '146', '1047', '1048', '1049', '1052', '1055', '1056', '1057', '1059', '1091', '1092', '1101', '1105', '1106', '1110', '1115', '1126', '1158', '1161', '1170', '1178', '1179', '1232', '1233', '1234', '3765', '3766', '3767', '3770', '3773', '3774', '3775', '3777', '3809', '3810', '3819', '3823', '3824', '3828', '3833', '3844', '3876', '3879', '3888', '3896', '3897', '3950', '3951', '3952', '65', '150', '1050', '1051', '1053', '1054', '1058', '1060', '1080', '1081', '1083', '1090', '1093', '1107', '1108', '1109', '1116', '1156', '1160', '1168', '1169', '1180', '3768', '3769', '3771', '3772', '3776', '3778', '3798', '3799', '3801', '3808', '3811', '3825', '3826', '3827', '3834', '3874', '3878', '3886', '3887', '3898', '1163', '3881', '1162', '3880', '1164', '1165', '1167', '1182', '3882', '3883', '3885', '3900']\n\ndef getVtx( bodyGeo, vtxIndex ):\n    vtxList = []\n    count = 0\n    for i in vtxIndex:\n        vtxList.append( '{}.vtx[{}]'.format(bodyGeo, vtxIndex[count]) )\n        count += 1\n    return vtxList\n    \ndef getBboxCenter( bbox ):    \n    xmid = (bbox[0]+bbox[3])/2\n    ymid = (bbox[1]+bbox[4])/2\n    zmid = (bbox[2]+bbox[5])/2\n    bboxCenter = (xmid, ymid, zmid)\n    return bboxCenter\n\ndef getBboxScaleDiff ( bboxA, bboxB ):\n    sxDiff = (bboxA[3]-bboxA[0])/(bboxB[3]-bboxB[0])\n    syDiff = (bboxA[4]-bboxA[1])/(bboxB[4]-bboxB[1])\n    szDiff = (bboxA[5]-bboxA[2])/(bboxB[5]-bboxB[2])\n    scaleDiff = [sxDiff, syDiff, szDiff]\n    return scaleDiff\n\ndef floodVtxWeights( vtx, invertSel = False, value = 0, smooth = 0 ):\n    if len(vtx) == 0:\n        return\n    cmds.select( cl=True )     \n    cmds.select(vtx)\n    if invertSel:\n        geo = vtx[0].split('.')[0]\n        cmds.select( '{}.vtx[*]'.format(geo), tgl=True )\n        \n    paintBlspCtx = cmds.artAttrSkinPaintCtx()\n    cmds.setToolTo( paintBlspCtx )    \n    if smooth == 0:\n        cmds.artAttrSkinPaintCtx( paintBlspCtx, edit=True, val = value )\n        cmds.artAttrSkinPaintCtx( paintBlspCtx, edit=True, sao='absolute' )        \n        cmds.artAttrSkinPaintCtx( paintBlspCtx, edit=True, clr = True )\n    else:\n        cmds.artAttrSkinPaintCtx( paintBlspCtx, edit=True, sao='smooth' )\n        for t in range(0,smooth):\n            cmds.artAttrSkinPaintCtx( paintBlspCtx, edit=True, clr = True )\n    cmds.select( cl=True )         \n'''\ndef mouthbagMatch( smooth = 5 ):\n    orgCtx = cmds.currentCtx()\n    # get bodyShell and sharedBody\n    sel = cmds.ls( sl=True )\n    if len(sel) == 0:\n        if cmds.objExists('BodyShell_sbdv'):\n            bodyShell = 'BodyShell_sbdv'\n        else:\n            return\n    else:\n        bodyShell = sel[0]\n        \n    if cmds.objExists('SharedHuman_sbdv'):\n        sharedBody = 'SharedHuman_sbdv' \n    else:\n        print (\"Warning: cannot find sharedHuman_sbdv.\")\n        return\n\n    # get the scale/translation difference based on the mouthbag and the teeth bounding box\n    mouthbagVtx = getVtx( sharedBody, mouthbagVtxIndex )\n    mouthbagBbox = cmds.exactWorldBoundingBox( mouthbagVtx )\n    mouthbagCenter = getBboxCenter( mouthbagBbox )\n    teethBbox = cmds.exactWorldBoundingBox( 'Mouth' )\n    cmds.xform( 'Mouth', cp=True)\n    scaleDiff = getBboxScaleDiff ( teethBbox, mouthbagBbox )\n    scaleOut = [1.05, 1.07, 1.22] # default value to scale out the mouthbag a little bit in order to cover the teeth\n\n    # copy and transform sharedBody for blsp\n    sharedBodyCopy = cmds.duplicate( sharedBody, n = 'sharedBodyCopy' )[0]\n    cmds.xform( sharedBodyCopy, ws=True, piv = mouthbagCenter )\n    cmds.matchTransform( sharedBodyCopy, 'Mouth', pos=True )\n    cmds.xform( sharedBodyCopy, scale = scaleDiff, r=True )\n    cmds.xform( sharedBodyCopy, scale = scaleOut, r=True )\n    cmds.makeIdentity( sharedBodyCopy, a=True )\n\n    # create blendShape, flood and smooth weights\n    blspMouthbag = cmds.blendShape( sharedBodyCopy, bodyShell, n = 'mouthbagMatch_blsp' )[0]\n    bodyShellMouthbagVtx = getVtx( bodyShell, mouthbagVtxIndex )\n    floodVtxWeights( bodyShellMouthbagVtx, invertSel = True, value = 0 )\n    floodVtxWeights( bodyShellMouthbagVtx, invertSel = True, smooth = smooth )\n    #cmds.setAttr( '{}.{}'.format(blspMouthbag, sharedBodyCopy), 1 )\n    #cmds.delete( bodyShell, ch=True )\n    cmds.delete( sharedBodyCopy )\n    cmds.setToolTo( orgCtx )\n'''\ndef safe_blendshape(driver=None, driven=None, pts=None):\n    orgCtx = cmds.currentCtx()\n\n    # create blendShape, flood and smooth weights\n    blspMouthbag = cmds.blendShape( driver, driven, n = 'match_blsp' )[0]\n    vtx = getVtx( driven, pts )\n    floodVtxWeights( vtx, invertSel = True, value = 0 )\n    #floodVtxWeights( vtx, invertSel = True, smooth = 5 )\n    #cmds.setAttr( '{}.{}'.format(blspMouthbag, driver), 1 )\n    #cmds.delete( driven, ch=True )\n    cmds.setToolTo( orgCtx )\n\n\n#def safe_blendshape_head(driver=None, driven=None):\n#    safe_blendshape(driver=driver, driven=driven, pts=HEAD_NECK_VTX)\n\n\ndef safe_blendshape_body(driver=None, driven=None):\n    safe_blendshape(driver=driver, driven=driven, pts=BODY_VTX)\n\nsel = cmds.ls(sl=True)\ndriver=sel[0]\ndriven=sel[1]\nsafe_blendshape_body( driver=driver, driven=driven)\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "\"\"\"\n    This script is for quickly blendshape the shared humanBo..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "BodyBlend" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "\"\"\"\n    This script is for quickly blendshape the shared humanBody mouythbag \n    to the character model, based on character's teeth position and scale.\n\n\"\"\"\n\nimport maya.cmds as cmds\n\n# list of vtx indexes of the mouthbag\nBODY_VTX = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '108', '131', '134', '135', '136', '139', '140', '141', '142', '144', '147', '148', '149', '152', '153', '154', '156', '157', '158', '159', '1038', '1039', '1040', '1041', '1042', '1043', '1044', '1045', '1046', '1061', '1062', '1063', '1064', '1065', '1066', '1067', '1070', '1071', '1072', '1073', '1074', '1075', '1076', '1084', '1085', '1086', '1094', '1095', '1096', '1097', '1102', '1103', '1104', '1111', '1112', '1113', '1114', '1117', '1118', '1119', '1120', '1127', '1128', '1129', '1130', '1131', '1133', '1135', '1136', '1144', '1145', '1146', '1153', '1154', '1155', '1173', '1174', '1176', '1177', '1184', '1185', '1186', '1189', '1190', '1191', '1192', '1193', '1194', '1195', '1196', '1197', '1198', '1199', '1200', '1201', '1202', '1203', '1204', '1205', '1206', '1207', '1208', '1209', '1210', '1211', '1212', '1213', '1214', '1215', '1216', '1217', '1218', '1219', '1220', '1221', '1222', '1223', '1224', '1225', '1226', '1227', '1228', '1229', '1230', '1236', '1237', '1240', '1241', '1242', '1243', '1244', '1247', '1248', '1249', '1250', '1251', '1252', '1253', '1254', '1255', '1256', '1257', '1258', '1259', '1260', '1261', '1262', '1263', '1264', '1265', '1266', '1267', '1268', '1269', '1270', '1271', '1272', '1273', '1274', '1275', '1276', '1277', '1278', '1279', '1280', '1281', '1282', '1283', '1284', '1285', '1286', '1287', '1288', '1289', '1290', '1291', '1292', '1293', '1294', '1295', '1296', '1297', '1298', '1299', '1300', '1301', '1302', '1303', '1304', '1305', '1306', '1307', '1308', '1309', '1310', '1311', '1312', '1313', '1314', '1315', '1316', '1317', '1318', '1319', '1320', '1321', '1322', '1323', '1324', '1325', '1326', '1327', '1328', '1329', '1330', '1331', '1332', '1333', '1334', '1335', '1336', '1337', '1338', '1339', '1340', '1341', '1342', '1343', '1344', '1345', '1346', '1347', '1348', '1349', '1350', '1351', '1352', '1353', '1354', '1355', '1356', '1357', '1358', '1359', '1360', '1361', '1362', '1363', '1364', '1365', '1366', '1367', '1368', '1369', '1370', '1371', '1372', '1373', '1374', '1375', '1376', '1377', '1378', '1379', '1380', '1381', '1382', '1383', '1384', '1385', '1386', '1387', '1388', '1389', '1390', '1391', '1392', '1393', '1394', '1395', '1396', '1397', '1398', '1399', '1400', '1401', '1402', '1403', '1404', '1405', '1406', '1407', '1408', '1409', '1410', '1411', '1412', '1413', '1414', '1415', '1416', '1417', '1418', '1419', '1420', '1421', '1422', '1423', '1424', '1425', '1426', '1427', '1428', '1429', '1430', '1431', '1432', '1433', '1434', '1435', '1436', '1437', '1438', '1439', '1440', '1441', '1442', '1443', '1444', '1445', '1446', '1447', '1448', '1449', '1450', '1451', '1452', '1453', '1454', '1455', '1456', '1457', '1458', '1459', '1460', '1461', '1462', '1463', '1464', '1465', '1466', '1467', '1468', '1469', '1470', '1471', '1472', '1473', '1474', '1475', '1476', '1477', '1478', '1479', '1480', '1481', '1482', '1483', '1484', '1485', '1486', '1487', '1488', '1489', '1490', '1491', '1492', '1493', '1494', '1495', '1496', '1497', '1498', '1499', '1500', '1501', '1502', '1503', '1504', '1505', '1506', '1507', '1508', '1509', '1510', '1511', '1512', '1513', '1514', '1515', '1516', '1517', '1518', '1519', '1520', '1521', '1522', '1523', '1524', '1525', '1526', '1527', '1528', '1529', '1530', '1531', '1532', '1533', '1534', '1535', '1536', '1537', '1538', '1539', '1540', '1541', '1542', '1543', '1544', '1545', '1546', '1547', '1548', '1549', '1550', '1551', '1552', '1553', '1554', '1555', '1556', '1557', '1558', '1559', '1560', '1561', '1562', '1563', '1564', '1565', '1566', '1567', '1568', '1569', '1570', '1571', '1572', '1573', '1574', '1575', '1576', '1577', '1578', '1579', '1580', '1581', '1582', '1583', '1584', '1585', '1586', '1587', '1588', '1589', '1590', '1591', '1592', '1593', '1594', '1595', '1596', '1597', '1598', '1599', '1600', '1601', '1602', '1603', '1604', '1605', '1606', '1607', '1608', '1609', '1610', '1611', '1612', '1613', '1614', '1615', '1616', '1617', '1618', '1619', '1620', '1621', '1622', '1623', '1624', '1625', '1626', '1627', '1628', '1629', '1630', '1631', '1632', '1633', '1634', '1635', '1636', '1637', '1638', '1639', '1640', '1641', '1642', '1643', '1644', '1645', '1646', '1647', '1648', '1649', '1650', '1651', '1652', '1653', '1654', '1655', '1656', '1657', '1658', '1659', '1660', '1661', '1662', '1663', '1664', '1665', '1666', '1667', '1668', '1669', '1670', '1671', '1672', '1673', '1674', '1675', '1676', '1677', '1678', '1679', '1680', '1681', '1682', '1683', '1684', '1685', '1686', '1687', '1688', '1689', '1690', '1691', '1692', '1693', '1694', '1695', '1696', '1697', '1698', '1699', '1700', '1701', '1702', '1703', '1704', '1705', '1706', '1707', '1708', '1709', '1710', '1711', '1712', '1713', '1714', '1715', '1716', '1717', '1718', '1719', '1720', '1721', '1722', '1723', '1724', '1725', '1726', '1727', '1728', '1729', '1730', '1731', '1732', '1733', '1734', '1735', '1736', '1737', '1738', '1739', '1740', '1741', '1742', '1743', '1744', '1745', '1746', '1747', '1748', '1749', '1750', '1751', '1752', '1753', '1754', '1755', '1756', '1757', '1758', '1759', '1760', '1761', '1762', '1763', '1764', '1765', '1766', '1767', '1768', '1769', '1770', '1771', '1772', '1773', '1774', '1775', '1776', '1777', '1778', '1779', '1780', '1781', '1782', '1783', '1784', '1785', '1786', '1787', '1788', '1789', '1790', '1791', '1792', '1793', '1794', '1795', '1796', '1797', '1798', '1799', '1800', '1801', '1802', '1803', '1888', '1889', '1890', '1891', '1892', '1893', '1894', '1895', '1896', '1897', '1898', '1899', '1900', '1901', '1902', '1903', '1904', '1905', '1906', '1907', '1908', '1909', '1910', '1911', '1912', '1913', '1914', '1915', '1916', '1917', '1918', '1919', '1920', '1921', '1922', '1923', '1924', '1925', '1926', '1927', '1928', '1929', '1930', '1931', '1932', '1933', '1934', '1935', '1936', '1937', '1938', '1939', '1940', '1941', '1942', '1943', '1944', '1945', '1946', '1947', '1948', '1949', '1950', '1951', '1952', '1953', '1954', '1955', '1956', '1957', '1958', '1959', '1960', '1961', '1962', '1963', '1964', '1965', '1966', '1967', '1968', '1969', '1970', '1971', '1972', '1973', '1974', '1975', '1976', '1977', '1978', '1979', '1980', '1981', '1982', '1983', '1984', '1985', '1986', '1987', '2316', '2317', '2318', '2319', '2320', '2321', '2322', '2323', '2324', '2325', '2326', '2327', '2328', '2329', '2330', '2331', '2332', '2333', '2334', '2335', '2336', '2337', '2338', '2339', '2340', '2341', '2342', '2343', '2344', '2345', '2346', '2347', '2348', '2349', '2350', '2351', '2352', '2353', '2354', '2355', '2356', '2357', '2358', '2359', '2360', '2361', '2362', '2363', '2364', '2365', '2366', '2367', '2368', '2369', '2370', '2371', '2372', '2373', '2374', '2375', '2376', '2377', '2378', '2379', '2380', '2381', '2382', '2383', '2384', '2385', '2386', '2387', '2388', '2389', '2390', '2391', '2392', '2393', '2394', '2395', '2396', '2397', '2398', '2399', '2400', '2401', '2402', '2403', '2404', '2405', '2406', '2407', '2408', '2409', '2410', '2411', '2412', '2413', '2414', '2415', '2416', '2417', '2418', '2419', '2420', '2421', '2422', '2423', '2424', '2425', '2426', '2427', '2428', '2429', '2430', '2431', '2432', '2433', '2434', '2435', '2436', '2437', '2438', '2439', '2440', '2441', '2442', '2443', '2594', '2595', '2596', '2597', '2598', '2599', '2600', '2601', '2602', '2603', '2604', '2605', '2606', '2607', '2608', '2609', '2610', '2611', '2612', '2613', '2614', '2615', '2616', '2617', '2618', '2619', '2620', '2621', '2622', '2623', '2624', '2625', '2626', '2627', '2628', '2629', '2630', '2631', '2632', '2633', '2634', '2635', '2636', '2637', '2638', '2639', '2640', '2641', '2642', '2643', '2644', '2645', '2646', '2647', '2648', '2649', '2650', '2651', '2652', '2653', '2654', '2655', '2656', '2657', '2658', '2659', '2660', '2661', '2662', '2663', '2664', '2665', '2666', '2667', '2668', '2669', '2670', '2671', '2672', '2673', '2674', '2675', '2676', '2677', '2678', '2679', '2680', '2681', '2682', '2683', '2684', '2685', '2686', '2687', '2688', '2689', '2690', '2691', '2692', '2693', '2694', '2695', '2696', '2697', '2698', '2699', '2700', '2701', '2702', '2703', '2704', '2705', '2706', '2707', '2708', '2709', '2710', '2711', '2712', '2713', '2714', '2715', '2716', '2717', '2718', '2719', '2720', '2721', '2722', '2723', '2724', '2725', '2726', '2727', '2728', '2729', '2730', '2731', '2732', '2733', '2734', '2735', '2736', '2737', '2738', '2739', '2740', '2741', '2742', '2743', '2744', '2745', '2746', '2747', '2748', '2749', '2750', '2751', '2752', '2753', '2754', '2755', '2756', '2757', '2758', '2759', '2760', '2761', '2762', '2763', '2764', '2765', '2766', '2767', '2768', '2769', '2770', '2771', '2772', '2773', '2774', '2775', '2776', '2777', '2778', '2779', '2780', '2781', '2782', '2783', '2784', '2785', '2786', '2787', '2788', '2789', '2790', '2791', '2792', '2793', '2794', '2795', '2796', '2797', '2798', '2799', '2800', '2801', '2802', '2803', '2804', '2805', '2806', '2807', '2808', '2809', '2810', '2811', '2812', '2813', '2814', '2815', '2816', '2817', '2818', '2819', '2820', '2821', '2822', '2823', '2824', '2825', '2826', '2827', '2828', '2829', '2830', '2831', '2832', '2833', '2834', '2835', '2836', '2837', '2838', '2839', '2840', '2841', '2842', '2843', '2844', '2845', '2846', '2847', '2848', '2849', '2850', '2851', '2852', '2853', '2854', '2855', '2856', '2857', '2858', '2859', '2860', '2861', '2862', '2863', '2864', '2865', '2866', '2867', '2868', '2869', '2870', '2871', '2872', '2873', '2874', '2875', '2876', '2877', '2878', '2879', '2880', '2881', '2882', '2883', '2884', '2885', '2886', '2887', '2888', '2889', '2890', '2891', '2892', '2893', '2894', '2895', '2896', '2897', '2898', '2899', '2900', '2901', '2902', '2903', '2904', '2905', '2906', '2907', '2908', '2909', '2910', '2911', '3756', '3757', '3758', '3759', '3760', '3761', '3762', '3763', '3764', '3779', '3780', '3781', '3782', '3783', '3784', '3785', '3788', '3789', '3790', '3791', '3792', '3793', '3794', '3802', '3803', '3804', '3812', '3813', '3814', '3815', '3820', '3821', '3822', '3829', '3830', '3831', '3832', '3835', '3836', '3837', '3838', '3845', '3846', '3847', '3848', '3849', '3851', '3853', '3854', '3862', '3863', '3864', '3871', '3872', '3873', '3891', '3892', '3894', '3895', '3902', '3903', '3904', '3907', '3908', '3909', '3910', '3911', '3912', '3913', '3914', '3915', '3916', '3917', '3918', '3919', '3920', '3921', '3922', '3923', '3924', '3925', '3926', '3927', '3928', '3929', '3930', '3931', '3932', '3933', '3934', '3935', '3936', '3937', '3938', '3939', '3940', '3941', '3942', '3943', '3944', '3945', '3946', '3947', '3948', '3954', '3955', '3958', '3959', '3960', '3961', '3962', '3965', '3966', '3967', '3968', '3969', '3970', '3971', '3972', '3973', '3974', '3975', '3976', '3977', '3978', '3979', '3980', '3981', '3982', '3983', '3984', '3985', '3986', '3987', '3988', '3989', '3990', '3991', '3992', '3993', '3994', '3995', '3996', '3997', '3998', '3999', '4000', '4001', '4002', '4003', '4004', '4005', '4006', '4007', '4008', '4009', '4010', '4011', '4012', '4013', '4014', '4015', '4016', '4017', '4018', '4019', '4020', '4021', '4022', '4023', '4024', '4025', '4026', '4027', '4028', '4029', '4030', '4031', '4032', '4033', '4034', '4035', '4036', '4037', '4038', '4039', '4040', '4041', '4042', '4043', '4044', '4045', '4046', '4047', '4048', '4049', '4050', '4051', '4052', '4053', '4054', '4055', '4056', '4057', '4058', '4059', '4060', '4061', '4062', '4063', '4064', '4065', '4066', '4067', '4068', '4069', '4070', '4071', '4072', '4073', '4074', '4075', '4076', '4077', '4078', '4079', '4080', '4081', '4082', '4083', '4084', '4085', '4086', '4087', '4088', '4089', '4090', '4091', '4092', '4093', '4094', '4095', '4096', '4097', '4098', '4099', '4100', '4101', '4102', '4103', '4104', '4105', '4106', '4107', '4108', '4109', '4110', '4111', '4112', '4113', '4114', '4115', '4116', '4117', '4118', '4119', '4120', '4121', '4122', '4123', '4124', '4125', '4126', '4127', '4128', '4129', '4130', '4131', '4132', '4133', '4134', '4135', '4136', '4137', '4138', '4139', '4140', '4141', '4142', '4143', '4144', '4145', '4146', '4147', '4148', '4149', '4150', '4151', '4152', '4153', '4154', '4155', '4156', '4157', '4158', '4159', '4160', '4161', '4162', '4163', '4164', '4165', '4166', '4167', '4168', '4169', '4170', '4171', '4172', '4173', '4174', '4175', '4176', '4177', '4178', '4179', '4180', '4181', '4182', '4183', '4184', '4185', '4186', '4187', '4188', '4189', '4190', '4191', '4192', '4193', '4194', '4195', '4196', '4197', '4198', '4199', '4200', '4201', '4202', '4203', '4204', '4205', '4206', '4207', '4208', '4209', '4210', '4211', '4212', '4213', '4214', '4215', '4216', '4217', '4218', '4219', '4220', '4221', '4222', '4223', '4224', '4225', '4226', '4227', '4228', '4229', '4230', '4231', '4232', '4233', '4234', '4235', '4236', '4237', '4238', '4239', '4240', '4241', '4242', '4243', '4244', '4245', '4246', '4247', '4248', '4249', '4250', '4251', '4252', '4253', '4254', '4255', '4256', '4257', '4258', '4259', '4260', '4261', '4262', '4263', '4264', '4265', '4266', '4267', '4268', '4269', '4270', '4271', '4272', '4273', '4274', '4275', '4276', '4277', '4278', '4279', '4280', '4281', '4282', '4283', '4284', '4285', '4286', '4287', '4288', '4289', '4290', '4291', '4292', '4293', '4294', '4295', '4296', '4297', '4298', '4299', '4300', '4301', '4302', '4303', '4304', '4305', '4306', '4307', '4308', '4309', '4310', '4311', '4312', '4313', '4314', '4315', '4316', '4317', '4318', '4319', '4320', '4321', '4322', '4323', '4324', '4325', '4326', '4327', '4328', '4329', '4330', '4331', '4332', '4333', '4334', '4335', '4336', '4337', '4338', '4339', '4340', '4341', '4342', '4343', '4344', '4345', '4346', '4347', '4348', '4349', '4350', '4351', '4352', '4353', '4354', '4355', '4356', '4357', '4358', '4359', '4360', '4361', '4362', '4363', '4364', '4365', '4366', '4367', '4368', '4369', '4370', '4371', '4372', '4373', '4374', '4375', '4376', '4377', '4378', '4379', '4380', '4381', '4382', '4383', '4384', '4385', '4386', '4387', '4388', '4389', '4390', '4391', '4392', '4393', '4394', '4395', '4396', '4397', '4398', '4399', '4400', '4401', '4402', '4403', '4404', '4405', '4406', '4407', '4408', '4409', '4410', '4411', '4412', '4413', '4414', '4415', '4416', '4417', '4418', '4419', '4420', '4421', '4422', '4423', '4424', '4425', '4426', '4427', '4428', '4429', '4430', '4431', '4432', '4433', '4434', '4435', '4436', '4437', '4438', '4439', '4440', '4441', '4442', '4443', '4444', '4445', '4446', '4447', '4448', '4449', '4450', '4451', '4452', '4453', '4454', '4455', '4456', '4457', '4458', '4459', '4460', '4461', '4462', '4463', '4464', '4465', '4466', '4467', '4468', '4469', '4470', '4471', '4472', '4473', '4474', '4475', '4476', '4477', '4478', '4479', '4480', '4481', '4482', '4483', '4484', '4485', '4486', '4487', '4488', '4489', '4490', '4491', '4492', '4493', '4494', '4495', '4496', '4497', '4498', '4499', '4500', '4501', '4502', '4503', '4504', '4505', '4506', '4507', '4508', '4509', '4510', '4511', '4512', '4513', '4514', '4515', '4516', '4517', '4518', '4519', '4520', '4521', '4606', '4607', '4608', '4609', '4610', '4611', '4612', '4613', '4614', '4615', '4616', '4617', '4618', '4619', '4620', '4621', '4622', '4623', '4624', '4625', '4626', '4627', '4628', '4629', '4630', '4631', '4632', '4633', '4634', '4635', '4636', '4637', '4638', '4639', '4640', '4641', '4642', '4643', '4644', '4645', '4646', '4647', '4648', '4649', '4650', '4651', '4652', '4653', '4654', '4655', '4656', '4657', '4658', '4659', '4660', '4661', '4662', '4663', '4664', '4665', '4666', '4667', '4668', '4669', '4670', '4671', '4672', '4673', '4674', '4675', '4676', '4677', '4678', '4679', '4680', '4681', '4682', '4683', '4684', '4685', '4686', '4687', '4688', '4689', '4690', '4691', '4692', '4693', '4694', '4695', '4696', '4697', '4698', '4699', '4700', '4701', '4702', '4703', '4704', '4705', '5034', '5035', '5036', '5037', '5038', '5039', '5040', '5041', '5042', '5043', '5044', '5045', '5046', '5047', '5048', '5049', '5050', '5051', '5052', '5053', '5054', '5055', '5056', '5057', '5058', '5059', '5060', '5061', '5062', '5063', '5064', '5065', '5066', '5067', '5068', '5069', '5070', '5071', '5072', '5073', '5074', '5075', '5076', '5077', '5078', '5079', '5080', '5081', '5082', '5083', '5084', '5085', '5086', '5087', '5088', '5089', '5090', '5091', '5092', '5093', '5094', '5095', '5096', '5097', '5098', '5099', '5100', '5101', '5102', '5103', '5104', '5105', '5106', '5107', '5108', '5109', '5110', '5111', '5112', '5113', '5114', '5115', '5116', '5117', '5118', '5119', '5120', '5121', '5122', '5123', '5124', '5125', '5126', '5127', '5128', '5129', '5130', '5131', '5132', '5133', '5134', '5135', '5136', '5137', '5138', '5139', '5140', '5141', '5142', '5143', '5144', '5145', '5146', '5147', '5148', '5149', '5150', '5151', '5152', '5153', '5154', '5155', '5156', '5157', '5158', '5159', '5160', '5161', '5310', '5311', '5312', '5313', '5314', '5315', '5316', '5317', '5318', '5319', '5320', '5321', '5322', '5323', '5324', '5325', '5326', '5327', '5328', '5329', '5330', '5331', '5332', '5333', '5334', '5335', '5336', '5337', '5338', '5339', '5340', '5341', '5342', '5343', '5344', '5345', '5346', '5347', '5348', '5349', '5350', '5351', '5352', '5353', '5354', '5355', '5356', '5357', '5358', '5359', '5360', '5361', '5362', '5363', '5364', '5365', '5366', '5367', '5368', '5369', '5370', '5371', '5372', '5373', '5374', '5375', '5376', '5377', '5378', '5379', '5380', '5381', '5382', '5383', '5384', '5385', '5386', '5387', '5388', '5389', '5390', '5391', '5392', '5393', '5394', '5395', '5396', '5397', '5398', '5399', '5400', '5401', '5402', '5403', '5404', '5405', '5406', '5407', '5408', '5409', '5410', '5411', '5412', '5413', '5414', '5415', '5416', '5417', '5418', '5419', '5420', '5421', '5422', '5423', '5424', '5425', '5426', '5427', '5428', '5429', '5430', '5431', '5432', '5433', '5434', '5435', '5436', '5437', '5438', '5439', '5440', '5441', '5442', '5443', '5444', '5445', '5446', '5447', '5448', '5449', '5450', '5451', '5452', '5453', '5454', '5455', '5456', '5457', '5458', '5459', '5460', '5461', '5462', '5463', '5464', '5465', '5466', '5467', '5468', '5469', '5470', '5471', '5472', '5473', '5474', '5475', '5476', '5477', '5478', '5479', '5480', '5481', '5482', '5483', '5484', '5485', '5486', '5487', '5488', '5489', '5490', '5491', '5492', '5493', '5494', '5495', '5496', '5497', '5498', '5499', '5500', '5501', '5502', '5503', '5504', '5505', '5506', '5507', '5508', '5509', '5510', '5511', '5512', '5513', '5514', '5515', '5516', '5517', '5518', '5519', '5520', '5521', '5522', '5523', '5524', '5525', '5526', '5527', '5528', '5529', '5530', '5531', '5532', '5533', '5534', '5535', '5536', '5537', '5538', '5539', '5540', '5541', '5542', '5543', '5544', '5545', '5546', '5547', '5548', '5549', '5550', '5551', '5552', '5553', '5554', '5555', '5556', '5557', '5558', '5559', '5560', '5561', '5562', '5563', '5564', '5565', '5566', '5567', '130', '145', '1068', '1069', '1098', '1100', '1125', '1132', '1159', '1171', '1172', '1175', '1231', '1235', '1238', '1239', '1245', '1246', '2304', '2305', '2306', '2307', '2308', '2309', '2310', '2311', '2312', '2313', '2314', '2315', '3786', '3787', '3816', '3818', '3843', '3850', '3877', '3889', '3890', '3893', '3949', '3953', '3956', '3957', '3963', '3964', '5022', '5023', '5024', '5025', '5026', '5027', '5028', '5029', '5030', '5031', '5032', '5033', '66', '146', '1047', '1048', '1049', '1052', '1055', '1056', '1057', '1059', '1091', '1092', '1101', '1105', '1106', '1110', '1115', '1126', '1158', '1161', '1170', '1178', '1179', '1232', '1233', '1234', '3765', '3766', '3767', '3770', '3773', '3774', '3775', '3777', '3809', '3810', '3819', '3823', '3824', '3828', '3833', '3844', '3876', '3879', '3888', '3896', '3897', '3950', '3951', '3952', '65', '150', '1050', '1051', '1053', '1054', '1058', '1060', '1080', '1081', '1083', '1090', '1093', '1107', '1108', '1109', '1116', '1156', '1160', '1168', '1169', '1180', '3768', '3769', '3771', '3772', '3776', '3778', '3798', '3799', '3801', '3808', '3811', '3825', '3826', '3827', '3834', '3874', '3878', '3886', '3887', '3898', '1163', '3881', '1162', '3880', '1164', '1165', '1167', '1182', '3882', '3883', '3885', '3900']\n\ndef getVtx( bodyGeo, vtxIndex ):\n    vtxList = []\n    count = 0\n    for i in vtxIndex:\n        vtxList.append( '{}.vtx[{}]'.format(bodyGeo, vtxIndex[count]) )\n        count += 1\n    return vtxList\n    \ndef getBboxCenter( bbox ):    \n    xmid = (bbox[0]+bbox[3])/2\n    ymid = (bbox[1]+bbox[4])/2\n    zmid = (bbox[2]+bbox[5])/2\n    bboxCenter = (xmid, ymid, zmid)\n    return bboxCenter\n\ndef getBboxScaleDiff ( bboxA, bboxB ):\n    sxDiff = (bboxA[3]-bboxA[0])/(bboxB[3]-bboxB[0])\n    syDiff = (bboxA[4]-bboxA[1])/(bboxB[4]-bboxB[1])\n    szDiff = (bboxA[5]-bboxA[2])/(bboxB[5]-bboxB[2])\n    scaleDiff = [sxDiff, syDiff, szDiff]\n    return scaleDiff\n\ndef floodVtxWeights( vtx, invertSel = False, value = 0, smooth = 0 ):\n    if len(vtx) == 0:\n        return\n    cmds.select( cl=True )     \n    cmds.select(vtx)\n    if invertSel:\n        geo = vtx[0].split('.')[0]\n        cmds.select( '{}.vtx[*]'.format(geo), tgl=True )\n        \n    paintBlspCtx = cmds.artAttrSkinPaintCtx()\n    cmds.setToolTo( paintBlspCtx )    \n    if smooth == 0:\n        cmds.artAttrSkinPaintCtx( paintBlspCtx, edit=True, val = value )\n        cmds.artAttrSkinPaintCtx( paintBlspCtx, edit=True, sao='absolute' )        \n        cmds.artAttrSkinPaintCtx( paintBlspCtx, edit=True, clr = True )\n    else:\n        cmds.artAttrSkinPaintCtx( paintBlspCtx, edit=True, sao='smooth' )\n        for t in range(0,smooth):\n            cmds.artAttrSkinPaintCtx( paintBlspCtx, edit=True, clr = True )\n    cmds.select( cl=True )         \n'''\ndef mouthbagMatch( smooth = 5 ):\n    orgCtx = cmds.currentCtx()\n    # get bodyShell and sharedBody\n    sel = cmds.ls( sl=True )\n    if len(sel) == 0:\n        if cmds.objExists('BodyShell_sbdv'):\n            bodyShell = 'BodyShell_sbdv'\n        else:\n            return\n    else:\n        bodyShell = sel[0]\n        \n    if cmds.objExists('SharedHuman_sbdv'):\n        sharedBody = 'SharedHuman_sbdv' \n    else:\n        print (\"Warning: cannot find sharedHuman_sbdv.\")\n        return\n\n    # get the scale/translation difference based on the mouthbag and the teeth bounding box\n    mouthbagVtx = getVtx( sharedBody, mouthbagVtxIndex )\n    mouthbagBbox = cmds.exactWorldBoundingBox( mouthbagVtx )\n    mouthbagCenter = getBboxCenter( mouthbagBbox )\n    teethBbox = cmds.exactWorldBoundingBox( 'Mouth' )\n    cmds.xform( 'Mouth', cp=True)\n    scaleDiff = getBboxScaleDiff ( teethBbox, mouthbagBbox )\n    scaleOut = [1.05, 1.07, 1.22] # default value to scale out the mouthbag a little bit in order to cover the teeth\n\n    # copy and transform sharedBody for blsp\n    sharedBodyCopy = cmds.duplicate( sharedBody, n = 'sharedBodyCopy' )[0]\n    cmds.xform( sharedBodyCopy, ws=True, piv = mouthbagCenter )\n    cmds.matchTransform( sharedBodyCopy, 'Mouth', pos=True )\n    cmds.xform( sharedBodyCopy, scale = scaleDiff, r=True )\n    cmds.xform( sharedBodyCopy, scale = scaleOut, r=True )\n    cmds.makeIdentity( sharedBodyCopy, a=True )\n\n    # create blendShape, flood and smooth weights\n    blspMouthbag = cmds.blendShape( sharedBodyCopy, bodyShell, n = 'mouthbagMatch_blsp' )[0]\n    bodyShellMouthbagVtx = getVtx( bodyShell, mouthbagVtxIndex )\n    floodVtxWeights( bodyShellMouthbagVtx, invertSel = True, value = 0 )\n    floodVtxWeights( bodyShellMouthbagVtx, invertSel = True, smooth = smooth )\n    #cmds.setAttr( '{}.{}'.format(blspMouthbag, sharedBodyCopy), 1 )\n    #cmds.delete( bodyShell, ch=True )\n    cmds.delete( sharedBodyCopy )\n    cmds.setToolTo( orgCtx )\n'''\ndef safe_blendshape(driver=None, driven=None, pts=None):\n    orgCtx = cmds.currentCtx()\n\n    # create blendShape, flood and smooth weights\n    blspMouthbag = cmds.blendShape( driver, driven, n = 'match_blsp' )[0]\n    vtx = getVtx( driven, pts )\n    floodVtxWeights( vtx, invertSel = True, value = 0 )\n    #floodVtxWeights( vtx, invertSel = True, smooth = 5 )\n    #cmds.setAttr( '{}.{}'.format(blspMouthbag, driver), 1 )\n    #cmds.delete( driven, ch=True )\n    cmds.setToolTo( orgCtx )\n\n\n#def safe_blendshape_head(driver=None, driven=None):\n#    safe_blendshape(driver=driver, driven=driven, pts=HEAD_NECK_VTX)\n\n\ndef safe_blendshape_body(driver=None, driven=None):\n    safe_blendshape(driver=driver, driven=driven, pts=BODY_VTX)\n\nsel = cmds.ls(sl=True)\ndriver=sel[0]\ndriven=sel[1]\nsafe_blendshape_body( driver=driver, driven=driven)\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "makeIdentity -apply true -t 1 -r 0 -s 1 -n 0 -pn 1;\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "makeIdentity -apply true -t 1 -r 0 -s 1 -n 0 -pn 1;\n" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "FrzNoRot" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "makeIdentity -apply true -t 1 -r 0 -s 1 -n 0 -pn 1;\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "weightDriverEditRBF;" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "weightDriverEditRBF;" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "weightDriverEditRBF;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "RBF Manager2" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "RBF Manager2" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "RM" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "\nfrom mgear.rigbits.rbf_manager2 import rbf_manager_ui\nrbf_manager_ui.show()\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "doHammerWeightsArgList 1 { \"1\" };\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "doHammerWeightsArgList 1 { \"1\" };\n" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Hammertime!" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "doHammerWeightsArgList 1 { \"1\" };\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    $gBuffStr = `toolButton -style iconOnly -doubleClickCommand "toolPropertyWindow" -cl toolCluster `;
    $gBuffStr1 = `    artAttrSkinPaintCtx
        -image1 "paintSkinWeights.png" 
        -image2 "vacantCell.png" 
        -image3 "vacantCell.png" 
        -tangentOutline 1
        -surfaceConformedBrushVertices 0
        -record 0
        -importreassign 0
        -selectclonesource 0
        -preserveclonesource 1
        -dynclonemode 1
        -pickColor 0
        -expandfilename 0
        -usepressure 1
        -reflectionaboutorigin 0
        -reflection 0
        -projective 0
        -showactive 1
        -brushfeedback 1
        -outwhilepaint 0
        -outline 1
        -accopacity 0
        -brushalignment 1
        -exportaspectratio 1
        -stampDepth 0.5
        -stampSpacing 0.1
        -screenRadius 1
        -worldRadius 40.586075
        -lowerradius 0.001
        -opacity 1
        -reflectionaxis "x" 
        -exportfiletype "IFF" 
        -exportfilemode "luminance" 
        -importfilemode "luminance" 
        -strokesmooth "spline" 
        -mappressure "Opacity" 
        -paintmode "tangent" 
        -paintoperationtype "Paint" 
        -dragSlider "none" 
        -radius 40.586075
        -stampProfile "poly" 
        -exportfilesizex 256
        -exportfilesizey 256
        -whichTool "skinWeights" 
        -selectedattroper "absolute" 
        -value 1
        -minvalue 0
        -maxvalue 1
        -clamplower 0
        -clampupper 1
        -alphaclamplower 0
        -alphaclampupper 1
        -clamp "none" 
        -alphaclamp "none" 
        -dataTypeIndex 1
        -colorfeedback 1
        -colorfeedbackOverride 0
        -disablelighting 1
        -colorrangelower 0
        -colorrangeupper 1
        -interactiveUpdate 1
        -colorRGBAValue 0 0 0 1 
        -colorRGBValue 0 0 0 
        -colorAlphaValue 1 
        -useColorRamp 0
        -useMaxMinColor 1
        -rampMinColor 0 0 0 
        -rampMaxColor 1 1 1 
        -colorRamp "1,0,0,1,1,1,0.5,0,0.8,1,1,1,0,0.6,1,0,1,0,0.4,1,0,0,1,0,1" 
        -useNumericDisplay 0
        -numericDisplayPrecision 2
        -numericDisplayColor 1 1 0 
        -useNumericColorRamp 0
        -numericColorRamp "1,0,0,1,1,1,0.5,0,0.6,1,1,1,0,0.4,1,1,1,1,0,1" 
        -numericMinColor 1 1 1 
        -numericMaxColor 0 0 0 
        -influence "M_freeze_env" 
        -xrayJoints 1
        -skinPaintMode 1
        -paintSelectMode 1
`;
    toolButton -edit -tool $gBuffStr1 -toolImage1 $gBuffStr1 "paintSkinWeights.png" $gBuffStr;
    toolButton -edit -tool $gBuffStr1 $gBuffStr;

    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\n\n\ndef equal_spacing_edges():\n    cmds.undoInfo(openChunk=True)  # Start undo chunk\n\n    try:\n        # Get selection\n        selection = cmds.ls(sl=True, fl=True)\n        sel_edges = []\n\n        # Find which are edges\n        for maya_object in selection:\n            if \"e[\" in maya_object:\n                sel_edges.append(maya_object)\n                maya_mesh = maya_object.split(\".e\")[0]\n\n        num_bez_tools = len(cmds.ls('EdgeBezierTool*', exactType=\"transform\", s=False))\n        counter_suffix = \"{0:02d}\".format(num_bez_tools)\n\n        # If selection was edges, run edge bezier tool\n        if sel_edges:\n            sel_obj = sel_edges[0].split(\".\")\n            init_curve = cmds.polyToCurve(form=0, degree=1)\n            num_spans = cmds.getAttr(init_curve[0] + \".spans\")\n            uniform_curve = cmds.rebuildCurve(\n                init_curve[0],\n                ch=1,\n                rpo=0,\n                rt=0,\n                end=1,\n                kr=0,\n                kcp=0,\n                kep=1,\n                kt=0,\n                s=num_spans,\n                d=1,\n                tol=0\n            )\n\n            # Delete history\n            cmds.delete(uniform_curve[0], init_curve[0], ch=True)\n\n            bez_wire = cmds.wire(\n                uniform_curve[0],\n                w=init_curve[0],\n                gw=False,\n                en=1.0,\n                ce=0.0,\n                dds=[0, 10000],\n                li=0.0\n            )\n\n            cmds.setAttr(bez_wire[0] + \".scale[0]\", 0)\n            cmds.setAttr(bez_wire[0] + \".rotation\", 0)\n            cmds.delete(uniform_curve[0], init_curve[0], ch=True)\n\n            crv_blend = cmds.blendShape(uniform_curve[0], init_curve[0], parallel=True)\n\n            cmds.wire(sel_obj[0], gw=False, dds=[0, 0.1], en=1.0, ce=0.0, li=0.0, w=init_curve[0])\n            cmds.setAttr(crv_blend[0] + \".\" + uniform_curve[0], 1)\n\n            cmds.delete(sel_edges, ch=True)\n\n            cmds.select(maya_mesh, r=True)\n            cmds.selectMode(component=True)\n            cmds.selectType(edge=True)\n            cmds.select(sel_edges, r=True)\n\n    except Exception as e:\n        cmds.undoInfo(closeChunk=True)  # Close undo chunk if an error occurs\n        raise e  # Re-raise the error for debugging\n\n    cmds.undoInfo(closeChunk=True)  # Close undo chunk\n\n\nequal_spacing_edges()\n\n\n\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cmds\n\n\ndef equal_spacing_edges():\n    cmds.u..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "even" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "import maya.cmds as cmds\n\n\ndef equal_spacing_edges():\n    cmds.undoInfo(openChunk=True)  # Start undo chunk\n\n    try:\n        # Get selection\n        selection = cmds.ls(sl=True, fl=True)\n        sel_edges = []\n\n        # Find which are edges\n        for maya_object in selection:\n            if \"e[\" in maya_object:\n                sel_edges.append(maya_object)\n                maya_mesh = maya_object.split(\".e\")[0]\n\n        num_bez_tools = len(cmds.ls('EdgeBezierTool*', exactType=\"transform\", s=False))\n        counter_suffix = \"{0:02d}\".format(num_bez_tools)\n\n        # If selection was edges, run edge bezier tool\n        if sel_edges:\n            sel_obj = sel_edges[0].split(\".\")\n            init_curve = cmds.polyToCurve(form=0, degree=1)\n            num_spans = cmds.getAttr(init_curve[0] + \".spans\")\n            uniform_curve = cmds.rebuildCurve(\n                init_curve[0],\n                ch=1,\n                rpo=0,\n                rt=0,\n                end=1,\n                kr=0,\n                kcp=0,\n                kep=1,\n                kt=0,\n                s=num_spans,\n                d=1,\n                tol=0\n            )\n\n            # Delete history\n            cmds.delete(uniform_curve[0], init_curve[0], ch=True)\n\n            bez_wire = cmds.wire(\n                uniform_curve[0],\n                w=init_curve[0],\n                gw=False,\n                en=1.0,\n                ce=0.0,\n                dds=[0, 10000],\n                li=0.0\n            )\n\n            cmds.setAttr(bez_wire[0] + \".scale[0]\", 0)\n            cmds.setAttr(bez_wire[0] + \".rotation\", 0)\n            cmds.delete(uniform_curve[0], init_curve[0], ch=True)\n\n            crv_blend = cmds.blendShape(uniform_curve[0], init_curve[0], parallel=True)\n\n            cmds.wire(sel_obj[0], gw=False, dds=[0, 0.1], en=1.0, ce=0.0, li=0.0, w=init_curve[0])\n            cmds.setAttr(crv_blend[0] + \".\" + uniform_curve[0], 1)\n\n            cmds.delete(sel_edges, ch=True)\n\n            cmds.select(maya_mesh, r=True)\n            cmds.selectMode(component=True)\n            cmds.selectType(edge=True)\n            cmds.select(sel_edges, r=True)\n\n    except Exception as e:\n        cmds.undoInfo(closeChunk=True)  # Close undo chunk if an error occurs\n        raise e  # Re-raise the error for debugging\n\n    cmds.undoInfo(closeChunk=True)  # Close undo chunk\n\n\nequal_spacing_edges()\n\n\n\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Copy the weight of a vertex to paste it onto other vertices" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Copy Vertex Weights" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "copy" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconSkinning.png" 
        -image1 "menuIconSkinning.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "CopyVertexWeights" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Paste the weight of a copied vertex onto other vertices" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Paste Vertex Weights" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "paste" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconSkinning.png" 
        -image1 "menuIconSkinning.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "PasteVertexWeights" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\nimport webbrowser\n\n# Function to retrieve and display help information\ndef display_help(*args):\n    module_name = cmds.textField('moduleField', query=True, text=True)\n    flag_name = cmds.textField('flagField', query=True, text=True)\n    \n    if module_name:\n        help_text = cmds.help(module_name, language=\"python\")\n        \n        # If a flag is specified, search for the flag within the help text\n        if flag_name:\n            flag_info = [line for line in help_text.split('\\n') if flag_name in line]\n            if flag_info:\n                help_text = '\\n'.join(flag_info)\n            else:\n                help_text = f'Flag \"{flag_name}\" not found in {module_name}.'\n                \n        cmds.scrollField('helpField', edit=True, text=help_text)\n    else:\n        cmds.scrollField('helpField', edit=True, text='Please enter a module name.')\n\n# Function to open Maya Python reference link for the entered command\ndef open_maya_reference(*args):\n    module_name = cmds.textField('moduleField', query=True, text=True)\n    if module_name:\n        url = f\"https://help.autodesk.com/cloudhelp/2024/ENU/Maya-Tech-Docs/CommandsPython/{module_name}.html\"\n        webbrowser.open(url)\n    else:\n        cmds.warning(\"Please enter a module name to view its reference.\")\n\n# Function to create the UI\ndef create_help_ui():\n    if cmds.window('helpWindow', exists=True):\n        cmds.deleteUI('helpWindow')\n        \n    window = cmds.window('helpWindow', title=\"Maya Module Help\", widthHeight=(400, 400), sizeable=True)\n    \n    form = cmds.formLayout()\n    \n    # Text field for module input with changeCommand to fetch help as you type\n    moduleField = cmds.textField('moduleField', placeholderText=\"Enter Maya module name...\", changeCommand=display_help)\n    \n    # New text field to search for specific flags\n    flagField = cmds.textField('flagField', placeholderText=\"Enter flag to search...\", changeCommand=display_help)\n    \n    # Button to open the Maya Python command reference\n    referenceButton = cmds.button(label=\"Open Maya Python Reference\", command=open_maya_reference)\n    \n    # Scrollable field to display the help text\n    helpField = cmds.scrollField('helpField', wordWrap=True, editable=False)\n    \n    # Define how UI elements should resize with the window\n    cmds.formLayout(form, edit=True,\n                    attachForm=[(moduleField, 'top', 5), (moduleField, 'left', 5), (moduleField, 'right', 5),\n                                (flagField, 'left', 5), (flagField, 'right', 5),\n                                (referenceButton, 'left', 5), (referenceButton, 'right', 5),\n                                (helpField, 'left', 5), (helpField, 'bottom', 5), (helpField, 'right', 5)],\n                    attachControl=[(flagField, 'top', 5, moduleField),\n                                   (referenceButton, 'top', 5, flagField),\n                                   (helpField, 'top', 5, referenceButton)])\n    \n    cmds.showWindow(window)\n\n# Run the UI\ncreate_help_ui()\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cmds\nimport webbrowser\n\n# Function to retrie..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "cmd_ui" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "import maya.cmds as cmds\nimport webbrowser\n\n# Function to retrieve and display help information\ndef display_help(*args):\n    module_name = cmds.textField('moduleField', query=True, text=True)\n    flag_name = cmds.textField('flagField', query=True, text=True)\n    \n    if module_name:\n        help_text = cmds.help(module_name, language=\"python\")\n        \n        # If a flag is specified, search for the flag within the help text\n        if flag_name:\n            flag_info = [line for line in help_text.split('\\n') if flag_name in line]\n            if flag_info:\n                help_text = '\\n'.join(flag_info)\n            else:\n                help_text = f'Flag \"{flag_name}\" not found in {module_name}.'\n                \n        cmds.scrollField('helpField', edit=True, text=help_text)\n    else:\n        cmds.scrollField('helpField', edit=True, text='Please enter a module name.')\n\n# Function to open Maya Python reference link for the entered command\ndef open_maya_reference(*args):\n    module_name = cmds.textField('moduleField', query=True, text=True)\n    if module_name:\n        url = f\"https://help.autodesk.com/cloudhelp/2024/ENU/Maya-Tech-Docs/CommandsPython/{module_name}.html\"\n        webbrowser.open(url)\n    else:\n        cmds.warning(\"Please enter a module name to view its reference.\")\n\n# Function to create the UI\ndef create_help_ui():\n    if cmds.window('helpWindow', exists=True):\n        cmds.deleteUI('helpWindow')\n        \n    window = cmds.window('helpWindow', title=\"Maya Module Help\", widthHeight=(400, 400), sizeable=True)\n    \n    form = cmds.formLayout()\n    \n    # Text field for module input with changeCommand to fetch help as you type\n    moduleField = cmds.textField('moduleField', placeholderText=\"Enter Maya module name...\", changeCommand=display_help)\n    \n    # New text field to search for specific flags\n    flagField = cmds.textField('flagField', placeholderText=\"Enter flag to search...\", changeCommand=display_help)\n    \n    # Button to open the Maya Python command reference\n    referenceButton = cmds.button(label=\"Open Maya Python Reference\", command=open_maya_reference)\n    \n    # Scrollable field to display the help text\n    helpField = cmds.scrollField('helpField', wordWrap=True, editable=False)\n    \n    # Define how UI elements should resize with the window\n    cmds.formLayout(form, edit=True,\n                    attachForm=[(moduleField, 'top', 5), (moduleField, 'left', 5), (moduleField, 'right', 5),\n                                (flagField, 'left', 5), (flagField, 'right', 5),\n                                (referenceButton, 'left', 5), (referenceButton, 'right', 5),\n                                (helpField, 'left', 5), (helpField, 'bottom', 5), (helpField, 'right', 5)],\n                    attachControl=[(flagField, 'top', 5, moduleField),\n                                   (referenceButton, 'top', 5, flagField),\n                                   (helpField, 'top', 5, referenceButton)])\n    \n    cmds.showWindow(window)\n\n# Run the UI\ncreate_help_ui()\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Advanced blend shape editor" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "SHAPES" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "SHAPES.svg" 
        -image1 "SHAPES.svg" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "SHAPES;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "# import python maya commands \nimport maya.cmds as cmds\nviewPanels = cmds.getPanel( type='modelPanel')\nprint(viewPanels)\nfor view in viewPanels:\n    print(view)\n    joint_curr_vis = cmds.modelEditor(view, q=True, joints=True)\n    print(joint_curr_vis)\n    joint_curr_vis = cmds.modelEditor(view, e=True, joints=not joint_curr_vis)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "# import python maya commands \nimport maya.cmds as cmds\nviewPane..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "jnt_vis" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "# import python maya commands \nimport maya.cmds as cmds\nviewPanels = cmds.getPanel( type='modelPanel')\nprint(viewPanels)\nfor view in viewPanels:\n    print(view)\n    joint_curr_vis = cmds.modelEditor(view, q=True, joints=True)\n    print(joint_curr_vis)\n    joint_curr_vis = cmds.modelEditor(view, e=True, joints=not joint_curr_vis)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;

} 
