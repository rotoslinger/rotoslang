

import os

class DirectoryMap:
    def __init__(self, root_folder):
        """
        Initializes the DirectoryMap instance with a root folder and automatically prints the directory map.
        Args:
            root_folder (str): The path of the folder to print.
        """
        self.root_folder = root_folder
        self.print_statements = []
        self.recursive_print_directory_map()  # Automatically call the recursive print
        self.display()  # Automatically display the directory map

    def recursive_print_directory_map(self):
        """
        Starts the recursive process of printing the directory map.
        """
        self._print_subdirs(self.root_folder, "# ├────── " + os.path.basename(self.root_folder))

    def _print_subdirs(self, folder, current_indent, previous_item=""):
        """
        Recursively prints the subdirectories and files in the given folder.
        Args:
            folder (str): The current folder path.
            current_indent (str): The current indentation level for printing.
            previous_item (str): The previous item name for spacing calculation.
        """
        items = os.listdir(folder)
        files = [item for item in items if os.path.isfile(os.path.join(folder, item))]
        dirs = [item for item in items if os.path.isdir(os.path.join(folder, item))]

        # Sort files and directories for consistent ordering
        files.sort()
        dirs.sort()

        # Combine files and directories for final ordering
        items = files + dirs
        total_items = len(items)

        # Start printing the contents of the folder
        for index, item in enumerate(items):
            item_path = os.path.join(folder, item)
            is_last = index == total_items - 1  # Check if it's the last item

            # Determine the directory name for attribute creation
            if os.path.isdir(item_path):
                directory_name = item
                # Create a dynamic directory print statement
                line_chars = '─' * (len(previous_item) + 6)  # Calculate the dashes based on previous item
                tmp_print = f"{current_indent[:-1]}├─────── {directory_name}" if not is_last else f"{current_indent[:-1]}└─────── {directory_name}"
                
                # Dynamically set the directory print statement as an attribute
                setattr(self, f'dir_{directory_name}', tmp_print)
                
                # Add to the print statements list
                self.print_statements.append(tmp_print)
                
                # Prepare for the next level of indentation
                new_indent = f"{current_indent[:-1]} │" + ' ' * (len(previous_item) + 6)
                self._print_subdirs(item_path, new_indent, item)
            else:
                # Handle files
                self.print_statements.append(f"{current_indent}# │       ├─────── {item}")

    def display(self):
        """
        Prints all stored print statements for the directory structure.
        """
        print("#" + "#" * (len(" dir map ") + 1))  # Header
        for statement in self.print_statements:
            print(statement)
        print("#" + "#" * (len(" dir map ") + 1))  # Footer


# Usage example
# local_build_dir=r"C:\Users\harri\Documents\BDP\cha\build_test_dir\charname"
# directory_map = DirectoryMap(local_build_dir)  # This will automatically print the directory map
