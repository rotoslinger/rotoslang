// ------------------------------------------------------------------------------------------------
//
// SHAPES
//
// blend shape editing tool for Maya
//
// required plugins:
//   SHAPESTools
//
// Ingo Clemens
// www.braverabbit.com
//
// copyright brave rabbit, Ingo Clemens 2014-2023
//
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
//
// THE SOFTWARE PRODUCT IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR
// IMPLIED, INCLUDING, BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NON-INFRINGEMENT OF THIRD-PARTY RIGHTS. THE ENTIRE RISK AS TO THE QUALITY AND
// PERFORMANCE OF THE SOFTWARE PRODUCT IS WITH YOU.
// NEITHER BRAVE RABBIT NOR ITS SUPPLIERS WARRANT THAT THE FUNCTIONS CONTAINED IN THE SOFTWARE
// PRODUCT WILL MEET YOUR REQUIREMENTS OR THAT THE OPERATION OF THE SOFTWARE PRODUCT WILL BE
// UNINTERRUPTED OR ERROR-FREE. BRAVE RABBIT IS NOT OBLIGATED TO PROVIDE ANY UPDATES TO THE
// SOFTWARE.
// IN NO EVENT SHALL THE AUTHOR OF THIS SOFTWARE PRODUCT BE LIABLE FOR ANY SPECIAL, CONSEQUENTIAL,
// INCIDENTAL, DIRECT OR INDIRECT DAMAGES WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR
// LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, FOR PERSONAL INJURY, LOSS OF BUSINESS
// INFORMATION, OR ANY OTHER PECUNIARY LOSS) ARISING OUT OF THE USE OF OR INABILITY TO USE THIS
// PRODUCT, EVEN IF THE AUTHOR OF THIS SOFTWARE PRODUCT IS AWARE OF THE POSSIBILITY OF SUCH
// DAMAGES AND KNOWN DEFECTS, ANY CLAIM BY A THIRD PARTY AND EVEN IF THE REMEDY FAILS OF ITS
// ESSENTIAL PURPOSE.
//
// ------------------------------------------------------------------------------------------------


// ------------------------------------------------------------------------------------------------
// main ui
// ------------------------------------------------------------------------------------------------

proc listResizePopupMenu( string $name )
{
    string $control;
    int $size;
    string $varName;
    if ($name == "shpUI_targetTree")
    {
        $control = "treeView";
        $size = 100;
        $varName = "SHAPESTargetTreeSize";
    }
    else if ($name == "shpUI_driverTree")
    {
        $control = "treeView";
        $size = 100;
        $varName = "SHAPESDriverTreeSize";
    }
    else if ($name == "shpUI_shapeWeightsList")
    {
        $control = "textScrollList";
        $size = 60;
        $varName = "SHAPESWeightTreeSize";
    }
    else if ($name == "shpUI_regionList")
    {
        $control = "textScrollList";
        $size = 60;
        $varName = "SHAPESRegionTreeSize";
    }
    string $cmd1 = $control + " -edit -height " + $size + " " + $name + "; ";
    $cmd1 += "optionVar -intValue " + $varName + " " + $size + ";";

    string $cmd2 = $control + " -edit -height " + $size*2 + " " + $name + "; ";
    $cmd2 += "optionVar -intValue " + $varName + " " + $size*2 + ";";

    string $cmd3 = $control + " -edit -height " + $size*3 + " " + $name + "; ";
    $cmd3 += "optionVar -intValue " + $varName + " " + $size*3 + ";";

    popupMenu;
        menuItem -label "Default" -command $cmd1;
        menuItem -label "Medium" -command $cmd2;
        menuItem -label "Large" -command $cmd3;
}


global proc shapesUI_buildUI( string $parent )
{
    global string $gShapes_homeUrl;
    global string $gShapes_learningUrl;
    global string $gShapes_versionShort;
    global string $gShapes_sculptButtonLabel;

    int $valueInt;
    string $ann;

    setParent $parent;

    //-------------------
    // menu bar
    //-------------------

    menuBarLayout;

        menu -l "Display" -tearOff 1;
            menuItem -l "Weight Driver" -sm 1 -tearOff 1 shpUI_weightDriverDisplayMenuItem;
                menuItem -l "Show All Weight Driver Nodes" -c "shapesDriver_showHideWeightDriver visibility 1";
                menuItem -l "Hide All Weight Driver Nodes" -c "shapesDriver_showHideWeightDriver visibility 0";
                menuItem -d 1;
                menuItem -l "Show All Weights" -c "shapesDriver_showHideWeightDriver drawWeight 1";
                menuItem -l "Hide All Weights" -c "shapesDriver_showHideWeightDriver drawWeight 0";
                menuItem -d 1;
                menuItem -l "Activate All Weight Driver Nodes" -c "shapesDriver_showHideWeightDriver active 1";
                menuItem -l "Deactivate All Weight Driver Nodes" -c "shapesDriver_showHideWeightDriver active 0";
            setParent -m ..;

        menu -l "Symmetry" -tearOff 1 shpUI_symmetryMenu;
            menuItem -l "Add To Map" -c ("br_polyMapVertexOrder -addToMap; shapesUI_setSymmetryImage 1; shapesUI_toggleMirrorItems;");
            menuItem -l "Add Partial Symmetry To Map" -c ("br_polySymmetry -addToMap; shapesUI_setSymmetryImage 1; shapesUI_toggleMirrorItems;");
            menuItem -d 1;
            menuItem -l "Select Mapped Components";
            menuItem -l "Select Unmapped Components";
            menuItem -l "Display Components Siblings" -c ("br_polyMapVertexOrder -check");
            menuItem -d 1;
            menuItem -l "Make Symmetrical..." -c shapesMirror_makeSymmetrical;
            menuItem -d 1;
            menuItem -l "New Mapping..." -c shapesMirror_createOrderMapping;
            menuItem -l "Delete Mapping..." -c "shapesMirror_removeOrderMapping 1";
            menuItem -l "Transfer Mapping" -c shapesMirror_copyOrderMapping -ann (uiRes("m_SHAPES_ui.kTransferSymmetryMap"));
            menuItem -d 1;
            menuItem -l "Symmetry Mapping" -cb (`optionVar -q SHAPESSymmetryEnabled`) -c "optionVar -iv SHAPESSymmetryEnabled #1; shapesUI_setSymmetryImage 0;";
            $ann = "Uses an automatic tolerance value based on the average edge length. When off the tolerance value from the preferences is used. A manual value of 0.0001 is recommended.";
            menuItem -l "Auto Tolerance" -ann $ann -cb (`optionVar -q SHAPESSymmetryAutoTolerance`) -c "optionVar -iv SHAPESSymmetryAutoTolerance #1;";

        menu -l "Tools" -tearOff 1;
            menuItem -l "Check Symmetry" -c "br_performPolySymmetry 0";
            menuItem -ob 1 -c "br_performPolySymmetry 1";
            menuItem -d 1;
            menuItem -l "Export Node Data..." -c "shapesUI_buildExportUI 1";

            menuItem -l "Import Node Data..." -sm 1 -pmc "shapesUtil_buildImportMenu shpUI_importMenuItem" shpUI_importMenuItem;
                menuItem -l "None" -en 0;
            setParent -m ..;

            menuItem -d 1;
            menuItem -l "Transfer Setup..." -c "shapesUI_buildExportUI 0";

            menuItem -l "Tweak Transfer" -sm 1 -tearOff 1 -en 0 shpUI_tweakTransferMenuItem;
                menuItem -l "Enter Skin Tweak Mode" -c shapesUtil_toggleTweakSkin shpUI_tweakSkinMenuItem;
                menuItem -l "Update Selected Target From Wrapped Mesh" -c "shapesAction_addSelectionAsTarget 1 0 1";
            setParent -m ..;

            menuItem -l "Connect Blend Shape Nodes..." -c shapesUI_connectBlendShapeNodeUI;
            menuItem -l "Disconnect Current Blend Shape Node" -c shapesUtil_disconnectBlendShapeNodes;
            menuItem -d 1;

            menuItem -l "Blend Shape Deltas" -sm 1 -tearOff 1;
                menuItem -l "Export All..." -c "shapesUtil_exportBlendShapeDeltas 0";
                menuItem -l "Export Selected..." -c "shapesUtil_exportBlendShapeDeltas 1";
                menuItem -d 1;
                menuItem -l "Import Blend Shape Deltas..." -c "shapesUtil_importBlendShapeDeltas 0";
                menuItem -l "Import Blend Shape Deltas To Selection..." -c "shapesUtil_importBlendShapeDeltas 1";
            setParent -m ..;
            menuItem -d 1;

            menuItem -l "Other" -sm 1 -tearOff 1;
                menuItem -l "Set Weight Driver Source Position" -c shapesUtil_setWeightDriverMatrix;
                menuItem -d 1;
                menuItem -l "Validate Weight Driver RBF Solver" -c shapesDriver_validateWeightDriverRBFValues;
            setParent -m ..;
            menuItem -d 1;

            menuItem -l "Cleanup" -sm 1 -tearOff 1;
                menuItem -l "Bake Tweaks To Original..." -c "shapesUtil_processTweakNode 1";
                menuItem -l "Cleanup Tweak Node..." -c "shapesUtil_processTweakNode 0";
                menuItem -l "Remove Orphan Target" -c shapesUtil_removeOrphanTarget;
                menuItem -l "Reset Target List..." -c shapesUtil_clearTargetCustomData;
                menuItem -l "Reset Driver List..." -c shapesUtil_clearDriverCustomData;
                menuItem -d 1;
                menuItem -l "Remove Reference Edits..." -c shapesUtil_removeReferenceEdits;
            setParent -m ..;

        setParent -m ..;

    setParent $parent;

    if (!`br_lm -ex`)
    {
        columnLayout -adj 1 shpUI_evaluationBanner;
            text -l "Non-licensed Evaluation Version" -bgc 0.4 0.03 0.03 -h 18;
        setParent $parent;
    }

    string $mainForm = `formLayout`;

    //-------------------
    // UI elements buttons
    //-------------------

    columnLayout -adj 1 -m (`optionVar -q SHAPESShowUIButtons`) shpUI_showUILayout;

        string $buttonForm = `formLayout`;

            string $showLabel = `text -l "Show UI : "`;

            $valueInt = (`optionVar -q SHAPESShowUIDrivenSet`);
            string $setButton = `iconTextCheckBox   -v $valueInt
                                                    -w 22
                                                    -h 22
                                                    -i "SHAPES_drivenSet.png"
                                                    -cc "optionVar -iv SHAPESShowUIDrivenSet #1; shapesUI_manageUIElements"
                                                    -ann "Show/Hide Driven Set" shpUI_showDrivenSetUICheck`;
            $valueInt = (`optionVar -q SHAPESShowUIWeights`);
            string $weightsButton = `iconTextCheckBox   -v $valueInt
                                                        -w 22
                                                        -h 22
                                                        -i "SHAPES_ui_weights.png"
                                                        -cc "optionVar -iv SHAPESShowUIWeights #1; shapesUI_manageUIElements"
                                                        -ann "Show/Hide Shape Weights" shpUI_showWeightsUICheck`;
            $valueInt = (`optionVar -q SHAPESShowUIRegion`);
            string $regionButton = `iconTextCheckBox    -v $valueInt
                                                        -w 22
                                                        -h 22
                                                        -i "SHAPES_regionPartials0.png"
                                                        -cc "optionVar -iv SHAPESShowUIRegion #1; shapesUI_manageUIElements"
                                                        -ann "Show/Hide Region Map" shpUI_showRegionUICheck`;
            $valueInt = (`optionVar -q SHAPESShowUIAnimation`);
            string $animButton = `iconTextCheckBox      -v $valueInt
                                                        -w 22
                                                        -h 22
                                                        -i "SHAPES_drivenSetKey.png"
                                                        -cc "optionVar -iv SHAPESShowUIAnimation #1; shapesUI_manageUIElements"
                                                        -ann "Show/Hide Animation" shpUI_showAnimationUICheck`;
            $valueInt = (`optionVar -q SHAPESShowUIDriver`);
            string $driverButton = `iconTextCheckBox    -v $valueInt
                                                        -w 22
                                                        -h 22
                                                        -i "SHAPES_btn_rbf.png"
                                                        -cc "optionVar -iv SHAPESShowUIDriver #1; shapesUI_manageUIElements"
                                                        -ann "Show/Hide Shape Driver And Combos" shpUI_showDriverUICheck`;

            formLayout  -e

                        -af $setButton "top" 0
                        -af $showLabel "left" 8
                        -af $showLabel "top" 4
                        -af $weightsButton "top" 0
                        -af $regionButton "top" 0
                        -af $animButton "top" 0
                        -af $driverButton "top" 0

                        -ac $setButton "left" 1 $showLabel
                        -ac $weightsButton "left" 1 $setButton
                        -ac $regionButton "left" 1 $weightsButton
                        -ac $animButton "left" 1 $regionButton
                        -ac $driverButton "left" 1 $animButton

                        $buttonForm;

    setParent $mainForm;

    string $mainLayout = `scrollLayout -cr 1`;

    //-------------------
    // selection frame
    //-------------------

    string $meshFrame = `frameLayout -l "Selection" -li 3 -cll 0 -cl 0 -mw 5 -mh 5`;

        // skin mesh form
        string $meshForm = `formLayout`;
            string $meshButton = `button -l "Load Mesh" -w 70 -ann "" -c "shapesMain_getMeshSelection 0" shpUI_meshNameButton`;
            popupMenu;
                menuItem -l "Show Loading Info" -c shapesUI_buildLoadInfoUI;
            string $symIcon = `image -w 26 shpUI_symmetryImage`;
            shapesUI_setSymmetryImage 0;
            string $bsForm = `formLayout shpUI_bsForm`;
            setParent $meshForm;
            string $prefButton = `iconTextButton -w 26 -h 25 -i "SHAPES_preferences.png" -ann "Preferences" -c "shapesUI_buildPreferencesUI"`;
            formLayout  -e

                        -af $meshButton "top" 0
                        -af $meshButton "left" 1
                        -af $symIcon "top" 1
                        -af $bsForm "top" 2
                        -af $prefButton "top" 0
                        -af $prefButton "right" 0

                        -ac $symIcon "left" 8 $meshButton
                        -ac $bsForm "left" 0 $symIcon
                        -ac $bsForm "right" 5 $prefButton

                        $meshForm;

    setParent $mainLayout;

    //-------------------
    // target frame
    //-------------------

    string $shapesFrame = `frameLayout -l "Target Shapes" -li 3 -cll 1 -cl 0 -mw 5 -mh 5`;

        columnLayout -adj 1 shpUI_targetColumnLayout;

            // target search form
            string $filterForm = `formLayout`;
                popupMenu;
                    menuItem -label "Clear All" -command "shapesUI_resetTypeFilter(); shapesUI_clearSearch target;";

                iconTextCheckBox -width 22
                                 -height 22
                                 -image "SHAPES_filterLive.png"
                                 -onCommand "shapesJob_initializeDisplayValueScriptJob 1"
                                 -offCommand "shapesJob_initializeDisplayValueScriptJob 0"
                                 -annotation "Live show active shapes"
                                 shpUI_filterLiveCheck;

                $separator = `iconTextButton -height 25
                                             -width 15
                                             -image1 "openBar.png"
                                             -command "optionVar -intValue SHAPESShowFilterRow (1 - `optionVar -query SHAPESShowFilterRow`); shapesUI_toggleFilterRow"
                                             -annotation "Show or hide filters. When filtering is enabled all list items are processed which can slow down refresh times."
                                             shpUI_filterToggle`;

                rowLayout -numberOfColumns 13 shpUI_filterRow;
                    iconTextCheckBox -width 22
                                     -height 22
                                     -image "SHAPES_filterActive.png"
                                     -onCommand "optionVar -intValue SHAPESFilterActiveChannel #1; shapesUI_filterList 1"
                                     -offCommand "optionVar -intValue SHAPESFilterActiveChannel #1; shapesUI_filterList 1"
                                     -annotation "Active shapes";
                    iconTextCheckBox -width 22
                                     -height 22
                                     -image "SHAPES_filterMax.png"
                                     -onCommand "optionVar -intValue SHAPESFilterMaxChannel #1; shapesUI_filterList 1"
                                     -offCommand "optionVar -intValue SHAPESFilterMaxChannel #1; shapesUI_filterList 1"
                                     -annotation "Shapes at maximum";
                    iconTextCheckBox -width 22
                                     -height 22
                                     -image "SHAPES_btn_connection.png"
                                     -onCommand "optionVar -intValue SHAPESFilterConnection #1; shapesUI_filterList 1"
                                     -offCommand "optionVar -intValue SHAPESFilterConnection #1; shapesUI_filterList 1"
                                     -annotation "Direct connection";
                    iconTextCheckBox -width 22
                                     -height 22
                                     -image "SHAPES_drivenSetKey.png"
                                     -onCommand "optionVar -intValue SHAPESFilterSdk #1; shapesUI_filterList 1"
                                     -offCommand "optionVar -intValue SHAPESFilterSdk #1; shapesUI_filterList 1"
                                     -annotation "Set driven keyframe";
                    iconTextCheckBox -width 22
                                     -height 22
                                     -image "SHAPES_btn_wd.png"
                                     -onCommand "optionVar -intValue SHAPESFilterWeightDriver #1; shapesUI_filterList 1"
                                     -offCommand "optionVar -intValue SHAPESFilterWeightDriver #1; shapesUI_filterList 1"
                                     -annotation "Vector angle reader";
                    iconTextCheckBox -width 22
                                     -height 22
                                     -image "SHAPES_btn_rbf.png"
                                     -onCommand "optionVar -intValue SHAPESFilterRBF #1; shapesUI_filterList 1"
                                     -offCommand "optionVar -intValue SHAPESFilterRBF #1; shapesUI_filterList 1"
                                     -annotation "RBF solver";
                    iconTextCheckBox -width 22
                                     -height 22
                                     -image "SHAPES_btn_pi.png"
                                     -onCommand "optionVar -intValue SHAPESFilterPoseInterpolator #1; shapesUI_filterList 1"
                                     -offCommand "optionVar -intValue SHAPESFilterPoseInterpolator #1; shapesUI_filterList 1"
                                     -annotation "Pose Interpolator";
                    iconTextCheckBox -width 22
                                     -height 22
                                     -image "SHAPES_btn_combo1.png"
                                     -onCommand "optionVar -intValue SHAPESFilterCombo #1; shapesUI_filterList 1"
                                     -offCommand "optionVar -intValue SHAPESFilterCombo #1; shapesUI_filterList 1"
                                     -annotation "Combos";
                    iconTextCheckBox -width 22
                                     -height 22
                                     -image "SHAPES_comboMembers.png"
                                     -onCommand "optionVar -intValue SHAPESFilterComboMembers #1; shapesUI_filterList 1"
                                     -offCommand "optionVar -intValue SHAPESFilterComboMembers #1; shapesUI_filterList 1"
                                     -annotation "Selected combo members";
                    iconTextCheckBox -width 22
                                     -height 22
                                     -image "SHAPES_ui_weights.png"
                                     -onCommand "optionVar -intValue SHAPESFilterShapeWeights #1; shapesUI_filterList 1"
                                     -offCommand "optionVar -intValue SHAPESFilterShapeWeights #1; shapesUI_filterList 1"
                                     -annotation "Weight map";
                    iconTextCheckBox -width 22
                                     -height 22
                                     -image "SHAPES_btn_weightsRamp.png"
                                     -onCommand "optionVar -intValue SHAPESFilterRampWeights #1; shapesUI_filterList 1"
                                     -offCommand "optionVar -intValue SHAPESFilterRampWeights #1; shapesUI_filterList 1"
                                     -annotation "Ramp weights";
                    iconTextCheckBox -width 22
                                     -height 22
                                     -image "SHAPES_btn_weightsServer.png"
                                     -onCommand "optionVar -intValue SHAPESFilterWeightsServer #1; shapesUI_filterList 1"
                                     -offCommand "optionVar -intValue SHAPESFilterWeightsServer #1; shapesUI_filterList 1"
                                     -annotation "Weights server";
                    iconTextCheckBox -width 22
                                     -height 22
                                     -image "SHAPES_drivenSet.png"
                                     -onCommand "optionVar -intValue SHAPESFilterDrivenSet #1; shapesUI_filterList 1"
                                     -offCommand "optionVar -intValue SHAPESFilterDrivenSet #1; shapesUI_filterList 1"
                                     -annotation "Driven sets";
                setParent ..;

                formLayout  -e

                            -af shpUI_filterLiveCheck "top" 0
                            -af shpUI_filterLiveCheck "left" 1
                            -af $separator "top" 0
                            -af shpUI_filterRow "top" 0

                            -ac $separator "left" 2 shpUI_filterLiveCheck
                            -ac shpUI_filterRow "left" 2 $separator

                            $filterForm;

            setParent shpUI_targetColumnLayout;

            shapesUI_toggleFilterRow();

            // target search form
            string $targetForm = `formLayout`;

                $valueInt = `optionVar -query SHAPESCaseSensitiveSearch`;
                string $caseCheck = `iconTextCheckBox -height 25
                                                      -image "SHAPES_caseSearch.png"
                                                      -value $valueInt
                                                      -onCommand "optionVar -intValue SHAPESCaseSensitiveSearch #1"
                                                      -offCommand "optionVar -intValue SHAPESCaseSensitiveSearch #1"
                                                      -annotation "Case sensitive search"`;

                textFieldGrp    -l ""
                                -ann "Enter search string. Use + for combinations."
                                -placeholderText "Enter search string. Use + for combinations."
                                -cw2 0 155
                                -ct2 "left" "right"
                                -co2 0 0
                                -ad2 2
                                shpUI_targetSearchField;
                string $clearButton = `iconTextButton -w 20 -h 25 -i "SHAPES_clear.png" -ann "Clear search" -c "shapesUI_clearSearch target; shapesUI_filterList 0;"`;

                textFieldGrp -e -tcc "shapesUI_searchJointString target" shpUI_targetSearchField;

                formLayout  -e

                            -af $caseCheck "top" 0
                            -af $caseCheck "left" 1
                            -af $clearButton "right" 5

                            -ac shpUI_targetSearchField "left" 5 $caseCheck
                            -ac shpUI_targetSearchField "right" 0 $clearButton

                            $targetForm;

            setParent shpUI_targetColumnLayout;

            // target list
            string $targetTreeForm = `formLayout`;
                $valueInt = `optionVar -q SHAPESTargetTreeSize`;
                treeView    -nb 3
                            -p $targetTreeForm
                            -h $valueInt
                            -abr 0
                            -adr 1
                            -arp 1
                            -dad shapesList_dragDropCallback
                            -ecc shapesList_expandCollapseItem
                            -scc shapesMain_buildTargetSlider
                            -irc shapesAction_renameCorrective
                            shpUI_targetTree;
                popupMenu shpUI_targetPopup;

                string $shrinkButton = `iconTextButton  -w 22
                                                        -h 25
                                                        -i "SHAPES_listRetract.png"
                                                        -c "shapesUI_resizeScrollList 0 target"
                                                        -ann "Shrink target list"`;
                listResizePopupMenu("shpUI_targetTree");
                string $growButton = `iconTextButton    -w 22
                                                        -h 25
                                                        -i "SHAPES_listExpand.png"
                                                        -c "shapesUI_resizeScrollList 1 target"
                                                        -ann "Grow target list"`;
                listResizePopupMenu("shpUI_targetTree");

                formLayout  -e

                            -af shpUI_targetTree "top" 5
                            -af shpUI_targetTree "left" 0
                            -af shpUI_targetTree "bottom" 5
                            -af $shrinkButton "top" 0
                            -af $shrinkButton "right" 5
                            -af $growButton "right" 5

                            -ac shpUI_targetTree "right" 3 $shrinkButton
                            -ac $growButton "top" 3 $shrinkButton

                            $targetTreeForm;

            setParent shpUI_targetColumnLayout;

            // placeholder for adding the combo buttons when in combo edit mode
            rowLayout -nc 9 -adj 7 -m 0 shpUI_comboButtonLayout;
            setParent shpUI_targetColumnLayout;

            //-------------------
            // compare slider
            //-------------------

            columnLayout -adj 1 -m 0 shpUI_compareSliderColumn;
                shapesUI_buildSculptCompareSlider;
            setParent shpUI_targetColumnLayout;

            rowLayout -nc 12 -adj 3 shpUI_editButtonsLayout;
                button -l "" -w 100 -bgc 0.365 0.365 0.365 shpUI_sculptButton;
                popupMenu;
                    menuItem -l "Cancel Edit Mode" -en 0 shpUI_cancelItem;
                iconTextButton -w 25 -h 25 -image "SHAPES_symmetry.png" -ann "Symmetrize the edit mesh." -c "" shpUI_symmetrizeButton;
                button -l "Propagate" -w 70 shpUI_propagateButton;
                shapesUI_createDefaultSculptButton;
                separator -style "none" -w 13;
                iconTextButton -w 25 -h 25 -i "SHAPESBrush_small.svg" -ann "SHAPES Brush. Double-click for tool settings." -c "SHAPESBrushToolCtx" -dcc "SHAPESBrushToolCtx; toolPropertyWindow;" shpUI_brushButton;
                image -image "SHAPES_separator.png";
                iconTextButton -w 25 -h 25 -i "SHAPES_editAddTarget.png" -ann "Add or replace target shapes";
                popupMenu -b 1;
                    menuItem -l "Add New Empty Target" -c "shapesAction_duplicateMeshFromMenu 1 1";
                    menuItem -d 1;
                    menuItem -l "Add Selection As New Default Target" -c "shapesAction_addSelectionAsTargetMulti 0 0 0" shpUI_newDefaultMenuItem;
                    menuItem -l "Add Selection As New Posed Target" -c "shapesAction_addSelectionAsTargetMulti 1 0 0" shpUI_newPosedMenuItem;
                    menuItem -l "Add Current Mesh As New Target" -c "shapesAction_duplicateMeshFromMenu 0 1";
                    menuItem -d 1;
                    menuItem -l "Replace Selected Target With Default Mesh" -c "shapesAction_addSelectionAsTarget 0 1 0";
                    menuItem -l "Replace Selected Target With Posed Mesh" -c "shapesAction_addSelectionAsTarget 1 1 0";
                    menuItem -d 1;
                    menuItem -l "Replace Targets With Mesh Selection" -c "shapesAction_addSelectionAsTargetMulti 0 1 0";
                    menuItem -d 1;
                    $valueInt = `optionVar -q SHAPESKeepSelectedMesh`;
                    menuItem -l "Keep Selected Mesh" -cb $valueInt -c ("optionVar -iv SHAPESKeepSelectedMesh #1");
                    $valueInt = `optionVar -q SHAPESKeepMeshConnection`;
                    menuItem -l "Keep Connection" -cb $valueInt -c ("optionVar -iv SHAPESKeepMeshConnection #1");
                iconTextButton -w 25 -h 25 -i "SHAPES_additionalActions.png" -ann "Additional actions and tools";
                popupMenu -b 1;
                    menuItem -l "Add Group" -c "shapesUI_addShapeHelperAttribute 1 shapeGroup 6";
                    menuItem -l "Add Shape Helper Attribute" -c "shapesUI_addShapeHelperAttribute 0 shapeHelper 4";
                    menuItem -d 1;
                    menuItem -l "Create Attributes From Selection..." -c shapesUI_createAttributeOnNodeUI;
                    menuItem -d 1;
                    menuItem -l "Extract And Connect All" -c shapesAction_extractAndConnectAll;
                    menuItem -l "Extract And Connect Selected" -c shapesAction_extractAndConnectSelected;
                    menuItem -d 1;
                    menuItem -l "Bake Current Mesh To Original..." -c shapesAction_currentMeshToOriginal;
                    menuItem -l "Batch Process Mirror" -sm 1 -en 0 shpUI_groupBatchProcessMenuItem;
                        menuItem -l "Symmetrize" -c "shapesMirror_batchMirrorTarget 0 0";
                        menuItem -l "Flip Mirror" -c "shapesMirror_batchMirrorTarget 0 1";
                        menuItem -d 1;
                        menuItem -l "Create Opposite" -c "shapesMirror_batchMirrorTarget 1 -1";
                        menuItem -l "Match Opposite" -c "shapesMirror_batchMirrorTarget 2 -1";
                    setParent -m ..;
                    menuItem -d 1;
                    menuItem -l "Duplicate Original Mesh" -c "shapesAction_duplicateMeshFromMenu 1 0";
                    menuItem -l "Duplicate Current Mesh" -c "shapesAction_duplicateMeshFromMenu 0 0";
                    menuItem -d 1;
                    menuItem -l "Convert In-betweens" -sm 1 -tearOff 1 shpUI_convertInbetweensMenuItem;
                        menuItem -l "Convert In-betweens To Sequence" -c "shapesAction_convertInbetweensToSequence";
                        menuItem -d 1;
                        $valueInt = `optionVar -q SHAPESConvertInbetweensInterpolation`;
                        radioMenuItemCollection;
                        menuItem -l "Linear" -radioButton (!$valueInt) -c ("optionVar -iv SHAPESConvertInbetweensInterpolation 0");
                        menuItem -l "Smooth" -radioButton $valueInt -c ("optionVar -iv SHAPESConvertInbetweensInterpolation 1");
                    setParent -m ..;
                    menuItem -l "Create Progressive In-betweens..." -c shapesAction_createBlendShapeProgressiveInbetweens;
                image -image "SHAPES_separator.png";
                iconTextButton -w 25 -h 25 -i "SHAPES_editAddNode.png" -ann "Add or delete blend shape node";
                popupMenu -b 1;
                    menuItem -l "Add Blend Shape Node Before Deformers" -c "shapesAction_addBlendShapeNode 1";
                    menuItem -l "Add Blend Shape Node After Current" -c "shapesAction_addBlendShapeNode 0";
                    menuItem -l "Add Blend Shape Node After Deformers" -c "shapesAction_addBlendShapeNode 2" -ver "2017";
                    menuItem -d 1;
                    menuItem -l "Delete Blend Shape Node" -c shapesAction_deleteBlendShapeNode;

            setParent shpUI_targetColumnLayout;

    setParent $mainLayout;

    //-------------------
    // slider frame
    //-------------------

    frameLayout -l "Channels" -li 3 -cll 1 -cl 1 -mw 5 -mh 5 shpUI_sliderFrame;

    setParent $mainLayout;

    //-------------------
    // split shape frame
    //-------------------

    frameLayout -l "Split Shape" -li 3 -cll 1 -cl 1 -mw 5 -mh 5 -m 0 shpUI_splitShapeFrame;

    setParent $mainLayout;

    //-------------------
    // driven set frame
    //-------------------

    $value = `optionVar -q SHAPESDrivenSetFolderCollapseState`;
    int $manage = `optionVar -q SHAPESShowUIDrivenSet`;
    frameLayout -l "Driven Set"
                -li 3
                -cll 1
                -cl $value
                -mw 5
                -mh 5
                -m $manage
                -ec "optionVar -iv SHAPESDrivenSetFolderCollapseState (`frameLayout -q -cl shpUI_drivenSetFrame`)"
                -cc "optionVar -iv SHAPESDrivenSetFolderCollapseState (`frameLayout -q -cl shpUI_drivenSetFrame`)"
                shpUI_drivenSetFrame;

    shapesUI_showDrivenSetUI;

    setParent $mainLayout;

    //-------------------
    // weights frame
    //-------------------

    $value = `optionVar -q SHAPESWeightsFolderCollapseState`;
    $manage = `optionVar -q SHAPESShowUIWeights`;
    frameLayout -l "Shape Weights"
                -li 3
                -cll 1
                -cl $value
                -mw 5
                -mh 5
                -m $manage
                -ec "optionVar -iv SHAPESWeightsFolderCollapseState (`frameLayout -q -cl shpUI_weightsFrame`)"
                -cc "optionVar -iv SHAPESWeightsFolderCollapseState (`frameLayout -q -cl shpUI_weightsFrame`)"
                shpUI_weightsFrame;

    shapesUI_showWeightsUI;

    setParent $mainLayout;

    //-------------------
    // region frame
    //-------------------

    $value = `optionVar -q SHAPESRegionFolderCollapseState`;
    $manage = `optionVar -q SHAPESShowUIRegion`;
    frameLayout -l "Region Map"
                -li 3
                -cll 1
                -cl $value
                -mw 5
                -mh 5
                -m $manage
                -ec "optionVar -iv SHAPESRegionFolderCollapseState (`frameLayout -q -cl shpUI_regionFrame`)"
                -cc "optionVar -iv SHAPESRegionFolderCollapseState (`frameLayout -q -cl shpUI_regionFrame`)"
                shpUI_regionFrame;

    shapesUI_showRegionUI;

    setParent $mainLayout;

    //-------------------
    // animation frame
    //-------------------

    $value = `optionVar -q SHAPESAnimationFolderCollapseState`;
    $manage = `optionVar -q SHAPESShowUIAnimation`;
    frameLayout -l "Animation"
                -li 3
                -cll 1
                -cl $value
                -mw 5
                -mh 5
                -m $manage
                -ec "shapesUI_selectNode blendShape {} \"\" \"\"; optionVar -iv SHAPESAnimationFolderCollapseState (`frameLayout -q -cl shpUI_animationFrame`);"
                -cc "optionVar -iv SHAPESAnimationFolderCollapseState (`frameLayout -q -cl shpUI_animationFrame`)"
                shpUI_animationFrame;

    shapesUI_showAnimationUI;

    setParent $mainLayout;

    //-------------------
    // weight driver frame
    //-------------------

    $value = `optionVar -q SHAPESShapeDriverCollapseState`;
    $manage = `optionVar -q SHAPESShowUIDriver`;
    frameLayout -l "Shape Driver"
                -li 3
                -cll 1
                -cl $value
                -mw 5
                -mh 5
                -m $manage
                -ec "shapesUI_focusOnSelectedItem 1 shpUI_targetTree {\"\"}; optionVar -iv SHAPESShapeDriverCollapseState (`frameLayout -q -cl shpUI_driverFrame`);"
                -cc "optionVar -iv SHAPESShapeDriverCollapseState (`frameLayout -q -cl shpUI_driverFrame`)"
                shpUI_driverFrame;

        $value = `optionVar -q SHAPESShapeDriverListCollapseState`;
        frameLayout -l "Driver List"
            -li 3
            -cll 1
            -cl $value
            -mw 5
            -mh 5
            -ec "optionVar -iv SHAPESShapeDriverListCollapseState (`frameLayout -q -cl shpUI_driverListFrame`);"
            -cc "optionVar -iv SHAPESShapeDriverListCollapseState (`frameLayout -q -cl shpUI_driverListFrame`)"
            shpUI_driverListFrame;

            // sort & search
            string $driverForm = `formLayout`;
                $value = `optionVar -q SHAPESSortJointList`;
                checkBox -label "Sort"
                         -width 64
                         -value $value
                         -changeCommand "optionVar -iv SHAPESSortJointList #1; shapesMain_listSkinClusterJoints"
                         -annotation "Sort the driver list in alphabetical order"
                         shpUI_alphaCheck;
                textFieldGrp -label ""
                             -annotation "Enter search string. Use + for combinations."
                             -placeholderText "Enter search string. Use + for combinations."
                             -columnWidth2 0 157
                             -columnAttach2 "left" "right"
                             -columnOffset2 0 0
                             -adjustableColumn2 2
                             shpUI_driverSearchField;
                string $clearButtonDriver = `iconTextButton
                                             -width 20
                                             -height 25
                                             -image "SHAPES_clear.png"
                                             -annotation "Clear search"
                                             -command "shapesUI_clearSearch driver"`;

                textFieldGrp -e -tcc "shapesUI_searchJointString driver" shpUI_driverSearchField;

                formLayout  -e

                            -af shpUI_alphaCheck "top" 0
                            -af shpUI_alphaCheck "bottom" 0
                            -af shpUI_alphaCheck "left" 1
                            -af $clearButtonDriver "right" 5

                            -ac shpUI_driverSearchField "left" 0 shpUI_alphaCheck
                            -ac shpUI_driverSearchField "right" 0 $clearButtonDriver

                            $driverForm;
            setParent ..;

            // driver list
            string $driverTreeForm = `formLayout`;
                $value = `optionVar -q SHAPESDriverTreeSize`;
                treeView    -nb 1
                            -p $driverTreeForm
                            -h $value
                            -abr 0
                            -adr 1
                            -arp 1
                            -dad shapesList_driverListDragHandle
                            -ecc shapesList_storeDriverList
                            -scc "shapesUI_setDriverNodeFromListSelection"
                            -idc "shapesUI_selectNode driver {} \"\""
                            shpUI_driverTree;
                popupMenu;
                    menuItem -l "Select From Scene" -c "shapesUI_getNodeFromScene";
                    menuItem -l "Deselect" -c "shapesUI_clearListSelection shpUI_driverTree driver";
                    menuItem -l "Rename Group" -c shapesList_renameDriverGroup;
                    menuItem -d 1;
                    menuItem -l "Remove From List" -c "shapesList_removeCustomDriver";

                string $groupButton = `iconTextButton -w 22 -h 25 -i "SHAPES_addGroup.png" -c "shapesList_storeCustomDriver \"\" 1" -ann "Add Group"`;
                string $shrinkButtonDriver = `iconTextButton -w 22 -h 25 -i "SHAPES_listRetract.png" -c "shapesUI_resizeScrollList 0 joint" -ann "Shrink driver list"`;
                listResizePopupMenu("shpUI_driverTree");
                string $growButtonDriver = `iconTextButton -w 22 -h 25 -i "SHAPES_listExpand.png" -c "shapesUI_resizeScrollList 1 joint" -ann "Grow driver list"`;
                listResizePopupMenu("shpUI_driverTree");

                formLayout  -e

                            -af shpUI_driverTree "top" 0
                            -af shpUI_driverTree "left" 0
                            -af shpUI_driverTree "bottom" 0
                            -af $groupButton "top" 0
                            -af $groupButton "right" 5
                            -af $shrinkButtonDriver "right" 5
                            -af $growButtonDriver "right" 5

                            -ac shpUI_driverTree "right" 3 $groupButton
                            -ac $shrinkButtonDriver "top" 3 $groupButton
                            -ac $growButtonDriver "top" 3 $shrinkButtonDriver

                            $driverTreeForm;

            setParent ..;

        setParent ..;

        string $driverOptionForm = `formLayout shpUI_shapeDriverOptionForm`;
            string $labelDriver = `text -l "Driver" -al "left" -w 69`;
            textField -placeholderText "Select driver from list or get from scene"
                      -changeCommand "shapesUI_driverNodeNameEntered"
                      shpUI_driverNodeField;
            popupMenu;
                menuItem -l "Set Current Blend Shape Node" -command "shapesUI_setCurrentBlendShape";
                menuItem -d 1;
                menuItem -l "Select In List" -command "shapesUI_selectDriverInList";
                menuItem -l "Select In Scene" -command "shapesUI_selectDriverInScene";
                menuItem -d 1;
                menuItem -l "Clear" -command "shapesUI_clearDriverField";
            string $selectButtonDriver = `iconTextButton -w 26 -h 25 -i "SHAPES_select.png" -ann "Select from scene" -c "shapesUI_getNodeFromScene"`;
            string $labelType = `text -l "Driver Type" -al "left" -w 69`;
            optionMenu -cc ("shapesUI_switchDriverUI; shapesUI_autoFillDriverFields;") shpUI_shapeDriverOption;
                menuItem -l "None";
            text -en 0 -l "Solver" -al "left" -w 69 shpUI_solverNodeLabel;
            optionMenu -en 0 -cc shapesUI_solverNodeOptionToggle shpUI_solverNodeOption;
                menuItem -l "New";
            popupMenu;
                menuItem -l "Select Solver" -c "select -r (shapesUI_getSelectedNodeOption())";
                menuItem -d 1;
                menuItem -l "Toggle State" -c "shapesUI_toggleRbfSolver active";
                menuItem -l "Toggle Display" -c "shapesUI_toggleRbfSolver visibility";
            $separator = `separator -style "none"`;

            formLayout  -e

                        -af $labelDriver "top" 3
                        -af $labelDriver "left" 0
                        -af shpUI_driverNodeField "top" 1
                        -af $selectButtonDriver "top" 0
                        -af $selectButtonDriver "right" 5
                        -af $labelType "left" 0
                        -af shpUI_shapeDriverOption "right" 34
                        -af shpUI_solverNodeLabel "left" 0
                        -af shpUI_solverNodeOption "right" 34
                        -af $separator "left" 0

                        -ac shpUI_driverNodeField "left" 4 $labelDriver
                        -ac shpUI_driverNodeField "right" 2 $selectButtonDriver
                        -ac $labelType "top" 12 $labelDriver
                        -ac shpUI_shapeDriverOption "top" 5 shpUI_driverNodeField
                        -ac shpUI_shapeDriverOption "left" 3 $labelType
                        -ac shpUI_solverNodeLabel "top" 12 $labelType
                        -ac shpUI_solverNodeOption "top" 5 shpUI_shapeDriverOption
                        -ac shpUI_solverNodeOption "left" 3 shpUI_solverNodeLabel
                        -ac $separator "top" 8 shpUI_solverNodeOption

                        $driverOptionForm;

            setParent ..;

            frameLayout -l "Driver Attributes" -li 3 -cll 0;
            setParent ..;

            shapesUI_buildShapeDriverOptionMenu;

            columnLayout -adj 1 shpUI_driverSettingsColumn;
            setParent ..;

            columnLayout -adj 1 shpUI_weightsServerSettingsColumn;
            setParent ..;

        setParent ..;

    setParent $mainForm;

    string $closeButton = `button -l "Close" -c shapesUI_removeUI`;

    formLayout  -e

                -af shpUI_showUILayout "top" 0
                -af shpUI_showUILayout "left" 0
                -af $mainLayout "left" 0
                -af $mainLayout "right" 0
                -af $closeButton "left" 0
                -af $closeButton "right" 0
                -af $closeButton "bottom" 2

                -ac $mainLayout "top" 0 shpUI_showUILayout
                -ac $mainLayout "bottom" 10 $closeButton

                $mainForm;

    //-------------------
    // initialize the ui
    //-------------------

    shapesMain_refreshBlendShapeMenu {"None"};
    shapesUI_switchDriverUI;
    // set the sculpt button label based on the sculpting preference
    shapesUI_toggleSculptButtonLabel;
}


global proc shapesUI_removeUI()
{
    deleteUI SHAPESWorkspaceControl;

    shapesJob_initializeUIScriptJob 0;
    shapesJob_initializeUndoScriptJob 0;
    // remove the slider script job
    shapesJob_createScriptJob "" 0;
}


global proc int shapesUI_workspaceControlExists()
{
    return eval("workspaceControl -ex SHAPESWorkspaceControl");
}


// ------------------------------------------------------------------------------------------------
// additional ui
// ------------------------------------------------------------------------------------------------

global proc shapesUI_openAbout()
{
    //
    // open the about window
    //
    global string $gShapes_creator;
    global string $gShapes_copyright;
    global string $gShapes_version;

    source SHAPES_global;
    shapesGlobal_loadPlugin;

    if (`window -ex SHAPESAboutWin`)
        deleteUI SHAPESAboutWin;

    if (`windowPref -ex SHAPESAboutWin`)
        windowPref -r SHAPESAboutWin;

    window -t "About SHAPES" -w 220 -h 360 SHAPESAboutWin;

    string $items[] = stringToStringArray($gShapes_version, " ");
    string $lineBreak = "";
    string $evalString = "";
    if (!`br_lm -ex`)
    {
        $lineBreak = "\n";
        $evalString = " Evaluation (non-commercial)";
    }
    $items[size($items) - 2] = $items[size($items) - 2] + $evalString + $lineBreak;
    string $versionString = stringArrayToString($items, " ");

    columnLayout -adj 1;
    separator -style "none" -h 15;
    rowColumnLayout -nc 2;
    separator -style "none" -w 60;
    image -i "SHAPES.svg";
    setParent ..;
    separator -style "none" -h 15;
    text -l "SHAPES" -fn "boldLabelFont";
    separator -style "none" -h 5;
    text -l "Blend Shape Editor";
    separator -style "none" -h 15;
    text -l $versionString;
    separator -style "none" -h 15;
    text -l "Plug-Ins:";
    text -l ("SHAPESTools  " + (`pluginInfo -q -v SHAPESTools`));
    text -l ("SHAPESBrush  " + (`pluginInfo -q -v SHAPESBrush`));
    text -l ("rampWeights  " + (`pluginInfo -q -v rampWeights`));
    text -l ("weightDriver  " + (`pluginInfo -q -v weightDriver`));
    text -l ("weightsServer  " + (`pluginInfo -q -v weightsServer`));
    separator -style "none" -h 15;
    text -l ("Creator: " + $gShapes_creator);
    separator -style "none" -h 5;
    text -l ("(c) " + $gShapes_copyright);
    setParent ..;

    showWindow SHAPESAboutWin;
}


global proc shapesUI_buildLoadInfoUI()
{
    //
    // opens the info window for loading a mesh
    //
    if (`window -ex SHAPESLoadInfoWin`)
        deleteUI SHAPESLoadInfoWin;

    if (`windowPref -ex SHAPESLoadInfoWin`)
        windowPref -r SHAPESLoadInfoWin;

    window -t "Loading Guide" -w 500 -h 100 SHAPESLoadInfoWin;

    string $form = `formLayout`;

        string $generalLayout = `rowColumnLayout -co 1 "left" 5`;
            columnLayout -cal "left";
                separator -style "none" -h 5;
                text -l (uiRes("m_SHAPES_ui.kLoadGuide1")) -al "left";
        setParent $form;

        string $info =  (uiRes("m_SHAPES_ui.kLoadGuideMesh1")) +
                        (uiRes("m_SHAPES_ui.kLoadGuideMesh2")) +
                        (uiRes("m_SHAPES_ui.kLoadGuideMesh3")) +
                        (uiRes("m_SHAPES_ui.kLoadGuideMesh4"));
        string $objectLayout = `frameLayout -l "Mesh Selection" -cll 0 -cl 0 -mw 5 -mh 5`;
            rowLayout -nc 2 -ct2 "left" "left" -co2 0 15;
                image -i "SHAPES_selectionObject.png" -w 64 -h 64;
                text -l $info -al "left";
        setParent $form;

        $info = (uiRes("m_SHAPES_ui.kLoadGuideEdge1")) +
                (uiRes("m_SHAPES_ui.kLoadGuideEdge2"));
        string $edgeLayout = `frameLayout -l "Edge Selection" -cll 0 -cl 0 -mw 5 -mh 5`;
            rowLayout -nc 2 -ct2 "left" "left" -co2 0 15;
                image -i "SHAPES_selectionEdge.png" -w 64 -h 64;
                text -l $info -al "left";
        setParent $form;

        string $statusLayout = `frameLayout -l "Symmetry Status" -cll 0 -cl 0 -mw 5 -mh 5`;
            columnLayout -cal "left";
                separator -style "none" -h 5;
                text -l (uiRes("m_SHAPES_ui.kLoadGuide2")) -al "left";
            setParent ..;

            rowLayout -nc 2 -ct2 "left" "left" -co2 0 15;
                image -i "SHAPES_symmetry.png";
                text -l (uiRes("m_SHAPES_ui.kLoadGuideState1")) -al "left";
            setParent ..;

            rowLayout -nc 2 -ct2 "left" "left" -co2 0 15;
                image -i "SHAPES_symmetryPartial.png";
                text -l (uiRes("m_SHAPES_ui.kLoadGuideState2")) -al "left";
            setParent ..;

            rowLayout -nc 2 -ct2 "left" "left" -co2 0 15;
                image -i "SHAPES_symmetryOff.png";
                text -l (uiRes("m_SHAPES_ui.kLoadGuideState3")) -al "left";
            setParent ..;
        setParent $form;

        string $checkBoxLayout = `rowColumnLayout -co 1 "left" 5`;
            columnLayout -cal "left";
                checkBox -l "Hide this window when loading a mesh" -v (`optionVar -q SHAPESSkipLoadMeshDialog`) -cc "optionVar -iv SHAPESSkipLoadMeshDialog #1";
                separator -style "none" -h 5;
                text -l "(To display this window again uncheck the preference setting\nor right-click the Load Mesh button.)" -al "left" -fn "obliqueLabelFont";
        setParent $form;

        int $spacer = 10;

        string $separator = `separator -style "none"`;

        string $execute;
        $execute = `button -l "Load Mesh" -h 30 -c "deleteUI SHAPESLoadInfoWin; shapesMain_getMeshSelection 1;"`;
        setParent $form;

        formLayout  -e

                    -af $generalLayout "top" 3
                    -af $generalLayout "left" 3
                    -af $generalLayout "right" 3
                    -af $objectLayout "left" 3
                    -af $objectLayout "right" 3
                    -af $edgeLayout "left" 3
                    -af $edgeLayout "right" 3
                    -af $statusLayout "left" 3
                    -af $statusLayout "right" 3
                    -af $checkBoxLayout "left" 3
                    -af $execute "bottom" 3
                    -af $execute "left" 3
                    -af $execute "right" 3

                    -ac $objectLayout "top" $spacer $generalLayout
                    -ac $edgeLayout "top" $spacer $objectLayout
                    -ac $statusLayout "top" ($spacer + $spacer) $edgeLayout
                    -ac $checkBoxLayout "top" $spacer $statusLayout
                    -ac $separator "top" 15 $checkBoxLayout

                    $form;

    showWindow SHAPESLoadInfoWin;
}


// ------------------------------------------------------------------------------------------------
// ui preferences UI
// ------------------------------------------------------------------------------------------------

global proc shapesUI_buildPreferencesUI()
{
    //
    // opens the window for setting which parts of the ui should be displayed
    //
    source SHAPESSetupHotkey;

    // get the external sculpt app info
    // retrieve the information before building the window because menu commands are used
    // and these can interfere with building the window, setting the wrong ui parent
    int $sculptApp[] = shapesGlobal_getSculptApp();

    if (`window -ex SHAPESPrefsWin`)
        deleteUI SHAPESPrefsWin;

    window -t "Preferences" -w 503 -h 840 -mb 1 SHAPESPrefsWin;

    menu -l "Edit";
        menuItem -l "Reset Preferences..." -c shapesGlobal_resetEnvDefaults;

    int $colWidth1 = 10;
    int $colWidth2 = 5;
    float $value;
    string $ann;

    string $form = `formLayout`;
        string $tabs = `tabLayout`;
        tabLayout -e -bs "none" $tabs;
        tabLayout -e -cc ("optionVar -iv SHAPESPreferencesSelectedTab (`tabLayout -q -sti " + $tabs + "`)") $tabs;
        setParent ..;
        string $closeBtn = `button -l "Close" -c "deleteUI SHAPESPrefsWin"`;
    setParent ..;

    formLayout  -e

                -af $tabs "top" 5
                -af $tabs "left" 5
                -af $tabs "right" 5
                -af $closeBtn "left" 5
                -af $closeBtn "right" 5
                -af $closeBtn "bottom" 5

                -ac $tabs "bottom" 10 $closeBtn

                $form;

    setParent $tabs;

    string $globalFrame = `columnLayout -adj 1`;
        frameLayout -l "General" -cll 0 -cl 0 -mw 5 -mh 5;
            rowColumnLayout -nc 2 -co 1 "right" $colWidth2 -rs 1 5;
                $value = `optionVar -q SHAPESSkipLoadMeshDialog`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESSkipLoadMeshDialog #1;") -ann (uiRes("m_SHAPES_ui.kSkipLoadMeshDialog"));
                text -l "Hide Dialog For Mesh Loading" -al "left" -ann (uiRes("m_SHAPES_ui.kSkipLoadMeshDialog"));
                $value = `optionVar -q SHAPESHidePaintWeightsToolSettings`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESHidePaintWeightsToolSettings #1;") -ann (uiRes("m_SHAPES_ui.kHidePaintWeightsToolSettings"));
                text -l "Hide Paint Weights Tool Settings" -al "left" -ann (uiRes("m_SHAPES_ui.kHidePaintWeightsToolSettings"));
                $value = `optionVar -q SHAPESModifyUndoState`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESModifyUndoState #1;") -ann (uiRes("m_SHAPES_ui.kModifyUndoState"));
                text -l "Modifiy Undo State" -al "left" -ann (uiRes("m_SHAPES_ui.kModifyUndoState"));
            setParent ..;

            separator -st "in";

            rowColumnLayout -nc 2 -cw 1 135 shpUI_fileTypeLayout;
                text -l "File Type" -al "left" -ann (uiRes("m_SHAPES_ui.kFileType"));
                $value = `optionVar -q SHAPESFileType` + 1;
                optionMenu -l "" -ann (uiRes("m_SHAPES_ui.kFileType")) shpUI_fileTypeOption;
                    menuItem -l "Simple";
                    menuItem -l "JSON";
                optionMenu -e -sl $value -cc "optionVar -iv SHAPESFileType (`optionMenu -q -sl shpUI_fileTypeOption` - 1); shapesUI_refreshFileLists;" shpUI_fileTypeOption;
            setParent ..;

            rowColumnLayout -nc 2 -co 1 "right" $colWidth2 -rs 1 5;
                $value = `optionVar -q SHAPESUseCustomDataPath`;
                checkBox -l "" -v $value -ann (uiRes("m_SHAPES_ui.kUseCustomDataPath")) shpUI_useCustomDataPathCheck;
                text -l "Use Custom Data Path" -al "left" -ann (uiRes("m_SHAPES_ui.kUseCustomDataPath"));
            setParent ..;

            string $pathForm = `formLayout -en $value`;
                string $stringValue = `optionVar -q SHAPESCustomDataPath`;
                if ($stringValue == "0")
                    $stringValue = "";
                string $pathLabel = `text -l "Path" -w 40 -al "left" -ann (uiRes("m_SHAPES_ui.kAutoListJoints"))`;
                textField -w 100 -tx $stringValue -ann (uiRes("m_SHAPES_ui.kAutoListJoints")) shpUI_dataPathField;
                button -l "Select" -w 46 -c ("shapesUI_selectDataPath \"" + $stringValue + "\"") shpUI_dataPathSelectButton;
                formLayout  -e

                            -af $pathLabel "top" 0
                            -af $pathLabel "bottom" 0
                            -af $pathLabel "left" 1
                            -af shpUI_dataPathField "top" 1
                            -af shpUI_dataPathSelectButton "top" 0
                            -af shpUI_dataPathSelectButton "right" 5

                            -ac shpUI_dataPathField "left" 5 $pathLabel
                            -ac shpUI_dataPathField "right" 7 shpUI_dataPathSelectButton

                            $pathForm;
            setParent ..;
            checkBox -e -cc ("optionVar -iv SHAPESUseCustomDataPath #1; formLayout -e -en (`optionVar -q SHAPESUseCustomDataPath`) " + $pathForm + ";") shpUI_useCustomDataPathCheck;

        setParent ..;

        frameLayout -l "Mesh Selection" -cll 0 -cl 0 -mw 5 -mh 5;
            rowColumnLayout -nc 2 -co 1 "right" $colWidth2 -rs 1 5;
                $value = `optionVar -q SHAPESAutoListJoints`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESAutoListJoints #1") -ann (uiRes("m_SHAPES_ui.kAutoListJoints"));
                text -l "Auto List Joints On Load" -al "left" -ann (uiRes("m_SHAPES_ui.kAutoListJoints"));

                $value = `optionVar -q SHAPESShowMeshRelatedJoints`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESShowMeshRelatedJoints #1; shapesMain_listSkinClusterJoints;") -ann (uiRes("m_SHAPES_ui.kShowMeshRelatedJoints"));
                text -l "Identify Mesh Related Skin Joints" -al "left" -ann (uiRes("m_SHAPES_ui.kShowMeshRelatedJoints"));
            setParent ..;
        setParent ..;

        frameLayout -l "Target List" -cll 0 -cl 0 -mw 5 -mh 5;
            rowColumnLayout -nc 2 -co 1 "right" $colWidth2 -rs 1 5;
                $value = `optionVar -q SHAPESConfirmDeleteTarget`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESConfirmDeleteTarget #1") -ann (uiRes("m_SHAPES_ui.kConfirmDeleteTarget"));
                text -l "Confirm Delete" -al "left" -ann (uiRes("m_SHAPES_ui.kConfirmDeleteTarget"));
            setParent ..;
        setParent ..;

        frameLayout -l "Shape Weights" -cll 0 -cl 0 -mw 5 -mh 5;
            rowColumnLayout -nc 2 -cw 1 135 shpUI_baseWeightsWarningLayout;
                text -l "Base Weights Warning" -al "left" -ann (uiRes("m_SHAPES_ui.kBaseWeightsWarning"));
                $value = `optionVar -q SHAPESBaseWeightsWarning` + 1;
                optionMenu -l "" -ann (uiRes("m_SHAPES_ui.kBaseWeightsWarning")) shpUI_baseWeightsWarningOption;
                    menuItem -l "Never";
                    menuItem -l "On Mesh Load";
                    menuItem -l "Always";
                optionMenu -e -sl $value -cc "optionVar -iv SHAPESBaseWeightsWarning (`optionMenu -q -sl shpUI_baseWeightsWarningOption` - 1)" shpUI_baseWeightsWarningOption;
            setParent ..;

            rowColumnLayout -nc 2 -co 1 "right" $colWidth2 -rs 1 5;
                $value = `optionVar -q SHAPESUseWeightsPaintReplaceMode`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESUseWeightsPaintReplaceMode #1") -ann (uiRes("m_SHAPES_ui.kUseWeightsPaintReplaceMode"));
                text -l "Default To Replace Mode" -al "left" -ann (uiRes("m_SHAPES_ui.kUseWeightsPaintReplaceMode"));
            setParent ..;
        setParent ..;

        frameLayout -l "Shape Driver" -cll 0 -cl 0 -mw 5 -mh 5;
            rowColumnLayout -nc 2 -co 1 "right" $colWidth2 -rs 1 5;
                $value = `optionVar -q SHAPESAutoAddShapeDriver`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESAutoAddShapeDriver #1") -ann (uiRes("m_SHAPES_ui.kAutoAddShapeDriver"));
                text -l "Auto Add Shape Driver" -al "left" -ann (uiRes("m_SHAPES_ui.kAutoAddShapeDriver"));

                $value = `optionVar -q SHAPESIgnoreZeroChannels`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESIgnoreZeroChannels #1") -ann (uiRes("m_SHAPES_ui.kIgnoreZeroChannels"));
                text -l "Ignore Zero Attributes" -al "left" -ann (uiRes("m_SHAPES_ui.kIgnoreZeroChannels"));
            setParent ..;

            separator -st "in";

            rowColumnLayout -nc 2 -cw 1 135 shpUI_defaultPoseModeLayout;
                text -l "RBF Default Mode" -al "left" -ann (uiRes("m_SHAPES_ui.kDefaultPoseMode"));
                $value = `optionVar -q SHAPESDefaultPoseMode` + 1;
                optionMenu -l "" -ann (uiRes("m_SHAPES_ui.kDefaultPoseMode")) shpUI_defaultPoseModeOption;
                    menuItem -l "Rotate/Twist";
                    menuItem -l "Rotate";
                    menuItem -l "Twist";
                optionMenu -e -sl $value -cc "optionVar -iv SHAPESDefaultPoseMode (`optionMenu -q -sl shpUI_defaultPoseModeOption` - 1)" shpUI_defaultPoseModeOption;
            setParent ..;

            rowColumnLayout -nc 2 -co 1 "right" $colWidth2 -rs 1 5;
                $value = `optionVar -q SHAPESPoseModeFromSelected`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESPoseModeFromSelected #1") -ann (uiRes("m_SHAPES_ui.kPoseModeFromSelected"));
                text -l "Get RBF Mode From Selected Target" -al "left" -ann (uiRes("m_SHAPES_ui.kPoseModeFromSelected"));
            setParent ..;
        setParent ..;

        frameLayout -l "Driven Set" -cll 0 -cl 0 -mw 5 -mh 5;
            rowColumnLayout -nc 2 -co 1 "right" $colWidth2 -rs 1 5;
                $value =`optionVar -q SHAPESHideSetMemberRenameMessage`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESHideSetMemberRenameMessage #1") -ann (uiRes("m_SHAPES_ui.kHideSetMemberRenameMessage"));
                text -l "Hide Set Member Rename Message" -al "left" -ann (uiRes("m_SHAPES_ui.kHideSetMemberRenameMessage"));

                $value = `optionVar -q SHAPESLockNonDrivenSetAttributes`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESLockNonDrivenSetAttributes #1") -ann (uiRes("m_SHAPES_ui.kLockNonDrivenSetAttributes"));
                text -l "Lock Non Driven Set Attributes" -al "left" -ann (uiRes("m_SHAPES_ui.kLockNonDrivenSetAttributes"));
            setParent ..;
        setParent ..;

        frameLayout -l "Region Map" -cll 0 -cl 0 -mw 5 -mh 5;
            columnLayout -adj 1;
                textFieldGrp -l "Label" -ad2 2 -cw2 40 100 -cl2 "left" "left" -ct2 "left" "both" -co2 5 0 -cc shapesUI_setRegionLabelsPrefs shpUI_regionLabelsField;
            setParent ..;
            rowColumnLayout -nc 1;
                button -l "Default" -w 60 -h 25 -c shapesUI_resetRegionLabelPrefs;
            setParent ..;
            shapesUI_listUserRegionLabels;

            separator -st "in";

            rowColumnLayout -nc 2 -co 1 "right" $colWidth2 -rs 1 5;
                $value = `optionVar -q SHAPESDistributePartialRegionWeights`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESDistributePartialRegionWeights #1") -ann (uiRes("m_SHAPES_ui.kDistributePartial"));
                text -l "Distribute Free Weights" -al "left" -ann (uiRes("m_SHAPES_ui.kDistributePartial"));
                $value = `optionVar -q SHAPESColorDisplayPartialWeights`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESColorDisplayPartialWeights #1; iconTextButton -e -i (\"SHAPES_regionPartials\" + #1 + \".png\") shpUI_regionShowPartials;") -ann (uiRes("m_SHAPES_ui.kColorDisplayPartialWeights"));
                text -l "Partial Weights Use Color Ramp" -al "left" -ann (uiRes("m_SHAPES_ui.kColorDisplayPartialWeights"));
            setParent ..;
        setParent ..;

        frameLayout -l "Split Shape" -cll 0 -cl 0 -mw 5 -mh 5;
            columnLayout -adj 1;
                textFieldGrp -l "Left Identifier" -cw2 135 30 -cl2 "left" "left" -ct2 "left" "left" -co2 5 0 -cc shapesUI_setSplitShapeIdentifierPrefs -ann (uiRes("m_SHAPES_ui.kSplitShapeIdentifier")) shpUI_splitShapeIdentifierLeftField;
                textFieldGrp -l "Right Identifier" -cw2 135 30 -cl2 "left" "left" -ct2 "left" "left" -co2 5 0 -cc shapesUI_setSplitShapeIdentifierPrefs -ann (uiRes("m_SHAPES_ui.kSplitShapeIdentifier")) shpUI_splitShapeIdentifierRightField;
            setParent ..;
            shapesUI_listSplitShapeIdentifier;
        setParent ..;

    setParent $tabs;

    string $sculptFrame = `columnLayout -adj 1`;
        frameLayout -l "Edit Mode" -cll 0 -cl 0 -mw 5 -mh 5;
            rowColumnLayout -nc 2 -co 1 "right" $colWidth2 -rs 1 5;
                $value = `optionVar -q SHAPESAutoEnableSculpt`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESAutoEnableSculpt #1") -ann (uiRes("m_SHAPES_ui.kAutoEnableSculpt"));
                text -l "Auto Enable Brush" -al "left" -ann (uiRes("m_SHAPES_ui.kAutoEnableSculpt"));

                separator -st "none";
                $value = `optionVar -q SHAPESBrushDefaultType` + 1;
                optionMenu -l "" -cc shapesUI_switchBrushDefaultType -ann (uiRes("m_SHAPES_ui.kBrushDefaultType")) shpUI_brushDefaultTypeOption;
                    menuItem -l "Grab And Slide";
                    menuItem -l "Grab And Pull";
                    menuItem -l "Grab And Twist";
                    menuItem -l "Grab And Blend";
                    menuItem -l "Grab And Erase";
                    menuItem -l "Paint Freeze";
                    menuItem -l "Erase Freeze";
                optionMenu -e -sl $value shpUI_brushDefaultTypeOption;

                int $useToolValue = `optionVar -q SHAPESUseMayaSculptTool`;
                checkBox -l "" -v $useToolValue -ann (uiRes("m_SHAPES_ui.kUseMayaSculptTool")) shpUI_useMayaSculptToolCheck;
                text -l "Use Maya Sculpt Tool" -al "left" -ann (uiRes("m_SHAPES_ui.kUseMayaSculptTool"));

                separator -st "none";
                $value = `optionVar -q SHAPESMayaSculptTool`;
                optionMenu -l "" -cc shapesUI_switchDefaultSculptTool -en $useToolValue -ann (uiRes("m_SHAPES_ui.kMayaSculptTool")) shpUI_defaultSculptToolOption;
                    menuItem -l "Sculpt Tool";
                    menuItem -l "Smooth Tool";
                    menuItem -l "Relax Tool";
                    menuItem -l "Grab Tool";
                    menuItem -l "Pinch Tool";
                    menuItem -l "Flatten Tool";
                    menuItem -l "Foamy Tool";
                    menuItem -l "Spray Tool";
                    menuItem -l "Repeat Tool";
                    menuItem -l "Imprint Tool";
                    menuItem -l "Wax Tool";
                    menuItem -l "Scrape Tool";
                    menuItem -l "Fill Tool";
                    menuItem -l "Knife Tool";
                    menuItem -l "Smear Tool";
                    menuItem -l "Bulge Tool";
                    menuItem -l "Amplify Tool";
                    menuItem -l "Freeze Tool";
                optionMenu -e -sl $value shpUI_defaultSculptToolOption;
                checkBox -e -cc ("optionVar -iv SHAPESUseMayaSculptTool #1; optionMenu -e -en `optionVar -q SHAPESUseMayaSculptTool` shpUI_defaultSculptToolOption; shapesUI_toggleMeshConnectionCheckBoxState;") shpUI_useMayaSculptToolCheck;

                $value = `optionVar -q SHAPESEnableHUD`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESEnableHUD #1") -ann (uiRes("m_SHAPES_ui.kEnableHUD"));
                text -l "Show HUD Buttons" -al "left" -ann (uiRes("m_SHAPES_ui.kEnableHUD"));

                $value = `optionVar -q SHAPESShowSculptFrame`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESShowSculptFrame #1") -ann (uiRes("m_SHAPES_ui.kShowSculptFrame"));
                text -l "Show Frame" -al "left" -ann (uiRes("m_SHAPES_ui.kShowSculptFrame"));

                $value = `optionVar -q SHAPESUseDefaultMaterial`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESUseDefaultMaterial #1") -ann (uiRes("m_SHAPES_ui.kUseDefaultMaterial"));
                text -l "Use Default Material" -al "left" -ann (uiRes("m_SHAPES_ui.kUseDefaultMaterial"));

                $value = `optionVar -q SHAPESSculptIsolation`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESSculptIsolation #1") -ann (uiRes("m_SHAPES_ui.kSculptIsolation"));
                text -l "Isolated Sculpt Mode" -al "left" -ann (uiRes("m_SHAPES_ui.kSculptIsolation"));

                $value = `optionVar -q SHAPESConnectToDeformation`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESConnectToDeformation #1") -ann (uiRes("m_SHAPES_ui.kConnectToDeformation")) shpUI_connectToDeformationCheck;
                text -l "Connect To Deformed Mesh" -al "left" -ann (uiRes("m_SHAPES_ui.kConnectToDeformation")) shpUI_connectToDeformationLabel;
                shapesUI_toggleMeshConnectionCheckBoxState;

                $value = `optionVar -q SHAPESEnterEditUndoClear`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESEnterEditUndoClear #1") -ann (uiRes("m_SHAPES_ui.kEnterEditUndoClear"));
                text -l "Entering Edit Mode Clears Undo" -al "left" -ann (uiRes("m_SHAPES_ui.kEnterEditUndoClear"));

                $value = `optionVar -q SHAPESIgnoreBrushHistoryWarning`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESIgnoreBrushHistoryWarning #1") -ann (uiRes("m_SHAPES_ui.kIgnoreBrushHistoryWarning"));
                text -l "Ignore Freeze Brush History Warning" -al "left" -ann (uiRes("m_SHAPES_ui.kIgnoreBrushHistoryWarning"));
            setParent ..;

            rowColumnLayout -nc 6 -cw 1 135;
                text -l "Brush Hotkey" -al "left";
                button -l "Set" -w 60 -c "SHAPESSetupHotkey brush";
                separator -st "none" -w 10;
                button -l "Remove" -w 60 -c "SHAPESDeleteHotkey brush";
                separator -st "none" -w 15;
                text -l "Current: None" shpUI_currentBrushHotkeyLabel;
                shapesUI_updateHotkeyInfo "brush";
            setParent ..;
        setParent ..;

        frameLayout -l "Sculpt Compare" -cll 0 -cl 0 -mw 5 -mh 5;
            rowColumnLayout -nc 2 -co 1 "right" $colWidth2 -rs 1 5;
                $value = `optionVar -q SHAPESEnableSculptCompare`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESEnableSculptCompare #1") -ann (uiRes("m_SHAPES_ui.kEnableSculptCompare"));
                text -l "Enable Sculpt Compare (Ignored by Shot Fix)" -al "left" -ann (uiRes("m_SHAPES_ui.kEnableSculptCompare"));

                $value = `optionVar -q SHAPESSculptCompareLinearKeys`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESSculptCompareLinearKeys #1") -ann (uiRes("m_SHAPES_ui.kSculptCompareLinearKeys"));
                text -l "Sculpt Compare With Linear Keys (Ignored When Tweaking In-betweens)" -al "left" -ann (uiRes("m_SHAPES_ui.kSculptCompareLinearKeys"));

                $value = `optionVar -q SHAPESJumpToEditPose`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESJumpToEditPose #1") -ann (uiRes("m_SHAPES_ui.kJumpToEditPose"));
                text -l "Jump To Edit Pose" -al "left" -ann (uiRes("m_SHAPES_ui.kJumpToEditPose"));
            setParent ..;

            separator -st "in";

            rowLayout;
                $value = `optionVar -q SHAPESCompareDraggerToolStep`;
                floatSliderButtonGrp    -l "Compare Tool Step Size"
                                        -bl "Default"
                                        -f 1
                                        -v $value
                                        -min 0
                                        -max 1
                                        -pre 3
                                        -cw4 130 50 230 30
                                        -co4 0 0 5 0
                                        -ct4 "left" "right" "both" "left"
                                        -cc "optionVar -fv SHAPESCompareDraggerToolStep (`floatSliderGrp -q -v shpUI_sculptCompareStepSlider`)"
                                        -dc "optionVar -fv SHAPESCompareDraggerToolStep (`floatSliderGrp -q -v shpUI_sculptCompareStepSlider`)"
                                        -bc "optionVar -fv SHAPESCompareDraggerToolStep 0.1; floatSliderGrp -e -v 0.1 shpUI_sculptCompareStepSlider;"
                                        shpUI_sculptCompareStepSlider;
            setParent ..;

            separator -st "in";

            rowColumnLayout -nc 6 -cw 1 135;
                text -l "Compare Tool Hotkey" -al "left";
                button -l "Set" -w 60 -c "SHAPESSetupHotkey compare";
                separator -st "none" -w 10;
                button -l "Remove" -w 60 -c "SHAPESDeleteHotkey compare";
                separator -st "none" -w 15;
                text -l "Current: None" shpUI_currentCompareHotkeyLabel;
                shapesUI_updateHotkeyInfo "compare";
            setParent ..;
        setParent ..;

        frameLayout -l "Options" -cll 0 -cl 0 -mw 5 -mh 5;
            rowColumnLayout -nc 2 -co 1 "right" $colWidth2 -rs 1 5;
                $value = `optionVar -q SHAPESBlendToPreDeformation`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESBlendToPreDeformation #1") -ann (uiRes("m_SHAPES_ui.kBlendToPreDeformation"));
                text -l "Blend To Pre-Deformation" -al "left" -ann (uiRes("m_SHAPES_ui.kBlendToPreDeformation"));

                $value = `optionVar -q SHAPESTweakAutoMirrorOption`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESTweakAutoMirrorOption #1") -ann (uiRes("m_SHAPES_ui.kTweakAutoMirrorOption"));
                text -l "Tweak Auto Mirror" -al "left" -ann (uiRes("m_SHAPES_ui.kTweakAutoMirrorOption"));
            setParent ..;
        setParent ..;

        frameLayout -l "Application" -cll 0 -cl 0 -mw 5 -mh 5;

            columnLayout;
                radioCollection shpUI_exportRadioCollection;
                    radioButton -l "Sculpt In Maya" -cc ("optionVar -iv SHAPESExportMode 0; shapesUI_toggleSculptButtonLabel;") shpUI_exportRadio0;
                    radioButton -l "Sculpt In Mudbox" -en $sculptApp[0] -cc ("optionVar -iv SHAPESExportMode 1; shapesUI_toggleSculptButtonLabel;") shpUI_exportRadio1;
                    radioButton -l "Sculpt In ZBrush" -en $sculptApp[1] -cc ("optionVar -iv SHAPESExportMode 2; shapesUI_toggleSculptButtonLabel;") shpUI_exportRadio2;
                    radioButton -l "Export As FBX" -cc ("optionVar -iv SHAPESExportMode 3; shapesUI_toggleSculptButtonLabel;") shpUI_exportRadio3;
                    radioButton -l "Custom Export" -cc ("optionVar -iv SHAPESExportMode 4; shapesUI_toggleSculptButtonLabel;") shpUI_exportRadio4;

                int $radioValue = `optionVar -q SHAPESExportMode`;
                string $radioString = "shpUI_exportRadio" + $radioValue;
                radioCollection -e -sl $radioString shpUI_exportRadioCollection;
            setParent ..;

            separator -st "in";

            rowColumnLayout -nc 2 -co 1 "right" $colWidth2 -rs 1 5;
                $value = `optionVar -q SHAPESAutoApplyCorrectiveShape`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESAutoApplyCorrectiveShape #1") -ann (uiRes("m_SHAPES_ui.kAutoApplyCorrectiveShape"));
                text -l "Auto Apply Shape (Mudbox/ZBrush)" -al "left" -ann (uiRes("m_SHAPES_ui.kAutoApplyCorrectiveShape"));
            setParent ..;
        setParent ..;

    setParent $tabs;

    string $mirrorFrame = `columnLayout -adj 1`;
        frameLayout -l "Mirror Settings" -cll 0 -cl 0 -mw 5 -mh 5;
            rowLayout;
                $value = `optionVar -q SHAPESMirrorToleranceValue`;
                floatSliderButtonGrp    -l "Mirror Tolerance"
                                        -bl "Default"
                                        -f 1
                                        -v $value
                                        -min 0
                                        -max 1
                                        -pre 4
                                        -cw4 130 50 230 30
                                        -co4 0 0 5 0
                                        -ct4 "left" "right" "both" "left"
                                        -cc "optionVar -fv SHAPESMirrorToleranceValue (`floatSliderGrp -q -v shpUI_mirrorToleranceSlider`)"
                                        -dc "optionVar -fv SHAPESMirrorToleranceValue (`floatSliderGrp -q -v shpUI_mirrorToleranceSlider`)"
                                        -bc "optionVar -fv SHAPESMirrorToleranceValue 0.01; floatSliderGrp -e -v 0.01 shpUI_mirrorToleranceSlider;"
                                        shpUI_mirrorToleranceSlider;
            setParent ..;
        setParent ..;

        frameLayout -l "Options" -cll 0 -cl 0 -mw 5 -mh 5;
            rowColumnLayout -nc 2 -co 1 "right" $colWidth2 -rs 1 5;
                $value = `optionVar -q SHAPESBehaviorMirror`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESBehaviorMirror #1") -ann (uiRes("m_SHAPES_ui.kBehaviorMirror"));
                text -l "Drivers Mirror With Behavior" -al "left" -ann (uiRes("m_SHAPES_ui.kBehaviorMirror"));
            setParent ..;

            separator -st "in";

            rowColumnLayout -nc 2 -co 1 "right" $colWidth2 -rs 1 5;
                $value = `optionVar -q SHAPESFullMirror`;
                checkBox -l "" -v $value -cc ("optionVar -iv SHAPESFullMirror #1") -ann (uiRes("m_SHAPES_ui.kFullMirror"));
                text -l "Full Mirror (across line of symmetry)" -al "left" -ann (uiRes("m_SHAPES_ui.kFullMirror"));

                $value = `optionVar -q SHAPESMirrorDirection`;
                checkBox -l "" -v $value -cc ("shapesUI_toggleMirrorItemLabel #1") -ann (uiRes("m_SHAPES_ui.kMirrorDirection"));
                text -l "" -al "left" -ann (uiRes("m_SHAPES_ui.kMirrorDirection")) shpUI_mirrorDirectionLabel;
                shapesUI_toggleMirrorItemLabel $value;
            setParent ..;

            rowLayout;
                radioButtonGrp -l "Axis" -nrb 3 -la3 "X" "Y" "Z" -cw4 40 50 50 50 -cl4 "left" "left" "left" "left" -cc ("optionVar -iv SHAPESMirrorAxis (`radioButtonGrp -q -sl shpUI_mirrorAxisRadio`)") shpUI_mirrorAxisRadio;
                $radioValue = `optionVar -q SHAPESMirrorAxis`;
                // make sure the setting is a 1-based value
                // due to the changes to the preferences in version 3.0_b020
                if ($radioValue == 0)
                    $radioValue = 1;
                radioButtonGrp -e -sl $radioValue shpUI_mirrorAxisRadio;
            setParent ..;
        setParent ..;

        frameLayout -l "Side Identifier" -cll 0 -cl 0 -mw 5 -mh 5;
            columnLayout -adj 1;
                textFieldGrp -l "Left" -ad2 2 -cw2 40 100 -cl2 "left" "left" -ct2 "left" "both" -co2 5 0 -cc shapesUI_setIdentifierPrefs shpUI_mirrorIdentFieldL;
                textFieldGrp -l "Right" -ad2 2 -cw2 40 100 -cl2 "left" "left" -ct2 "left" "both" -co2 5 0 -cc shapesUI_setIdentifierPrefs shpUI_mirrorIdentFieldR;
            setParent ..;
            rowColumnLayout -nc 1;
                button -l "Default" -w 60 -h 25 -c shapesUI_resetIdentifierPrefs;
            setParent ..;
            shapesUI_listUserIdentifier;
        setParent ..;

    setParent $tabs;

    string $featureFrame = `columnLayout -adj 1`;
        frameLayout -l "Visible" -cll 0 -cl 0 -mw 5 -mh 5;
            columnLayout -cal "left";
                rowLayout -nc 2 -cat 1 "right" $colWidth1;
                    checkBox -l "" -v (`optionVar -q SHAPESShowUIButtons`) -cc "optionVar -iv SHAPESShowUIButtons #1; columnLayout -e -m #1 shpUI_showUILayout;";
                    text -l "Show UI Elements Buttons" -w 160 -al "left";
                setParent ..;
            setParent ..;

            separator -style "in" -h 5;

            columnLayout -cal "left";
                rowLayout -nc 4 -cat 1 "right" $colWidth1;
                    checkBox -l "" -v (`optionVar -q SHAPESShowUIDrivenSet`) -cc "optionVar -iv SHAPESShowUIDrivenSet #1; shapesUI_manageUIElements" shpUI_uiPrefsDrivenSetCheck;
                    text -l "Driven Set" -w 160 -al "left";
                    separator -st "none" -w 10;
                    button -l "?" -h 15 -c ("shapesUI_displayFeatureHelp drivenSet");
                setParent ..;
                separator -style "none" -h 5;

                rowLayout -nc 4 -cat 1 "right" $colWidth1;
                    checkBox -l "" -v (`optionVar -q SHAPESShowUIWeights`) -cc "optionVar -iv SHAPESShowUIWeights #1; shapesUI_manageUIElements" shpUI_uiPrefsWeightsCheck;
                    text -l "Shape Weights" -w 160 -al "left";
                    separator -st "none" -w 10;
                    button -l "?" -h 15 -c ("shapesUI_displayFeatureHelp weights");
                setParent ..;
                separator -style "none" -h 5;

                rowLayout -nc 4 -cat 1 "right" $colWidth1;
                    checkBox -l "" -v (`optionVar -q SHAPESShowUIRegion`) -cc "optionVar -iv SHAPESShowUIRegion #1; shapesUI_manageUIElements" shpUI_uiPrefsRegionCheck;
                    text -l "Region Map" -w 160 -al "left";
                    separator -st "none" -w 10;
                    button -l "?" -h 15 -c ("shapesUI_displayFeatureHelp regions");
                setParent ..;
                separator -style "none" -h 5;

                rowLayout -nc 4 -cat 1 "right" $colWidth1;
                    checkBox -l "" -v (`optionVar -q SHAPESShowUIAnimation`) -cc "optionVar -iv SHAPESShowUIAnimation #1; shapesUI_manageUIElements" shpUI_uiPrefsAnimationCheck;
                    text -l "Animation" -w 160 -al "left";
                    separator -st "none" -w 10;
                    button -l "?" -h 15 -c ("shapesUI_displayFeatureHelp animation");
                setParent ..;
                separator -style "none" -h 5;

                rowLayout -nc 4 -cat 1 "right" $colWidth1;
                    checkBox -l "" -v (`optionVar -q SHAPESShowUIDriver`) -cc "optionVar -iv SHAPESShowUIDriver #1; shapesUI_manageUIElements" shpUI_uiPrefsDriverCheck;
                    text -l "Shape Driver and Combos" -w 160 -al "left";
                    separator -st "none" -w 10;
                    button -l "?" -h 15 -c ("shapesUI_displayFeatureHelp driver");
                setParent ..;
                separator -style "none" -h 5;
            setParent ..;
        setParent ..;

        frameLayout -l "Info" -cll 0 -cl 0 -mw 5 -mh 5 shapesUI_helpInfoHeader;
            columnLayout;
                text -l "Select an info button to display information about the feature." -al "left" shpUI_helpInfoText;
            setParent ..;
        setParent ..;

    setParent $tabs; // end tab layout

    tabLayout -e -tl $globalFrame "Global" -tl $sculptFrame "Sculpt" -tl $mirrorFrame "Mirror" -tl $featureFrame "UI Elements" $tabs;
    $value = `optionVar -q SHAPESPreferencesSelectedTab`;
    tabLayout -e -sti $value $tabs;

    showWindow SHAPESPrefsWin;
}


global proc shapesUI_displayFeatureHelp( string $type )
{
    //
    // display the help explanation about the feature
    //
    string $drivenSetTitle = "Driven Set";
    string $drivenSet = "Allows the creation and editing of driven key sets working independently or in\nconjunction with blend shape targets.\nDriven Sets are either joint or transform node based and can be controlled\nlike any other blend shape target.";
    string $weightsTitle = "Shape Weights";
    string $weights = "Allows the creation and editing of blend shape target weight maps to limit the\ninfluence of target shapes. Weight maps can be exported to, and imported\nfrom freeze regions when using the SHAPES brush.";
    string $regionsTitle = "Region Map";
    string $regions = "Extract and update multiple blend shape targets from a complex single shape\nbased on a single color map.";
    string $animationTitle = "Animation";
    string $animation = "Enables basic key framing functionality during the corrective animation process.";
    string $driverTitle = "Shape Driver And Combos";
    string $driver = "Adds various functions helping to set up driving relationships for blend shape\ntargets. Drivers can be standard set driven keyframe or the SHAPES weight\ndriver node. Combos allow for driving target shapes based on a\ncombination of other targets.";

    string $title;
    string $help;
    if ($type == "drivenSet")
    {
        $title = $drivenSetTitle;
        $help = $drivenSet;
    }
    if ($type == "weights")
    {
        $title = $weightsTitle;
        $help = $weights;
    }
    if ($type == "regions")
    {
        $title = $regionsTitle;
        $help = $regions;
    }
    if ($type == "animation")
    {
        $title = $animationTitle;
        $help = $animation;
    }
    if ($type == "driver")
    {
        $title = $driverTitle;
        $help = $driver;
    }

    frameLayout -e -l $title shapesUI_helpInfoHeader;
    text -e -l $help shpUI_helpInfoText;
}


global proc shapesUI_manageUIElements()
{
    //
    // set the ui elements to display
    //
    frameLayout -e -m (`optionVar -q SHAPESShowUIDrivenSet`) shpUI_drivenSetFrame;
    frameLayout -e -m (`optionVar -q SHAPESShowUIWeights`) shpUI_weightsFrame;
    frameLayout -e -m (`optionVar -q SHAPESShowUIRegion`) shpUI_regionFrame;
    frameLayout -e -m (`optionVar -q SHAPESShowUIAnimation`) shpUI_animationFrame;
    frameLayout -e -m (`optionVar -q SHAPESShowUIDriver`) shpUI_driverFrame;

    iconTextCheckBox -e -v (`optionVar -q SHAPESShowUIDrivenSet`) shpUI_showDrivenSetUICheck;
    iconTextCheckBox -e -v (`optionVar -q SHAPESShowUIWeights`) shpUI_showWeightsUICheck;
    iconTextCheckBox -e -v (`optionVar -q SHAPESShowUIRegion`) shpUI_showRegionUICheck;
    iconTextCheckBox -e -v (`optionVar -q SHAPESShowUIAnimation`) shpUI_showAnimationUICheck;
    iconTextCheckBox -e -v (`optionVar -q SHAPESShowUIDriver`) shpUI_showDriverUICheck;

    if (`window -ex SHAPESPrefsWin`)
    {
        checkBox -e -v (`optionVar -q SHAPESShowUIDrivenSet`) shpUI_uiPrefsDrivenSetCheck;
        checkBox -e -v (`optionVar -q SHAPESShowUIWeights`) shpUI_uiPrefsWeightsCheck;
        checkBox -e -v (`optionVar -q SHAPESShowUIRegion`) shpUI_uiPrefsRegionCheck;
        checkBox -e -v (`optionVar -q SHAPESShowUIAnimation`) shpUI_uiPrefsAnimationCheck;
        checkBox -e -v (`optionVar -q SHAPESShowUIDriver`) shpUI_uiPrefsDriverCheck;
    }

    //shapesList_listBlendShapeTargets 1;

    shapesUI_buildShapeDriverOptionMenu;
    shapesUI_switchDriverUI;
}


global proc shapesUI_switchDefaultSculptTool()
{
    //
    // toggles the default tool for the Maya sculpt tool
    //
    int $val = `optionMenu -q -sl shpUI_defaultSculptToolOption`;
    if ($val == 1)
        optionVar -sv SHAPESDefaultMayaSculptTool SetMeshSculptTool;
    else if ($val == 2)
        optionVar -sv SHAPESDefaultMayaSculptTool SetMeshSmoothTool;
    else if ($val == 3)
        optionVar -sv SHAPESDefaultMayaSculptTool SetMeshRelaxTool;
    else if ($val == 4)
        optionVar -sv SHAPESDefaultMayaSculptTool SetMeshGrabTool;
    else if ($val == 5)
        optionVar -sv SHAPESDefaultMayaSculptTool SetMeshPinchTool;
    else if ($val == 6)
        optionVar -sv SHAPESDefaultMayaSculptTool SetMeshFlattenTool;
    else if ($val == 7)
        optionVar -sv SHAPESDefaultMayaSculptTool SetMeshFoamyTool;
    else if ($val == 8)
        optionVar -sv SHAPESDefaultMayaSculptTool SetMeshSprayTool;
    else if ($val == 9)
        optionVar -sv SHAPESDefaultMayaSculptTool SetMeshRepeatTool;
    else if ($val == 10)
        optionVar -sv SHAPESDefaultMayaSculptTool SetMeshImprintTool;
    else if ($val == 11)
        optionVar -sv SHAPESDefaultMayaSculptTool SetMeshWaxTool;
    else if ($val == 12)
        optionVar -sv SHAPESDefaultMayaSculptTool SetMeshScrapeTool;
    else if ($val == 13)
        optionVar -sv SHAPESDefaultMayaSculptTool SetMeshFillTool;
    else if ($val == 14)
        optionVar -sv SHAPESDefaultMayaSculptTool SetMeshKnifeTool;
    else if ($val == 15)
        optionVar -sv SHAPESDefaultMayaSculptTool SetMeshSmearTool;
    else if ($val == 16)
        optionVar -sv SHAPESDefaultMayaSculptTool SetMeshBulgeTool;
    else if ($val == 17)
        optionVar -sv SHAPESDefaultMayaSculptTool SetMeshAmplifyTool;
    else if ($val == 18)
        optionVar -sv SHAPESDefaultMayaSculptTool SetMeshFreezeTool;

    optionVar -iv SHAPESMayaSculptTool $val;
}


global proc shapesUI_switchBrushDefaultType()
{
    //
    // toggles the default mode for the SHAPES brush
    //
    int $val = `optionMenu -q -sl shpUI_brushDefaultTypeOption` - 1;
    optionVar -iv SHAPESBrushDefaultType $val;
}


global proc shapesUI_toggleMeshConnectionCheckBoxState()
{
    //
    // Toggles the enabled state for the mesh connection check box.
    //
    int $val = 1 - `optionVar -query SHAPESUseMayaSculptTool`;
    checkBox -edit -enable $val shpUI_connectToDeformationCheck;
    text -edit -enable $val shpUI_connectToDeformationLabel;
}


global proc int shapesUI_useMeshConnection()
{
    //
    // Return True, if the edit mesh is allowd to be connected to the
    // deformed mesh. Maya sculpt tools prohibit a connection to the
    // deformed mesh since Maya 2020.3. In this case False is returned.
    //
    if (`optionVar -query SHAPESUseMayaSculptTool`)
        return 0;
    return `optionVar -query SHAPESConnectToDeformation`;
}


global proc shapesUI_selectDataPath( string $path )
{
    //
    // open a window to let the user choose a custom data path
    //
    if ($path == "")
        $path = shapesUtil_getExportPath("", 1);

    string $userPath[] = `fileDialog2 -dir $path -fm 3 -okc "Select" -cap "Select Data Path"`;
    if ($userPath[0] == "")
    {
        checkBox -e -v 0 shpUI_useCustomDataPathCheck;
        return;
    }
    textField -e -tx $userPath[0] shpUI_dataPathField;
    optionVar -sv SHAPESCustomDataPath $userPath[0];

    shapesUI_refreshFileLists;
}


global proc shapesUI_updateHotkeyInfo( string $tool )
{
    //
    // diplays the current hotkey in the preferences
    //

    if (!`window -ex SHAPESPrefsWin`)
        return;

    string $label = SHAPESGetHotkeyAsLabelString($tool);

    string $control;
    if ($tool == "brush")
        $control = "shpUI_currentBrushHotkeyLabel";
    else if ($tool == "compare")
        $control = "shpUI_currentCompareHotkeyLabel";

    text -e -l ("Current: " + $label) $control;
}


// ------------------------------------------------------------------------------------------------
// driver settings ui
// ------------------------------------------------------------------------------------------------

global proc shapesUI_buildShapeDriverOptionMenu()
{
    //
    // build the option menu for the shape driver
    //
    if (`optionMenu -ex shpUI_shapeDriverOption`)
    {
        for ($c in `optionMenu -q -ill shpUI_shapeDriverOption`)
            deleteUI $c;
    }

    menuItem -label "None" -parent shpUI_shapeDriverOption;
    menuItem -label "Direct Connection" -parent shpUI_shapeDriverOption;
    menuItem -label "Set Driven Key" -parent shpUI_shapeDriverOption;
    menuItem -label "Weight Driver (Vector Angle)" -parent shpUI_shapeDriverOption;
    menuItem -label "Weight Driver (RBF)" -parent shpUI_shapeDriverOption;
    menuItem -label "Pose Interpolator" -parent shpUI_shapeDriverOption;
}


global proc shapesUI_switchDriverUI()
{
    //
    // toggle the driver ui elements based on the selection
    //
    global string $gShapes_bsNode;

    // don't set the env defaults when first bulding the ui
    // because the workspace control doesn't exist yet
    if (!shapesUI_workspaceControlExists())
        return;

    setParent shpUI_driverSettingsColumn;

    // remove all controls
    string $items[] = `columnLayout -q -ca shpUI_driverSettingsColumn`;
    if (size($items))
    {
        for ($i in $items)
            deleteUI $i;
    }

    shapesUI_enableSolverNodeOption 0;
    shapesUI_togglePoseInfluenceItem 0;

    if ($gShapes_bsNode == "" || $gShapes_bsNode == "None")
    {
        optionMenu -e -sl 1 shpUI_shapeDriverOption;
        return;
    }

    int $driverType = shapesUI_shapeDriverOption();

    if ($driverType == 2)
    {
        formLayout -nd 100 -w 200 shpUI_sdkForm;
        text -l "Attribute" shpUI_sdkAttrLabel;
        formLayout  -e

                    -af shpUI_sdkAttrLabel "top" 0
                    -af shpUI_sdkAttrLabel "bottom" 0
                    -af shpUI_sdkAttrLabel "left" 1

                    shpUI_sdkForm;
        setParent ..;

        shapesDriver_refreshAttributeMenu;
    }
    else if ($driverType == 3)
    {
        formLayout -nd 100 -w 200 shpUI_sdkForm;
        text -l "Attribute" shpUI_sdkAttrLabel;
        formLayout  -e

                    -af shpUI_sdkAttrLabel "top" 0
                    -af shpUI_sdkAttrLabel "bottom" 0
                    -af shpUI_sdkAttrLabel "left" 0

                    shpUI_sdkForm;
        setParent ..;

        separator -style "none" -h 5;

        floatFieldGrp   -l "Start/End"
                        -nf 2
                        -pre 2
                        -cw3 69 60 50
                        -ct3 "left" "left" "left"
                        -co3 0 0 0
                        -cc "shapesDriver_setShapeDriverAttribute shpUI_sdkRangeField minMax"
                        shpUI_sdkRangeField;

        separator -style "none" -h 5;

        rowColumnLayout -nc 2 -cw 1 178 -cw 2 145;
            shapesUI_addInterpolateOption 0;
            optionMenuGrp   -l "Infinity"
                            -cw2 50 50
                            -cal 1 "center"
                            -cc "shapesDriver_setShapeDriverAttribute shpUI_infinityOption infinity"
                            shpUI_infinityOption;
                menuItem -l "None";
                menuItem -l "Pre";
                menuItem -l "Post";
                menuItem -l "Pre/Post";
        setParent ..;

        shapesDriver_refreshAttributeMenu;
    }
    else if ($driverType == 4)
    {
        // parent joint field
        string $parentForm = `formLayout`;
            string $parentLabel = `text -l "Parent" -w 67 -al "left"`;
            textField -width 100 shpUI_parentField;
            string $parentButton = `iconTextButton -w 26 -h 25 -i "SHAPES_select.png" -ann "Select weight driver parent"  -c "shapesUI_getSelection parent"`;
            formLayout  -e

                        -af $parentLabel "top" 0
                        -af $parentLabel "bottom" 0
                        -af $parentLabel "left" 0
                        -af shpUI_parentField "top" 1
                        -af $parentButton "top" 0
                        -af $parentButton "right" 0

                        -ac shpUI_parentField "left" 5 $parentLabel
                        -ac shpUI_parentField "right" 3 $parentButton

                        $parentForm;
        setParent ..;

        separator -style "none" -h 4;

        rowColumnLayout -nc 2 -cw 1 154 -cw 2 140;
            optionMenuGrp -l "Axis" -cw2 67 40 -cal 1 "left" shpUI_axisOption;
                menuItem -l "    X    ";
                menuItem -l "    Y    ";
                menuItem -l "    Z    ";
                optionMenuGrp -e -cc "shapesDriver_setShapeDriverAttribute shpUI_axisOption direction" shpUI_axisOption;
                shapesUI_addInterpolateOption 1;
        setParent ..;

        separator -style "double" -h 8;

        rowColumnLayout -nc 2 -cw 1 154 -cw 2 140;
            checkBoxGrp -l "Angle" -v1 1 -cw2 70 60 -cal 1 "left" -cc "shapesUI_toggleDriverTranslateOptions; shapesDriver_setShapeDriverAttribute shpUI_useAngleCheck useRotate" shpUI_useAngleCheck;
            checkBoxGrp -l "Twist" -v1 0 -cw2 42 60 -cal 1 "left" -cc "shapesDriver_setShapeDriverAttribute shpUI_useTwistCheck twist" shpUI_useTwistCheck;
            separator -style "none" -h 5;
            separator -style "none" -h 5;
            floatFieldGrp -l "Range" -v1 45 -pre 1 -cw2 69 61 -cal 1 "left" -cc "shapesUI_limitFloatField angle" shpUI_rangeField;
            floatFieldGrp -l "Center" -v1 0 -pre 1 -cw2 40 60 -cal 1 "left" -cc "shapesUI_limitFloatField centerAngle" shpUI_centerField;
            separator -style "none" -h 4;
            separator -style "none" -h 4;
            floatFieldGrp -l "Twist Range" -v1 90 -pre 1 -cw2 69 61 -cal 1 "left" -cc "shapesUI_limitFloatField twistAngle" shpUI_twistAngleField;
            separator -style "none";
        setParent ..;

        separator -style "double" -h 8;

        rowColumnLayout -nc 2 -cw 1 154 -cw 2 140;
            checkBoxGrp -l "Distance" -v1 0 -cw2 70 60 -cal 1 "left" -cc "shapesUI_toggleDriverTranslateOptions; shapesDriver_setShapeDriverAttribute shpUI_useDistanceCheck useTranslate" shpUI_useDistanceCheck;
            checkBoxGrp -l "Grow" -v1 1 -cw2 42 60 -cal 1 "left" -cc "shapesDriver_setShapeDriverAttribute shpUI_useIncreaseCheck grow" shpUI_useIncreaseCheck;
            separator -style "none" -h 4;
            separator -style "none" -h 4;
            floatFieldGrp -l "Min" -v1 0 -pre 2 -cw2 69 61 -cal 1 "left" -cc "shapesUI_limitFloatField translateMin" shpUI_distanceMinField;
            floatFieldGrp -l "Max" -v1 1 -pre 2 -cw2 40 60 -cal 1 "left" -cc "shapesUI_limitFloatField translateMax" shpUI_distanceMaxField;
        setParent ..;

        shapesUI_toggleDriverTranslateOptions;
    }
    else if ($driverType == 5 || $driverType == 6)
    {
        // parent joint field
        string $parentForm = `formLayout`;
            string $parentLabel = `text -l "Parent" -w 67 -al "left"`;
            textField -w 100 shpUI_parentField;
            string $solverString1 = "weight driver";
            string $solverString2 = "RBF solver";
            if ($driverType == 6)
                $solverString1 = $solverString2 = "Pose Interpolator";
            string $parentButton = `iconTextButton -w 26 -h 25 -i "SHAPES_select.png" -ann ("Select " + $solverString1 + " parent") -c "shapesUI_getSelection parent"`;
            string $controlLabel = `text -l "Controller" -w 67 -al "left"`;
            textField -w 100 shpUI_controlField;
            string $controlButton = `iconTextButton -w 26 -h 25 -i "SHAPES_select.png" -ann ("Select " + $solverString2 + " control") -c "shapesUI_getSelection control"`;
            formLayout  -e

                        -af $parentLabel "top" 4
                        -af $parentLabel "left" 0
                        -af shpUI_parentField "top" 1
                        -af $parentButton "top" 0
                        -af $parentButton "right" 0
                        -af $controlLabel "left" 0
                        -af $controlButton "right" 0

                        -ac shpUI_parentField "left" 5 $parentLabel
                        -ac shpUI_parentField "right" 3 $parentButton
                        -ac $controlLabel "top" 12 $parentLabel
                        -ac shpUI_controlField "top" 5 shpUI_parentField
                        -ac $controlButton "top" 0 $parentButton
                        -ac shpUI_controlField "left" 5 $controlLabel
                        -ac shpUI_controlField "right" 3 $controlButton

                        $parentForm;
        setParent ..;

        separator -style "none" -h 4;

        columnLayout -adj 1 shpUI_restPoseColumn;
            shapesUI_addCreateOrRestPoseButton 0;
        setParent ..;

        separator -style "double" -h 8;

        rowColumnLayout -nc 2 -cw 1 73 shpUI_poseLayout;
            text -l "ID:" -w 50 -al "left" shpUI_rbfIdText;
            optionMenuGrp   -l "Mode"
                            -en 1
                            -cw2 35 70
                            -cal 1 "left"
                            -cc "shapesDriver_setShapeDriverAttribute shpUI_poseModeOption poseMode"
                            shpUI_poseModeOption;
                menuItem -l "Rotate/Twist";
                menuItem -l "Rotate";
                menuItem -l "Twist";
            if ($driverType == 5)
                optionMenuGrp -e -en 0 shpUI_poseModeOption;
        setParent ..;

        shapesUI_enableSolverNodeOption 1;
        shapesUI_refreshSolverMenu;
    }

    setParent ..;

    if ($driverType > 1)
        shapesUI_addRampWeightsDrivenAttributeOption;
}


global proc shapesUI_addInterpolateOption( int $more )
{
    //
    // adds the option menu for the interpolation type of the shape driver
    //
    int $cw[];

    if ($more)
        $cw = {39, 50};
    else
        $cw = {68, 50};
    optionMenuGrp -l "Type" -cw2 $cw[0] $cw[1] -cal 1 "left" shpUI_interpolateOption;
    menuItem -l "Linear";
    menuItem -l "Slow";
    menuItem -l "Fast";
    if ($more)
    {
        menuItem -l "Smooth1";
        menuItem -l "Smooth2";
        menuItem -l "Curve";
    }
    else
        menuItem -l "Smooth";
    optionMenuGrp -e -cc "shapesDriver_setShapeDriverAttribute shpUI_interpolateOption interpolation" shpUI_interpolateOption;
}


global proc shapesUI_autoFillDriverFields()
{
    //
    // If a new driver type option is chosen fill the parent and
    // rbf controller fields with default nodes.
    // This only applies when interactively setting the option.
    //
    string $nodeList[] = shapesUI_getDriverNodeNames();
    if (!size($nodeList))
        return;

    int $driverType = shapesUI_shapeDriverOption();

    if ($driverType == 2 || $driverType == 3)
    {
        // Get either the attribute with the highest value and set the
        // range or select the attribute from the menu which matches the
        // current shape name.
        shapesDriver_updateAttributeMenu($nodeList[0], "");
        shapesDriver_getAttributeWithMaxValue();
    }
    else if ($driverType >= 4)
    {
        string $parent = shapesDriver_getDriverParent($nodeList[0]);
        textField -edit -text $parent shpUI_parentField;

        if ($driverType > 4)
            textField -edit -text $nodeList[0] shpUI_controlField;
        else
            shapesDriver_updateShapeDriverSettings();
    }
}


global proc shapesUI_toggleDriverTranslateOptions()
{
    //
    // enables/disables the weight driver controls based
    // on the transform choice
    //
    int $state = `checkBoxGrp -q -v1 shpUI_useAngleCheck`;
    checkBoxGrp -e -en $state shpUI_useTwistCheck;
    floatFieldGrp -e -en $state shpUI_rangeField;
    floatFieldGrp -e -en $state shpUI_centerField;
    floatFieldGrp -e -en $state shpUI_twistAngleField;

    $state = `checkBoxGrp -q -v1 shpUI_useDistanceCheck`;
    checkBoxGrp -e -en $state shpUI_useIncreaseCheck;
    floatFieldGrp -e -en $state shpUI_distanceMinField;
    floatFieldGrp -e -en $state shpUI_distanceMaxField;
}


global proc shapesUI_addRampWeightsDrivenAttributeOption()
{
    //
    // toggle the driver ui elements based on the selection
    //
    global int $gShapes_index;
    global int $gShapes_targetIndex;

    // don't set the env defaults when first bulding the ui
    // because the dock control doesn't exist yet
    if (!shapesUI_workspaceControlExists())
        return;

    setParent shpUI_driverSettingsColumn;

    if (`columnLayout -q -ex shpUI_rampAttributeColumn`)
    {
        // remove all controls
        string $items[] = `columnLayout -q -ca shpUI_rampAttributeColumn`;
        if (size($items))
        {
            for ($i in $items)
                deleteUI $i;
        }
        deleteUI shpUI_rampAttributeColumn;
    }

    if ($gShapes_index != -1)
    {
        string $rampPlug = shapesData_getWeightsControllerConnection($gShapes_targetIndex);
        string $rampNode[] = stringToStringArray($rampPlug, ".");
        if ($rampPlug == "")
        {
            setParent ..;
            return;
        }

        if (`nodeType $rampNode[0]` == "rampWeights")
        {
            columnLayout -adj 1 shpUI_rampAttributeColumn;
                separator -st "none" -h 5;
                frameLayout -l "Ramp Weights"
                            -li 3
                            -cll 0
                            -cl 0
                            -mw 5
                            -mh 5
                            shpUI_rampAttributeFrame;
                    formLayout -nd 100 -w 200 shpUI_rampForm;
                        text -l "Attribute" shpUI_rampAttrLabel;
                        optionMenu -cc ("shapesDriver_setShapeDriverAttribute shpUI_rampAttrOption ramp") shpUI_rampAttrOption;
                        formLayout  -e

                                    -af shpUI_rampAttrLabel "top" 0
                                    -af shpUI_rampAttrLabel "bottom" 0
                                    -af shpUI_rampAttrLabel "left" 1

                                    -af shpUI_rampAttrOption "top" 0
                                    -af shpUI_rampAttrOption "bottom" 0
                                    -af shpUI_rampAttrOption "right" 23

                                    -ac shpUI_rampAttrOption "left" 17 "shpUI_rampAttrLabel"

                                    shpUI_rampForm;
                        setParent ..;
                    setParent ..;
            setParent ..;

            string $attr[] = `listAttr -k $rampNode[0]`;
            string $blendAttr[] = `listAttr -m -st "blendCurve_Position" $rampNode[0]`;
            $attr = stringArrayCatenate($attr, $blendAttr);
            for ($a in $attr)
                menuItem -l $a -p shpUI_rampAttrOption;
            optionMenu -e -v "offset" shpUI_rampAttrOption;
        }
    }

    setParent ..;
}


global proc shapesUI_toggleWeightsServerUpdateButton( int $index, int $add )
{
    //
    // adds or removes the weights server update button
    // below the shape driver ui
    //
    setParent shpUI_weightsServerSettingsColumn;
    evalDeferred("columnLayout -e -m 1 shpUI_weightsServerSettingsColumn");

    if (`columnLayout -q -ex shpUI_serverEditColumn`)
    {
        // remove all controls
        string $items[] = `columnLayout -q -ca shpUI_serverEditColumn`;
        if (size($items))
        {
            for ($i in $items)
                deleteUI $i;
        }
        deleteUI shpUI_serverEditColumn;
        columnLayout -e -m 0 shpUI_weightsServerSettingsColumn;
        evalDeferred("formLayout -e -en 1 shpUI_shapeDriverOptionForm");

        if (!$add)
            return;
    }
    else if (!$add)
        return;

    // select the influences first because this will control the display of the ui
    string $server = shapesData_getWeightsControllerConnection($index);
    string $items[] = stringToStringArray($server, ".");
    shapesWeights_listServerInfluences $items[0];

    columnLayout -adj 1 shpUI_serverEditColumn;
        separator -st "none" -h 5;
        frameLayout -l "Weights Server"
                    -li 3
                    -cll 0
                    -cl 0
                    -mw 5
                    -mh 5
                    shpUI_serverEditFrame;
            formLayout -nd 100 -w 200 shpUI_serverForm;
                text -l "Edit Influences" shpUI_serverEditLabel;
                iconTextButton -w 30 -h 25 -i "SHAPES_confirm.png" -c ("shapesWeights_editServerInfluences " + $items[0]) -ann "Update influences" shpUI_serverUpdateButton;
                iconTextButton -w 30 -h 25 -i "SHAPES_dismiss.png" -c ("shapesUI_toggleWeightsServerUpdateButton -1 0") -ann "Cancel" shpUI_serverUpdateCancelButton;
                formLayout  -e

                            -af shpUI_serverEditLabel "top" 0
                            -af shpUI_serverEditLabel "bottom" 0
                            -af shpUI_serverEditLabel "left" 1

                            -af shpUI_serverUpdateButton "top" 0
                            -af shpUI_serverUpdateButton "bottom" 0

                            -af shpUI_serverUpdateCancelButton "top" 0
                            -af shpUI_serverUpdateCancelButton "bottom" 0
                            -af shpUI_serverUpdateCancelButton "right" 23

                            -ac shpUI_serverUpdateButton "right" 5 "shpUI_serverUpdateCancelButton"

                            shpUI_serverForm;
                setParent ..;
            setParent ..;
    setParent ..;

    setParent ..;

    evalDeferred("formLayout -e -en 0 shpUI_shapeDriverOptionForm");
}


global proc shapesUI_toggleRestPoseButton()
{
    //
    // toggle the rest pose button for the rbf mode
    //
    int $rest = shapesDriver_restPoseIsSet();
    button -e -en (!$rest) shpUI_restPoseButton;
}


global proc shapesUI_addCreateOrRestPoseButton( int $asRest )
{
    //
    // toggle the rest pose button for the rbf mode
    //
    setParent shpUI_restPoseColumn;

    string $lay[] = `columnLayout -q -ca shpUI_restPoseColumn`;
    if (size($lay))
        deleteUI $lay[0];

    if ($asRest)
    {
        string $node = shapesUI_getSelectedNodeOption();
        string $shape = shapesCommon_getShapeNode($node);

        // parent joint field
        string $parentForm = `formLayout`;
            string $restLabel = `text -l "Rest Pose" -w 50 -al "left"`;
            button -l "Set" -w 45 -c "shapesDriver_setRestPose" shpUI_restPoseButton;
            string $resetButton = `button -l "Reset" -w 45 -c "shapesDriver_resetRestPose"`;
            string $sep1 = `image -image "SHAPES_separator.png"`;
            string $twistOption = `optionMenuGrp -l "Twist" -cw2 30 10 -cal 1 "left" shpUI_twistOption`;
                menuItem -l "X";
                menuItem -l "Y";
                menuItem -l "Z";
                optionMenuGrp -e -cc "shapesDriver_setShapeDriverAttribute shpUI_twistOption twistAxis" shpUI_twistOption;
            string $sep2 = `image -image "SHAPES_separator.png"`;
            string $deleteButton = `iconTextButton -w 26 -h 25 -i "SHAPES_trash.png" -c ("shapesDriver_deleteWeightDriver " + $shape + " 1") -ann "Delete Weight Driver (RBF)"`;
            formLayout  -e

                        -af $restLabel "top" 5
                        -af $restLabel "left" 1
                        -af shpUI_restPoseButton "top" 0
                        -af shpUI_restPoseButton "left" 74
                        -af $resetButton "top" 0
                        -af $sep1 "top" 0
                        -af $twistOption "top" 0
                        -af $sep2 "top" 0
                        -af $deleteButton "top" 0
                        -af $deleteButton "right" 22

                        -ac $resetButton "left" 5 shpUI_restPoseButton
                        -ac $sep1 "left" 5 $resetButton
                        -ac $twistOption "left" 5 $sep1
                        -ac $sep2 "right" 5 $deleteButton

                        $parentForm;
        setParent ..;

        shapesUI_toggleRestPoseButton;

        int $value = `getAttr ($shape + ".twistAxis")`;
        if (`nodeType $shape` == "poseInterpolator")
        {
            int $ids[] = `getAttr -mi ($shape + ".driver")`;
            $value = `getAttr ($shape + ".driver[" + $ids[0] + "].driverTwistAxis")`;
        }
        optionMenuGrp -e -sl ($value + 1) shpUI_twistOption;
    }
    else
    {
        rowColumnLayout -nc 3 -cw 1 68 -cw 2 5 -cw 3 70 -cal 1 "left";
            text -l "";
            separator -style "none" -h 5;
            button -l "Create" -c shapesDriver_createNewSolver;
        setParent ..;
    }
}


global proc shapesUI_solverNodeOptionToggle()
{
    //
    // callback for the solver node option toggle
    // to display either the create button or the rest pose buttons
    //
    global string $gShapes_selectedDriver;

    if (`optionMenu -q -sl shpUI_solverNodeOption` == 1)
    {
        shapesUI_addCreateOrRestPoseButton 0;
        rowColumnLayout -e -en 0 shpUI_poseLayout;
    }
    else
    {
        shapesUI_addCreateOrRestPoseButton 1;
        rowColumnLayout -e -en 1 shpUI_poseLayout;

        string $solver = shapesUI_getSelectedNodeOption();
        if (shapesPI_isRbfCompatible($solver) == 0)
        {
            shapesUI_addCreateOrRestPoseButton 0;
            rowColumnLayout -e -en 0 shpUI_poseLayout;
            return;
        }

        // refresh the fields based on the selected solver node
        int $ids[];
        string $driver[] = shapesDriver_getWeightDriverDriver($solver, $ids);
        for ($d in $driver)
            treeView -e -si $d 1 shpUI_driverTree;
        shapesUI_setDriverNodeName(stringArrayToString($driver, ","));
        string $parent = shapesDriver_getDriverParent($gShapes_selectedDriver);
        textField -edit -text $parent shpUI_parentField;
        if ($parent == "")
            return;
        textField -e -tx (shapesDriver_getRbfControllerAsString()) shpUI_controlField;
    }
}


global proc shapesUI_enableSolverNodeOption( int $enable )
{
    //
    // enables/disables the solver node option menu based on the driver type selection
    //
    text -e -en $enable shpUI_solverNodeLabel;
    optionMenu -e -en $enable shpUI_solverNodeOption;
    if (!$enable)
        optionMenu -e -sl 1 shpUI_solverNodeOption;
}


global proc shapesUI_refreshSolverMenu()
{
    //
    // build a new option menu with all rbf solvers or pose interpolators
    //
    global string $gShapes_bsNode;

    string $items[] = `optionMenu -q -ils shpUI_solverNodeOption`;
    for ($i = 1; $i < size($items); $i ++)
        deleteUI $items[$i];

    string $solvers[];
    if (shapesUI_shapeDriverOption() == 5)
    {
        string $nodes[] = `ls -type "weightDriver"`;
        for ($n in $nodes)
        {
            if (`getAttr ($n + ".type")` == 1)
            {
                string $parent[] = `listRelatives -p $n`;
                if (`gmatch $parent[0] ("*" + $gShapes_bsNode + "*")`)
                    $solvers[size($solvers)] = $parent[0];
            }
        }
    }
    else
    {
        string $nodes[] = `ls -type "poseInterpolator"`;
        for ($n in $nodes)
        {
            string $parent[] = `listRelatives -p $n`;
            if (`gmatch $parent[0] ("*" + $gShapes_bsNode + "*")`)
                $solvers[size($solvers)] = $parent[0];
        }
    }
    $solvers = `sort $solvers`;

    for ($s in $solvers)
        menuItem -l (substitute($gShapes_bsNode + "_", $s, "")) -p shpUI_solverNodeOption;
}


global proc shapesUI_setDriverTypeOption( int $value )
{
    //
    // Set the shape driver option to the selected value and update the
    // available driver controls.
    //
    optionMenu -edit -select $value shpUI_shapeDriverOption;
    shapesUI_switchDriverUI;
}


global proc int shapesUI_shapeDriverOption()
{
    //
    // get the selected shape driver option based on the name of the selection
    // but returning as an int
    //
    string $sel = `optionMenu -q -v shpUI_shapeDriverOption`;
    switch ($sel)
    {
        case "None":
            return 1;
            break;
        case "Direct Connection":
            return 2;
            break;
        case "Set Driven Key":
            return 3;
            break;
        case "Weight Driver (Vector Angle)":
            return 4;
            break;
        case "Weight Driver (RBF)":
            return 5;
            break;
        case "Pose Interpolator":
            return 6;
            break;
        default:
            return 0;
            break;
    }
}


global proc string shapesUI_getSelectedNodeOption()
{
    //
    // callback for the solver node option toggle
    // to display either the create button or the rest pose buttons
    //
    global string $gShapes_bsNode;

    string $node = `optionMenu -q -v shpUI_solverNodeOption`;
    string $fullName = $gShapes_bsNode + "_" + $node;
    if (`objExists $fullName`)
        return $fullName;
    return $node;
}


global proc shapesUI_toggleRbfSolver( string $attr )
{
    //
    // activate/deactivate the rbf solver
    //
    string $solver = shapesUI_getSelectedNodeOption();
    string $shape = shapesCommon_getShapeNode($solver);

    if (`nodeType $shape` == "weightDriver" || $attr == "visibility")
        setAttr ($shape + "." + $attr) (!`getAttr ($shape + "." + $attr)`);
    else if (`nodeType $shape` == "poseInterpolator")
        return;
}


// ------------------------------------------------------------------------------------------------
// driven key set ui
// ------------------------------------------------------------------------------------------------

global proc shapesUI_showDrivenSetUI()
{
    //
    // activates the driven set layout in the driven set frame
    //
    setParent shpUI_drivenSetFrame;

        rowLayout -nc 11 shpUI_drivenSetLayout;
            iconTextButton -w 26 -h 25 -i "SHAPES_drivenSet.png" -c "shapesSet_editDrivenSetAttributes 1" -ann "Create new set from selection";
            iconTextButton -w 26 -h 25 -i "SHAPES_regionEdit.png" -c "shapesSet_editDrivenSetAttributes 0" -ann "Edit driven set" -en 0 shpUI_editDrivenSetButton;
            image -image "SHAPES_separator.png";
            iconTextButton -w 26 -h 25 -i "SHAPES_drivenSetKey.png" -c shapesSet_setKey -ann "Set key for current channel value";
            image -image "SHAPES_separator.png";
            iconTextButton -w 26 -h 25 -i "SHAPES_drivenSetPreviousKeyOff.png" -c shapesCommon_doNothing -ann "Move to previous key frame" shpUI_drivenSetPreviousButton;
            text -w 30 -l "0 / 0" -al "center" shpUI_drivenSetKeyCount;
            iconTextButton -w 26 -h 25 -i "SHAPES_drivenSetNextKeyOff.png" -c shapesCommon_doNothing -ann "Move to next key frame" shpUI_drivenSetNextButton;
            image -image "SHAPES_separator.png";
            iconTextButton -w 26 -h 25 -i "SHAPES_trash.png" -c "shapesSet_deleteKey 0" -ann "Removes the key at the current position";
            iconTextButton -w 26 -h 25 -i "SHAPES_keyDeleteAll.png" -c "shapesSet_deleteKey 1" -ann "Removes all keys";
        setParent ..;

    setParent ..;

    shapesUI_toggleDrivenSetUI 0;
}


global proc shapesUI_toggleDrivenSetUI( int $enable )
{
    //
    // enable/disable the driven set buttons based on the target selection
    //
    string $state = "";
    if (!$enable)
    {
        $state = "Off";
        iconTextButton -e -c shapesCommon_doNothing shpUI_drivenSetPreviousButton;
        iconTextButton -e -c shapesCommon_doNothing shpUI_drivenSetNextButton;
    }
    else
    {
        iconTextButton -e -c "shapesSet_stepNextDrivenKey 0" shpUI_drivenSetPreviousButton;
        iconTextButton -e -c "shapesSet_stepNextDrivenKey 1" shpUI_drivenSetNextButton;
    }

    iconTextButton -e -i ("SHAPES_drivenSetPreviousKey" + $state + ".png") shpUI_drivenSetPreviousButton;
    iconTextButton -e -i ("SHAPES_drivenSetNextKey" + $state + ".png") shpUI_drivenSetNextButton;

    text -e -l "- / -" shpUI_drivenSetKeyCount;

    iconTextButton -e -en $enable shpUI_editDrivenSetButton;
}


global proc shapesUI_buildEditDrivenSetUI( int $newSet )
{
    //
    // show the window for editing the driven set attributes
    //
    if (`window -ex SHAPESEditDrivenSetWin`)
        deleteUI SHAPESEditDrivenSetWin;

    if (`windowPref -ex SHAPESEditDrivenSetWin`)
        windowPref -r SHAPESEditDrivenSetWin;

    shapesUI_setColorManagedPots 0;

    string $info = "";
    if (!$newSet)
        $info = "Edit ";

    window -t ($info + "Driven Set Attributes") -wh 450 300 -mb 1 SHAPESEditDrivenSetWin;

    menu -l "Edit";
    menuItem -l "Infinity" -ann (uiRes("m_SHAPES_ui.kSetInfinity")) -cb 1 -c ("shapesSet_toggleCurveInfinity #1") shpUI_drivenSetInfinityItem;
    menuItem -d 1;
    menuItem -l "Add scene selection to set" -c shapesSet_addToSet shpUI_drivenSetAddItem;
    menuItem -l "Remove scene selection from set" -c shapesSet_removeFromSet shpUI_drivenSetRemoveItem;
    menuItem -d 1;
    menuItem -l "Color Preferences..." -c shapesUI_buildDrivenSetPrefsUI;

    string $drivenSetMainFrame = `frameLayout -lv 0 -cll 0 -cl 0 -mw 2 -mh 2`;

        string $listForm = `formLayout`;

            string $memberLabel = `text -l "Set Members"`;
            string $attrLabel = `text -l "Member Attributes"`;
            string $setAttrLabel = `text -l "Set Attributes"`;

            string $memberList = `iconTextScrollList -ams 1 -h 150 -sc shapesSet_listMemberAttributes shpUI_drivenSetMemberList`;
            string $attrList = `iconTextScrollList -ams 1 -h 150 -dcc "shapesSet_toggleDrivenSetAttribute shpUI_drivenSetAttributeList" shpUI_drivenSetAttributeList`;
            string $setAttrList = `iconTextScrollList -ams 1 -h 150 -dcc "shapesSet_toggleDrivenSetAttribute shpUI_drivenSetKeyList" shpUI_drivenSetKeyList`;

            string $buttonClear = `button -l "Select All" -h 25 -ann (uiRes("m_SHAPES_ui.kSelectAllMembers")) -c shapesSet_memberListSelectAll`;
            string $buttonAdd = `button -l "Add Attribute" -h 25 -ann (uiRes("m_SHAPES_ui.kAddSetAttribute")) -c "shapesSet_toggleDrivenSetAttribute shpUI_drivenSetAttributeList"`;
            string $buttonRemove = `button -l "Remove Attribute" -h 25 -ann (uiRes("m_SHAPES_ui.kRemoveSetAttribute")) -c "shapesSet_toggleDrivenSetAttribute shpUI_drivenSetKeyList"`;
            string $buttonInvert = `button -l "Mirror Inverted" -h 25 -ann (uiRes("m_SHAPES_ui.kMirrorInvertedAttribute")) -c shapesSet_toggleDrivenSetInvertAttribute`;

            string $buttonCancel = `button -l "Close" -h 25 -ann (uiRes("m_SHAPES_ui.kCloseSetWindow")) -c shapesSet_closeDrivenSetAttributes`;
            string $buttonApply = `button -l "Apply" -h 25 -ann (uiRes("m_SHAPES_ui.kSetApply")) -c shapesSet_applyDrivenSetAttribute shpUI_drivenSetApplyButton`;

            formLayout  -e
                        -af $memberLabel "top" 5
                        -af $memberLabel "left" 5
                        -af $attrLabel "top" 5
                        -af $setAttrLabel "top" 5
                        -af $setAttrLabel "right" 3
                        -af $memberList "left" 3
                        -af $memberList "bottom" 65
                        -af $attrList "bottom" 65
                        -af $setAttrList "right" 3
                        -af $setAttrList "bottom" 65
                        -af $buttonClear "left" 3
                        -af $buttonApply "left" 3
                        -af $buttonApply "bottom" 3
                        -af $buttonCancel "bottom" 3
                        -af $buttonCancel "right" 3
                        -af $buttonInvert "right" 3

                        -ac $attrLabel "left" 5 $memberLabel
                        -ac $attrLabel "right" 5 $setAttrLabel
                        -ac $memberList "top" 5 $memberLabel
                        -ac $attrList "top" 5 $attrLabel
                        -ac $attrList "left" 5 $memberList
                        -ac $attrList "right" 5 $setAttrList
                        -ac $setAttrList "top" 5 $setAttrLabel
                        -ac $buttonClear "bottom" 10 $buttonApply
                        -ac $buttonAdd "bottom" 10 $buttonApply
                        -ac $buttonRemove "bottom" 10 $buttonCancel
                        -ac $buttonInvert "bottom" 10 $buttonCancel

                        -ap $memberLabel "right" 0 33
                        -ap $setAttrLabel "left" 0 66
                        -ap $memberList "right" 0 33
                        -ap $setAttrList "left" 0 66
                        -ap $buttonClear "right" 0 25
                        -ap $buttonAdd "left" 5 25
                        -ap $buttonAdd "right" 0 50
                        -ap $buttonRemove "left" 5 50
                        -ap $buttonRemove "right" 0 75
                        -ap $buttonInvert "left" 5 75
                        -ap $buttonApply "right" 0 50
                        -ap $buttonCancel "left" 5 50

                        $listForm;

        setParent ..;

    setParent ..;

    showWindow SHAPESEditDrivenSetWin;
}


global proc shapesUI_buildDrivenSetPrefsUI()
{
    //
    // show the window for the diven set preferences
    //
    if (`window -ex SHAPESDrivenSetPrefsWin`)
        deleteUI SHAPESDrivenSetPrefsWin;

    if (`windowPref -ex SHAPESDrivenSetPrefsWin`)
        windowPref -r SHAPESDrivenSetPrefsWin;

    float $v[] = shapesUI_getDrivenSetPrefs();

    window -t "Driven Set Color Preferences" -wh 350 100 -s 0 SHAPESDrivenSetPrefsWin;

    frameLayout -lv 0 -cll 0 -cl 0;

        columnLayout -adj 1;
            separator -style "none" -h 5;

            colorSliderGrp -l "Driven" -h 25 -rgb $v[0] $v[1] $v[2] -cw3 60 50 100 -cal 1 "right" -ct3 "right" "both" "right" -co3 5 0 5 shpUI_drivenSetKeyedColor;
            colorSliderGrp -l "Inverted" -h 25 -rgb $v[3] $v[4] $v[5] -cw3 60 50 100 -cal 1 "right" -ct3 "right" "both" "right" -co3 5 0 5 shpUI_drivenSetInvertedColor;

            separator -style "none" -h 10;

            string $buttonForm = `formLayout`;
            string $saveBtn = `button -l "Set Colors" -h 30 -c "shapesUI_closeDrivenSetPrefsUI 1"`;
            string $closeBtn = `button -l "Close" -h 30 -c "shapesUI_closeDrivenSetPrefsUI 0"`;
            formLayout  -e

                        -af $saveBtn "top" 0
                        -af $saveBtn "bottom" 5
                        -af $saveBtn "left" 5
                        -af $closeBtn "top" 0
                        -af $closeBtn "bottom" 5
                        -af $closeBtn "right" 5

                        -ap $saveBtn "right" 5 50

                        -ac $closeBtn "left" 5 $saveBtn

                        $buttonForm;

            setParent ..;

        setParent ..;
    setParent ..;

    showWindow SHAPESDrivenSetPrefsWin;
}


global proc float[] shapesUI_getDrivenSetPrefs()
{
    //
    // returns a list with all preference values for the driven set preferences window
    //
    string $keyedString = `optionVar -q SHAPESDrivenSetKeyedColor`;
    float $values[] = shapesArray_stringToFloatArray($keyedString, ",");
    string $invertedString = `optionVar -q SHAPESDrivenSetInvertedColor`;
    float $valuesInverted[] = shapesArray_stringToFloatArray($invertedString, ",");
    for ($vi in $valuesInverted)
        $values[size($values)] = $vi;
    return $values;
}


global proc shapesUI_closeDrivenSetPrefsUI( int $store )
{
    //
    // store the driven set preferences and close the window
    //
    if ($store)
    {
        float $values[] = `colorSliderGrp -q -rgb shpUI_drivenSetKeyedColor`;
        optionVar -sv SHAPESDrivenSetKeyedColor (shapesArray_floatArrayToString($values, ","));
        $values = `colorSliderGrp -q -rgb shpUI_drivenSetInvertedColor`;
        optionVar -sv SHAPESDrivenSetInvertedColor (shapesArray_floatArrayToString($values, ","));
        shapesSet_memberListSelectAll;
    }

    deleteUI SHAPESDrivenSetPrefsWin;
}


global proc shapesUI_setColorManagedPots( int $enable )
{
    //
    // turn off color management for color pots
    // for Maya 2016 and up
    //
    global int $gShapes_managedColorPots;

    if (!$enable)
    {
        $gShapes_managedColorPots = `colorManagementPrefs -q -cmp`;
        colorManagementPrefs -e -cmp 0;
    }
    else
        $gShapes_managedColorPots = `colorManagementPrefs -e -cmp $gShapes_managedColorPots`;
}


// ------------------------------------------------------------------------------------------------
// edit combo ui
// ------------------------------------------------------------------------------------------------

global proc shapesUI_showEditComboUI( int $show )
{
    //
    // activates the edit combo button layout when in combo edit mode
    //
    global int $gShapes_comboProcess;

    if (!$show)
    {
        rowLayout -e -m 0 shpUI_comboButtonLayout;
        string $items[] = `rowLayout -q -ca shpUI_comboButtonLayout`;
        for ($i in $items)
            deleteUI $i;
        return;
    }
    else
    {
        setParent shpUI_comboButtonLayout;
        rowLayout -e -m 1 shpUI_comboButtonLayout;

        //
        // edit combo
        //
        if ($gShapes_comboProcess)
        {
            iconTextButton -w 30 -h 25 -i "SHAPES_comboDriverAdd.png" -c "shapesCombo_addRemoveComboItems 1" -ann "Add to combo";
            iconTextButton -w 30 -h 25 -i "SHAPES_comboDriverRemove.png" -c "shapesCombo_addRemoveComboItems 0" -ann "Remove from combo";
            image -image "SHAPES_separator.png";
            iconTextButton -w 30 -h 25 -i "SHAPES_comboSetTarget.png" -c shapesCombo_setComboTarget -ann "Set combo target";
            separator -hr 0 -h 20 -w 12 -style "none";
            separator -hr 0 -h 20 -w 1 -style "none";
            separator -hr 0 -h 20 -w 12 -style "none";
            iconTextButton -w 30 -h 25 -i "SHAPES_confirm.png" -c shapesCombo_updateCombo -ann "Update combo";
            iconTextButton -w 30 -h 25 -i "SHAPES_dismiss.png" -c shapesCombo_cancelEditCombo -ann "Cancel";
        }
        //
        // edit sequence
        //
        else
        {
            iconTextButton -w 30 -h 25 -i "SHAPES_sequenceTargetAdd.png" -c "shapesDriver_addRemoveSequenceItems 1" -ann "Add to sequence";
            iconTextButton -w 30 -h 25 -i "SHAPES_sequenceTargetRemove.png" -c "shapesDriver_addRemoveSequenceItems 0" -ann "Remove from sequence";
            image -image "SHAPES_separator.png";
            iconTextButton -w 30 -h 25 -i "SHAPES_sequenceOrder.png" -c shapesDriver_orderSequence -ann "Sort ascending";
            image -image "SHAPES_separator.png";
            optionMenu -l "Type" shpUI_sequenceCurveOption;
                menuItem -l "Smooth";
                menuItem -l "Linear";
                menuItem -l "Silke";
            separator -hr 0 -h 20 -w 12 -style "none";
            iconTextButton -w 30 -h 25 -i "SHAPES_confirm.png" -c shapesDriver_updateSequence -ann "Update sequence";
            iconTextButton -w 30 -h 25 -i "SHAPES_dismiss.png" -c shapesDriver_cancelEditSequence -ann "Cancel";
        }
        setParent ..;
    }
}


// ------------------------------------------------------------------------------------------------
// animation ui
// ------------------------------------------------------------------------------------------------

global proc shapesUI_showAnimationUI()
{
    //
    // activates the animation layout in the animation frame
    //
    setParent shpUI_animationFrame;

        rowLayout -nc 10 shpUI_animationLayout;
            iconTextButton -w 26 -h 25 -i "SHAPES_keyWeightZero.png" -c "shapesAnimation_keyWeight 0" -ann "Key selected with zero weight";
            iconTextButton -w 26 -h 25 -i "SHAPES_keyWeightValue.png" -c "shapesAnimation_keyWeight 0.5" -ann "Key selected with current weight";
            iconTextButton -w 26 -h 25 -i "SHAPES_keyWeightFull.png" -c "shapesAnimation_keyWeight 1" -ann "Key selected with full weight";
            image -image "SHAPES_separator.png";
            iconTextButton -w 26 -h 25 -i "SHAPES_trash.png" -c "shapesAnimation_keyWeight -1" -ann "Remove key at current frame";
            iconTextButton -w 26 -h 25 -i "SHAPES_keyDeleteAll.png" -c "shapesAnimation_keyWeight -3" -ann "Remove all keys";
            image -image "SHAPES_separator.png";
            iconTextButton -w 26 -h 25 -i "SHAPES_keyWeightRange.png" -c "shapesAnimation_keyWeight 2" -ann "Key selected with range";
            intFieldGrp -l "Pre/Post" -nf 1 -v1 5 -cw2 55 30 -ct2 "right" "both" -co2 4 0 shpUI_keyPaddingField;
            iconTextButton -w 26 -h 25 -i "SHAPES_keyDeleteRange.png" -c "shapesAnimation_keyWeight -2" -ann "Removes the key at the current frame and the previous and next key with a zero value";
        setParent ..;

        rowLayout -nc 7;
            symbolCheckBox  -w 25
                            -h 25
                            -i "SHAPES_shotFix.png"
                            -cc "shapesUI_toggleShotFixUI #1"
                            -ann "Toggle shot fix mode"
                            shpUI_shotFixCheck;
            iconTextCheckBox    -w 55
                                -h 25
                                -st "textOnly"
                                -l "Reset"
                                -en 0
                                -onc shapesAnimation_shotFixResetChannels
                                -ofc "$gShapes_shotFixReset = 0; currentTime `currentTime -q`;"
                                -ann "Reset mesh"
                                shpUI_shotFixRestCheck;
            image -image "SHAPES_separator.png";
            iconTextButton -w 26 -h 25 -i "SHAPES_drivenSetPreviousKey.png" -en 0 -c "shapesAnimation_jumpToNextShape -1" -ann "Move to previous shape" shpUI_shotFixPreviousButton;
            iconTextButton -w 26 -h 25 -i "SHAPES_drivenSetNextKey.png" -en 0 -c "shapesAnimation_jumpToNextShape 1" -ann "Move to next shape" shpUI_shotFixNextButton;
            image -image "SHAPES_separator.png";
            textFieldGrp -l "Prefix" -cw2 35 107 -ct2 "right" "both" -co2 4 0 -en 0 shpUI_shotPrefixField;
        setParent ..;

    setParent ..;
}


global proc shapesUI_toggleShotFixUI( int $state )
{
    iconTextCheckBox -e -en $state shpUI_shotFixRestCheck;
    if (!$state)
        iconTextCheckBox -e -v 0 shpUI_shotFixRestCheck;
    iconTextButton -e -en $state shpUI_shotFixPreviousButton;
    iconTextButton -e -en $state shpUI_shotFixNextButton;
    textFieldGrp -e -en $state shpUI_shotPrefixField;

    if ($state)
        shapesAnimation_shotFixGetPrefix;
}


// ------------------------------------------------------------------------------------------------
// shape weights ui
// ------------------------------------------------------------------------------------------------

global proc shapesUI_showWeightsUI()
{
    //
    // activates the shape weights layout in the weights frame
    //
    setParent shpUI_weightsFrame;

        rowLayout -nc 13 shpUI_shapeWeightsLayout;
            iconTextButton -w 28 -h 25 -i "SHAPES_weightPaint.png" -c shapesWeights_paintShapeWeights -ann "Paint weights for the selected shape" shpUI_paintWeightsButton;
            popupMenu shpUI_paintWeightsPopup;
            image -image "SHAPES_separator.png";
            iconTextButton -w 25 -h 25 -i "SHAPES_weightCopy.png" -c shapesWeights_copyShapeWeights -ann "Copy shape weights";
            iconTextButton -w 25 -h 25 -i "SHAPES_weightPaste.png" -c "shapesWeights_removeShapeWeights 1 {}" -ann "Paste shape weights";
            iconTextButton -w 25 -h 25 -i "SHAPES_weightInvert.png" -c shapesWeights_invertShapeWeights -ann "Invert shape weights";
            popupMenu shpUI_mirrorWeightsPopup;
                menuItem -l "Flip" -p shpUI_mirrorWeightsPopup -c "shapesWeights_mirrorSelectedShapeWeights 1" shpUI_flipWeightsItem;
                menuItem -l "Mirror" -p shpUI_mirrorWeightsPopup -c "shapesWeights_mirrorSelectedShapeWeights 0" shpUI_mirrorWeightsItem;
            iconTextButton -w 25 -h 25 -i "SHAPES_weightTrimL.png" -c "shapesWeights_trimShapeWeights 0" -ann "Trim shape weights on negative axis";
            iconTextButton -w 25 -h 25 -i "SHAPES_weightTrimR.png" -c "shapesWeights_trimShapeWeights 1" -ann "Trim shape weights on positive axis";
            image -image "SHAPES_separator.png";
            string $cmd = "shapesWeights_exportShapeWeights \"\" \"\" 0 0 0";
            iconTextButton -w 25 -h 25 -i "SHAPES_weightExport.png" -c $cmd -ann "Export shape weights" shpUI_exportWeightsButton;
            popupMenu shpUI_exportFreezePopup;
            iconTextButton -w 25 -h 25 -i "SHAPES_weightImport.png" -c "shapesWeights_importShapeWeights 0 0" -ann "Import selected weights from the list" shpUI_importWeightsButton;
            popupMenu shpUI_importFreezePopup;
            image -image "SHAPES_separator.png";
            iconTextButton -w 25 -h 25 -i "SHAPES_weightFreeze.png" -c "shapesWeights_freezeShapeWeights {}" -ann "Freeze and delete shape weights";
            iconTextButton -w 25 -h 25 -i "SHAPES_trash.png" -c "shapesWeights_removeShapeWeights 0 {}" -ann "Delete shape weights";
        setParent ..;

        shapesUI_freezePopupMenuItems();

        string $weightListForm = `formLayout`;

            int $value = `optionVar -q SHAPESWeightTreeSize`;
            textScrollList -h $value -ams 0 -en 1 -dcc "shapesWeights_renameWeightMap weights" shpUI_shapeWeightsList;
            popupMenu shpUI_shapeWeightContextMenu;
                menuItem -l "Add To Current" -en 0 -c "shapesWeights_combineWeightMap 1";
                menuItem -l "Subtract From Current" -en 0 -c "shapesWeights_combineWeightMap 0";
                menuItem -d 1;
                menuItem -l "Duplicate" -en 0 -c "shapesWeights_duplicateWeightMap weights 0";
                menuItem -d 1;
                menuItem -l "Create Backup" -en 0 -c "shapesWeights_duplicateWeightMap weights 1";
                menuItem -l "Load Backup" -en 0 -c "shapesWeights_importShapeWeights 0 1";
                menuItem -d 1;
                menuItem -l "Show File" -en 0 -c "shapesWeights_showMapFile weights";
                menuItem -d 1;
                menuItem -l "Delete" -en 0 -c "shapesWeights_deleteWeightMap weights";
            string $shrinkButton = `iconTextButton -w 22 -h 25 -i "SHAPES_listRetract.png" -c "shapesUI_resizeScrollList 0 weight" -ann "Shrink weight list"`;
            listResizePopupMenu("shpUI_shapeWeightsList");
            string $growButton = `iconTextButton -w 22 -h 25 -i "SHAPES_listExpand.png" -c "shapesUI_resizeScrollList 1 weight" -ann "Grow weight list"`;
            listResizePopupMenu("shpUI_shapeWeightsList");

            formLayout  -e

                        -af shpUI_shapeWeightsList "top" 0
                        -af shpUI_shapeWeightsList "bottom" 0
                        -af shpUI_shapeWeightsList "left" 1
                        -af $shrinkButton "top" 0
                        -af $shrinkButton "right" 5
                        -af $growButton "right" 5

                        -ac shpUI_shapeWeightsList "right" 3 $shrinkButton
                        -ac $growButton "top" 3 $shrinkButton

                        $weightListForm;
        setParent ..;

    setParent ..;

    shapesUtil_buildImportMenu "shpUI_shapeWeightsList";

    // callback for the select command of the scroll list
    textScrollList -e -sc "shapesUI_toggleWeightsContextMenu 1" shpUI_shapeWeightsList;
}


global proc shapesUI_toggleWeightsUI( int $enable )
{
    //
    // enable/disable the weights buttons based on the sculpt mode
    //
    string $items[] = `rowLayout -q -ca shpUI_shapeWeightsLayout`;
    for ($i in $items)
        control -e -m 1 $i;

    if ($enable)
    {
        shapesUI_freezePopupMenuItems();

        string $cmd = "shapesWeights_exportShapeWeights \"\" \"\" 0 0 0";
        iconTextButton -e -c $cmd -ann "Export shape weights" shpUI_exportWeightsButton;
        iconTextButton -e -c "shapesWeights_importShapeWeights 0 0" -ann "Import selected weights from the list" shpUI_importWeightsButton;
    }
    else
    {
        deleteUI shpUI_exportFreezeItem;
        deleteUI shpUI_importFreezeItem;

        string $cmd = "shapesWeights_exportShapeWeights \"\" \"\" 1 0 0";
        iconTextButton -e -m (!$enable) -c $cmd -ann "Save frozen areas to weight map" shpUI_exportWeightsButton;
        iconTextButton -e -m (!$enable) -c "shapesWeights_importShapeWeights 1 0" -ann "Load frozen areas from weight map" shpUI_importWeightsButton;
    }
}


global proc shapesUI_freezePopupMenuItems()
{
    //
    // create the freeze map export and import menu items
    //
    menuItem -l "Export Frozen" -p shpUI_exportFreezePopup -c "shapesWeights_exportShapeWeights \"\" \"\" 1 0 0" -ann "Save frozen areas to weight map" shpUI_exportFreezeItem;
    menuItem -l "Import Frozen" -p shpUI_importFreezePopup -c "shapesWeights_importShapeWeights 1 0" -ann "Load frozen areas from weight map" shpUI_importFreezeItem;
}


global proc shapesUI_paintWeightsToggleUI( int $enable )
{
    //
    // disables/enables ui elements
    // based on entering/exiting the paint weights mode
    //
    // set the sculpt mode options enable state
    shapesUI_manageUIModeDependencies 1 1 $enable;

    // remove all popup menu items
    $items = `popupMenu -q -ia shpUI_paintWeightsPopup`;
    for ($i in $items)
        deleteUI $i;

    if (!$enable)
    {
        iconTextButton  -e
                        -i "SHAPES_weightPaintActive.png"
                        -c shapesWeights_exitPaintShapeWeights
                        -ann "Exit paint weights mode"
                        shpUI_paintWeightsButton;
        // disable the target list
        treeView -e -en 0 shpUI_targetTree;

        menuItem -l "Toggle Brush Reflection" -p shpUI_paintWeightsPopup -c "ArtPaintBlendShapeWeightsTool; artisanToggleReflection;";
        menuItem -l "Toggle Color Ramp" -p shpUI_paintWeightsPopup -c "artAttrCtx -e -ucr (1 - `artAttrCtx -q -ucr artAttrBlendShapeContext`) artAttrBlendShapeContext;";
        menuItem -d 1 -p shpUI_paintWeightsPopup;
        menuItem -l "Set Brush Color To White" -p shpUI_paintWeightsPopup -c "artAttrCtx -e -value 1 `currentCtx`";
        shapesUI_addPaintValueSubMenu "Set Brush Color" "shpUI_paintWeightsPopup" "artAttrCtx -e -value" "`currentCtx`";
        menuItem -l "Set Brush Color To Black" -p shpUI_paintWeightsPopup -c "artAttrCtx -e -value 0 `currentCtx`";
        menuItem -d 1 -p shpUI_paintWeightsPopup;
        menuItem -l "Flush Vertices With White" -p shpUI_paintWeightsPopup -c ("shapesWeights_shapeWeightsFlush 1 -1");
        shapesUI_addPaintValueSubMenu "Flush Vertices" "shpUI_paintWeightsPopup" "shapesWeights_shapeWeightsFlush" "-1";
        menuItem -l "Flush Vertices With Black" -p shpUI_paintWeightsPopup -c ("shapesWeights_shapeWeightsFlush 0 -1");
        menuItem -d 1 -p shpUI_paintWeightsPopup;
        menuItem -l "Smooth" -p shpUI_paintWeightsPopup -c shapesWeights_smoothShapeWeights;
    }
    else
    {
        iconTextButton  -e
                        -i "SHAPES_weightPaint.png"
                        -c shapesWeights_paintShapeWeights
                        -ann "Paint weights for the selected shape"
                        shpUI_paintWeightsButton;

        // if there are targets in the list enable the list
        string $items[] = shapesData_getTargetList();
        if ($items[0] != "No shapes")
            treeView -e -en 1 shpUI_targetTree;
    }
}


global proc shapesUI_toggleWeightsContextMenu( int $enable )
{
    //
    // enable/disable the right-click menu for the weights list
    //
    if (`popupMenu -ex shpUI_shapeWeightContextMenu`)
    {
        string $items[] = `popupMenu -q -ia shpUI_shapeWeightContextMenu`;
        for ($i in $items)
            menuItem -e -en $enable $i;
    }
}


global proc shapesUI_addPaintValueSubMenu( string $label, string $parent, string $cmd1, string $cmd2 )
{
    //
    // add a sub menu for painting or setting values
    //
    menuItem -l ($label + "...") -p $parent -sm 1 -tearOff 1;
        menuItem -l "0.9" -c ($cmd1 + " " + 0.9 + " " + $cmd2);
        menuItem -l "0.8" -c ($cmd1 + " " + 0.8 + " " + $cmd2);
        menuItem -l "0.7" -c ($cmd1 + " " + 0.7 + " " + $cmd2);
        menuItem -l "0.6" -c ($cmd1 + " " + 0.6 + " " + $cmd2);
        menuItem -l "0.5" -c ($cmd1 + " " + 0.5 + " " + $cmd2);
        menuItem -l "0.4" -c ($cmd1 + " " + 0.4 + " " + $cmd2);
        menuItem -l "0.3" -c ($cmd1 + " " + 0.3 + " " + $cmd2);
        menuItem -l "0.2" -c ($cmd1 + " " + 0.2 + " " + $cmd2);
        menuItem -l "0.1" -c ($cmd1 + " " + 0.1 + " " + $cmd2);
    setParent -m ..;
}


// ------------------------------------------------------------------------------------------------
// region ui
// ------------------------------------------------------------------------------------------------

global proc shapesUI_showRegionUI()
{
    //
    // activates the region layout in the region frame
    //
    setParent shpUI_regionFrame;

        string $regionForm = `formLayout shpUI_regionLayout`;

            string $buttonNew = `iconTextButton -w 25 -h 25 -i "SHAPES_regionNew.png" -c "shapesRegion_editRegionMap 1" -ann "New region map"`;
            string $buttonEdit = `iconTextButton -w 25 -h 25 -i "SHAPES_regionEdit.png" -c "shapesRegion_editRegionMap 0" -ann "Edit region map"`;

            string $sep1 = `image -image "SHAPES_separator.png"`;
            string $buttonLoad = `iconTextButton -w 25 -h 25 -i "SHAPES_weightImport.png" -c "shapesRegion_loadRegionMap 0" -ann "Load region map"`;
            popupMenu;
                menuItem -l "Unload" -en 0 -c "shapesRegion_clearRegionData \"\"" shpUI_unloadRegionItem;
            string $nameField = `textField -ed 0 shpUI_currentRegionNameField`;
            string $sep2 = `image -image "SHAPES_separator.png"`;
            string $buttonExtract = `iconTextButton -w 28 -h 25 -i "SHAPES_regionExtract.png" -c "shapesRegion_extractRegionMap 1" -ann "Extract region map to targets"`;
            popupMenu;
                menuItem -l "Extract To Existing" -c "shapesRegion_extractRegionMap 0";
            string $buttonExport = `iconTextButton -w 28 -h 25 -i "SHAPES_weightExport.png" -c shapesRegion_exportRegionsToWeights -ann "Export region map as weight maps"`;

            formLayout  -e

                        -af $buttonNew "top" 1
                        -af $buttonNew "left" 1
                        -af $buttonEdit "top" 1
                        -af $sep1 "top" 1
                        -af $buttonLoad "top" 1
                        -af $nameField "top" 1
                        -af $sep2 "top" 1
                        -af $buttonExtract "top" 1
                        -af $buttonExport "top" 1
                        -af $buttonExport "right" 13

                        -ac $buttonEdit "left" 0 $buttonNew
                        -ac $sep1 "left" 0 $buttonEdit
                        -ac $buttonLoad "left" 0 $sep1
                        -ac $nameField "left" 5 $buttonLoad
                        -ac $nameField "right" 5 $sep2
                        -ac $sep2 "right" 2 $buttonExtract
                        -ac $buttonExtract "right" 2 $buttonExport

                        $regionForm;

        setParent ..;

        //--------------
        // color buttons
        //--------------

        rowLayout -nc 11 -en 0 shpUI_colorButtonsLayout;

            iconTextButton -w 28 -h 25 -i "SHAPES_weightPaint.png" -c "shapesRegion_enterPaintRegionMode 0" -ann "Paint regions for the selected shape" shpUI_paintRegionButton;
            popupMenu shpUI_paintRegionPopup;

            image -image "SHAPES_separator.png";

            for ($i = 0; $i < 6; $i ++)
            {
                iconTextButton -w 32 -h 25 -i ("SHAPES_regionColor" + ($i + 1) + ".png") -c ("shapesRegion_paintRegionColor " + $i) ("shpUI_regionColor" + $i);
                popupMenu ("shpUI_regionColorMenu" + $i);
                menuItem -l "Toggle Brush Reflection" -c "ArtPaintBlendShapeWeightsTool; artisanToggleReflection;";
                menuItem -l "Toggle Color Ramp" -c "artAttrCtx -e -ucr (1 - `artAttrCtx -q -ucr artAttrBlendShapeContext`) artAttrBlendShapeContext;";
                menuItem -d 1;
                menuItem -l "Set Brush Color To White" -c "artAttrCtx -e -value 1 `currentCtx`";
                shapesUI_addPaintValueSubMenu "Set Brush Color" ("shpUI_regionColorMenu" + $i) "artAttrCtx -e -value" "`currentCtx`";
                menuItem -l "Set Brush Color To Black" -c "artAttrCtx -e -value 0 `currentCtx`";
                menuItem -d 1;
                menuItem -l "Flush Vertices With White" -c ("shapesWeights_shapeWeightsFlush 1 " + $i);
                shapesUI_addPaintValueSubMenu "Flush Vertices" ("shpUI_regionColorMenu" + $i) "shapesWeights_shapeWeightsFlush" i;
                menuItem -l "Flush Vertices With Black" -c ("shapesWeights_shapeWeightsFlush 0 " + $i);
                menuItem -d 1;
                menuItem -l "Invert" -c ("shapesRegion_invertRegionWeights " + $i);
                menuItem -l "Mirror" -c ("shapesRegion_mirrorRegionWeights " + $i) shpUI_mirrorRegionWeightsItem;
                menuItem -d 1;
                menuItem -l "Smooth Region" -c ("if (!shapesRegion_regionIsLocked(" + $i + ")) { ArtPaintBlendShapeWeightsTool; artAttrCtx -e -sao \"smooth\" `currentCtx`; artAttrCtx -e -clear `currentCtx`; artAttrCtx -e -sao \"absolute\" `currentCtx`;}");
                menuItem -l "Set From Weight Map" -c ("shapesRegion_setFromSelectedWeightMap " + $i);
                menuItem -d 1;
                menuItem -l "Lock/Unlock" -c ("shapesRegion_lockRegion " + $i);
                menuItem -d 1;
                menuItem -l "Clear" -c ("shapesRegion_clearRegion " + $i);
            }

            image -image "SHAPES_separator.png";

            iconTextButton -w 28 -h 25 -en 0 -i "SHAPES_regionColors.png" -c "shapesRegion_showFullColorMap 1" -ann "Display all regions with a color gradient" shpUI_regionShowColors;
            iconTextButton -w 28 -h 25 -en 0 -i ("SHAPES_regionPartials" + `optionVar -q SHAPESColorDisplayPartialWeights` + ".png") -c "shapesRegion_showFullColorMap 0" -ann "Display all partial weights. Right-click to assign the partial weights to a region in object or component mode." shpUI_regionShowPartials;
            popupMenu shpUI_assignPartialWeightsMenu;

        setParent ..;

        shapesUI_enableRegionColorButtonMenu 0;

        //--------------
        // region list
        //--------------

        string $regionListForm = `formLayout`;

            int $value = `optionVar -q SHAPESRegionTreeSize`;
            textScrollList -h $value -ams 0 -en 1 -dcc "shapesWeights_renameWeightMap region" shpUI_regionList;
            popupMenu;
                menuItem -l "Duplicate" -en 0 -c "shapesWeights_duplicateWeightMap region 0" shpUI_duplicateRegionItem;
                menuItem -d 1;
                menuItem -l "Create Backup" -en 0 -c "shapesWeights_duplicateWeightMap region 1" shpUI_createBackupRegionItem;
                menuItem -l "Load Backup" -en 0 -c "shapesRegion_loadRegionMap 1" shpUI_loadRegionBackupItem;
                menuItem -d 1;
                menuItem -l "Show File" -en 0 -c "shapesWeights_showMapFile region" shpUI_showRegionFileItem;
                menuItem -d 1;
                menuItem -l "Delete" -en 0 -c "shapesWeights_deleteWeightMap region" shpUI_deleteRegionItem;
            string $shrinkButton = `iconTextButton -w 22 -h 25 -i "SHAPES_listRetract.png" -c "shapesUI_resizeScrollList 0 region" -ann "Shrink region list"`;
            listResizePopupMenu("shpUI_regionList");
            string $growButton = `iconTextButton -w 22 -h 25 -i "SHAPES_listExpand.png" -c "shapesUI_resizeScrollList 1 region" -ann "Grow region list"`;
            listResizePopupMenu("shpUI_regionList");

            formLayout  -e

                        -af shpUI_regionList "top" 0
                        -af shpUI_regionList "bottom" 0
                        -af shpUI_regionList "left" 1
                        -af $shrinkButton "top" 0
                        -af $shrinkButton "right" 5
                        -af $growButton "right" 5

                        -ac shpUI_regionList "right" 3 $shrinkButton
                        -ac $growButton "top" 3 $shrinkButton

                        $regionListForm;
        setParent ..;

    setParent ..;

    shapesUtil_buildImportMenu "shpUI_regionList";

    // callback for the select command of the scroll list
    textScrollList -e -sc "shapesUI_toggleRegionListMenuItems 1" shpUI_regionList;
}


global proc shapesUI_toggleRegionListMenuItems( int $state )
{
    //
    // activate/deactivate the region list popup menu items
    //
    menuItem -e -en $state shpUI_duplicateRegionItem;
    menuItem -e -en $state shpUI_createBackupRegionItem;
    menuItem -e -en $state shpUI_loadRegionBackupItem;
    menuItem -e -en $state shpUI_showRegionFileItem;
    menuItem -e -en $state shpUI_deleteRegionItem;
}


global proc shapesUI_buildRegionLabelUI( int $new )
{
    //
    // build the index window for the regions
    //
    global string $gShapes_bsNode;

    string $left[];
    string $right[];
    shapesUI_getUserIdentifierList($left, $right);
    shapesUI_checkIdentifierPrefs;

    if (`window -ex SHAPESRegionSettingsWin`)
        deleteUI SHAPESRegionSettingsWin;

    if (`windowPref -ex SHAPESRegionSettingsWin`)
        windowPref -r SHAPESRegionSettingsWin;

    window -t "Region Map Settings" -w 450 -h 214 SHAPESRegionSettingsWin;

    string $labelForm = `formLayout`;

        string $listLayout = `columnLayout -adj 1`;

            string $nameForm = `formLayout`;
            string $label = `text -l "Map Name"`;
            string $field = `textFieldGrp -w 227 shpUI_regionNameField`;
            string $parentCheck = `checkBox -l "Parent To Source Shape" shpUI_regionParentCheck`;
            formLayout  -e

                        -af $label "top" 5
                        -af $label "left" 5
                        -af $field "top" 0
                        -af $parentCheck "top" 2

                        -ac $field "left" 10 $label
                        -ac $parentCheck "left" 6 $field

                        $nameForm;
        setParent ..;

        separator -style "none" -h 10;

        // get the weight maps for the custom split option
        string $exportPath = shapesUtil_getExportPath("/weights/" + $gShapes_bsNode, 0);
        string $maps[];
        if ($exportPath != "")
            $maps = `getFileList -fld $exportPath -fs ("*" + shapesWeights_getFileExtension("bsw"))`;

        for ($i = 0; $i < 6; $i ++)
        {
            string $regionRowForm = `formLayout`;

                string $button = `image -i ("SHAPES_regionColor" + ($i + 1) + ".png") -w 25 -h 25`;

                string $label = `textField -tx "" -w 100 ("shpUI_regionLabel" + $i)`;

                popupMenu;
                    menuItem -l "<shape>" -c ("shapesUI_insertRegionLabelKeyword " + $label + " \"<shape>\"");
                    menuItem -d 1;
                    for ($r in stringToStringArray(shapesUI_getUserRegionLabels(), ", "))
                        menuItem -l $r -c ("shapesUI_insertRegionLabelKeyword " + $label + " " + $r);

                string $split = `checkBox -l "Split" ("shpUI_regionSplitCheck" + $i)`;

                string $splitMapField = `textField -tx "" -w 80 -ed 0 ("shpUI_regionSplitMapField" + $i)`;
                popupMenu -b 1 -p $splitMapField shpUI_customSplitMapPopUp;
                    menuItem -l "Clear" -c ("shapesUI_setCustomRegionSplitMap " + $i + " Clear");
                    menuItem -d 1;
                    for ($m in $maps)
                    {
                        string $name[] = stringToStringArray($m, ".");
                        menuItem -l $name[0] -c ("shapesUI_setCustomRegionSplitMap " + $i + " " + $name[0]);
                    }

                string $blendLabel = `text -l "Blend"`;

                string $value = `floatField -pre 2 -w 40 ("shpUI_regionSplitWidth" + $i)`;

                string $identLabel = `text -l "Identifier"`;

                string $identifier = `textField -tx "" -ed 0 -w 60 ("shpUI_regionIdentifier" + $i)`;
                popupMenu -b 1 -p $identifier;
                    menuItem -l "Clear" -c ("textField -e -tx \"\" " + $identifier);
                    menuItem -d 1;
                    for ($r in $left)
                        menuItem -l $r -c ("textField -e -tx " + $r + " " + $identifier);

                formLayout  -e

                            -af $button "top" 0
                            -af $button "left" 3
                            -af $label "top" 0
                            -af $split "top" 2
                            -af $splitMapField "top" 0
                            -af $blendLabel "top" 4
                            -af $value "top" 0
                            -af $identLabel "top" 4
                            -af $identifier "top" 0
                            -af $identifier "right" 10

                            -ac $label "left" 5 $button
                            -ac $label "right" 5 $split
                            -ac $split "right" 6 $splitMapField
                            -ac $splitMapField "right" 12 $blendLabel
                            -ac $blendLabel "right" 2 $value
                            -ac $value "right" 15 $identLabel
                            -ac $identLabel "right" 5 $identifier

                            $regionRowForm;
            setParent ..;
        }

        setParent ..;

        string $button = `button -l "Set" -h 25 -c ("shapesRegion_storeRegionMap " + $new)`;

        formLayout  -e

                    -af $listLayout "top" 5
                    -af $listLayout "left" 0
                    -af $listLayout "bottom" 25
                    -af $listLayout "right" 0
                    -af $button "left" 0
                    -af $button "right" 0
                    -af $button "bottom" 0

                    -ac $button "top" 0 $listLayout

                    $labelForm;
    setParent ..;

    showWindow SHAPESRegionSettingsWin;
}


global proc shapesUI_setCustomRegionSplitMap( int $id, string $label )
{
    //
    // sets the custom split map from the split map option menu
    //
    if ($label == "Clear")
        $label = "";
    textField -e -tx $label -fn "plainLabelFont" ("shpUI_regionSplitMapField" + $id);
}


global proc shapesUI_enableRegionColorButtonMenu( int $enable )
{
    //
    // enables/disables the popup menu for the region color buttons
    //
    for ($i = 0; $i < 6; $i ++)
    {
        string $items[] = `popupMenu -q -ia ("shpUI_regionColorMenu" + $i)`;
        for ($menu in $items)
            menuItem -e -en $enable $menu;
    }
}


global proc shapesUI_insertRegionLabelKeyword( string $label, string $placeholder )
{
    //
    //  adds or insets the placeholder for the region label
    //
    string $name = `textField -q -tx $label`;
    if ($name == "")
        textField -e -tx $placeholder $label;
    else
        textField -e -it $placeholder $label;
}


global proc shapesUI_refreshFileLists()
{
    //
    // reloads the file lists for weight and region maps
    //
    // refresh the weights list
    if (`rowLayout -ex shpUI_shapeWeightsLayout`)
        shapesUtil_buildImportMenu "shpUI_shapeWeightsList";

    // refresh the region list
    if (`formLayout -ex shpUI_regionLayout`)
        shapesUtil_buildImportMenu "shpUI_regionList";
}


// ------------------------------------------------------------------------------------------------
// influence map ui
// ------------------------------------------------------------------------------------------------

global proc shapesUI_buildInfluenceMapUI()
{
    //
    // build the creation window for the influence map
    //
    global string $gShapes_selectedTarget;

    if (`window -ex SHAPESInfluenceMapSettingsWin`)
        deleteUI SHAPESInfluenceMapSettingsWin;

    if (`windowPref -ex SHAPESInfluenceMapSettingsWin`)
        windowPref -r SHAPESInfluenceMapSettingsWin;

    window -t "Define Influence Map" -w 375 -h 214 SHAPESInfluenceMapSettingsWin;

    string $labelForm = `formLayout`;

        string $listLayout = `columnLayout -adj 1 -co "left" 5`;

            string $nameForm = `formLayout`;
            string $label = `text -l "Group Name"`;
            string $field = `textFieldGrp -tx ($gShapes_selectedTarget + "_influenceMap_group") shpUI_influenceMapNameField`;
            formLayout  -e

                        -af $label "top" 5
                        -af $label "left" 2
                        -af $field "top" 0

                        -ac $field "left" 10 $label

                        $nameForm;
        setParent ..;

        separator -style "none" -h 10;

        columnLayout -adj 1 shpUI_influenceMapItemLayout;
        setParent ..;

        columnLayout;
            separator -st "none" -h 10;
            button -l "Add Influence" -c shapesUI_addInfluenceMapItem;
            separator -st "none" -h 10;
        setParent ..;

        setParent ..;

        string $button = `button -l "Create And Connect" -h 25 -c shapesWeights_performCreateInfluenceMap`;

        formLayout  -e

                    -af $listLayout "top" 5
                    -af $listLayout "left" 0
                    -af $listLayout "bottom" 25
                    -af $listLayout "right" 0
                    -af $button "left" 0
                    -af $button "right" 0
                    -af $button "bottom" 0

                    -ac $button "top" 0 $listLayout

                    $labelForm;
    setParent ..;

    showWindow SHAPESInfluenceMapSettingsWin;
}


global proc shapesUI_addInfluenceMapItem()
{
    //
    // create a new influence map item
    //
    string $left[];
    string $right[];
    shapesUI_getUserIdentifierList($left, $right);
    shapesUI_checkIdentifierPrefs;

    string $strings[] = shapesUI_getInfluenceMapStrings();
    string $fill[] = stringToStringArray($strings[size($strings) - 1], ",");

    setParent shpUI_influenceMapItemLayout;

    string $rowForm = `formLayout`;

        string $label = `textField -tx $fill[0] -w 100`;

        popupMenu;
            menuItem -l "<shape>" -c ("shapesUI_insertRegionLabelKeyword " + $label + " \"<shape>\"");
            menuItem -d 1;
            for ($r in stringToStringArray(shapesUI_getUserRegionLabels(), ", "))
                menuItem -l $r -c ("shapesUI_insertRegionLabelKeyword " + $label + " " + $r);

        string $identLabel = `text -l "Identifier"`;

        string $identifier = `textField -tx $fill[1] -ed 0 -w 60`;
        popupMenu -b 1 -p $identifier;
            menuItem -l "Clear" -c ("textField -e -tx \"\" " + $identifier);
            menuItem -d 1;
            for ($r in $left)
                menuItem -l $r -c ("textField -e -tx " + $r + " " + $identifier);

        string $btnCmd = "deleteUI " + $rowForm;
        string $delete = `iconTextButton -st "iconOnly" -i "smallTrash.png" -c $btnCmd`;

            formLayout  -e

                        -af $label "top" 3
                        -af $label "left" 0
                        -af $identLabel "top" 7
                        -af $identifier "top" 3
                        -af $delete "top" 2
                        -af $delete "right" 5

                        -ac $label "right" 15 $identLabel
                        -ac $identLabel "right" 5 $identifier
                        -ac $identifier "right" 10 $delete

                        $rowForm;
        setParent ..;
}


global proc string[] shapesUI_getInfluenceMapStrings()
{
    //
    // return the names and identifiers of the influence items
    //
    string $strings[];

    string $items[] = `columnLayout -q -ca shpUI_influenceMapItemLayout`;
    if (`gmatch $items[0] "formLayout*"`)
    {
        for ($i = 0; $i < size($items); $i ++)
        {
            string $ctrls[] = `formLayout -q -ca $items[$i]`;
            if (size($ctrls) > 1)
            {
                string $txt1 = `textField -q -tx $ctrls[0]`;
                string $txt2 = `textField -q -tx $ctrls[2]`;
                $strings[size($strings)] = $txt1 + "," + $txt2;
            }
        }
    }
    else
        $strings[0] = shapesUI_getInfluenceMapGroupName();

    return $strings;
}


global proc string shapesUI_getInfluenceMapGroupName()
{
    //
    // return the group name of the influence map
    //
    string $parent = `columnLayout -q -p shpUI_influenceMapItemLayout`;
    string $items[] = `columnLayout -q -ca $parent`;
    $items = `formLayout -q -ca $items[0]`;
    string $group = `textFieldGrp -q -tx $items[1]`;

    return $group;
}


// ------------------------------------------------------------------------------------------------
// create weights controller
// ------------------------------------------------------------------------------------------------

global proc shapesUI_buildCreateWeightsControllerUI(string $shape, int $index )
{
    //
    // opens the window for setting the export/update parameters
    //
    if (`window -ex SHAPESWeightsControllerWin`)
        deleteUI SHAPESWeightsControllerWin;

    if (`windowPref -ex SHAPESWeightsControllerWin`)
        windowPref -r SHAPESWeightsControllerWin;

    window -t "Create Weights Controller" -w 300 -h 100 SHAPESWeightsControllerWin;

    string $form = `formLayout`;

        string $radioGrp1 = `radioButtonGrp -nrb 2 -l "Node" -la2 "Ramp Weights" "Weights Server" -cw3 30 120 100 -ct3 "left" "left" "left" -co3 0 15 10`;
        string $radioGrp2 = `radioButtonGrp -nrb 2 -l "Type" -la2 "Default" "Influence Map" -cw3 30 120 100 -ct3 "left" "left" "left" -co3 0 15 10`;
        string $nodeOptionLayout = `columnLayout -adj 1`;

        setParent $form;

        string $createBtn = `button -l "Create" -h 30 -c ("shapesWeights_createWeightsController " + $shape + " " + $index + " " + $radioGrp1 + " " + $radioGrp2 + " " + $nodeOptionLayout)`;
        string $cancelBtn = `button -l "Cancel" -h 30 -c "deleteUI SHAPESWeightsControllerWin"`;

        setParent $form;

        formLayout  -e

                    -af $radioGrp1 "top" 5
                    -af $radioGrp1 "left" 5
                    -af $radioGrp1 "right" 5
                    -af $radioGrp2 "left" 5
                    -af $radioGrp2 "right" 5
                    -af $nodeOptionLayout "left" 5
                    -af $nodeOptionLayout "right" 5
                    -af $createBtn "bottom" 5
                    -af $createBtn "left" 5
                    -af $cancelBtn "bottom" 5
                    -af $cancelBtn "right" 5

                    -ac $radioGrp1 "bottom" 3 $radioGrp2
                    -ac $radioGrp2 "bottom" 10 $nodeOptionLayout
                    -ac $nodeOptionLayout "bottom" 10 $createBtn

                    -ap $createBtn "right" 3 50
                    -ap $cancelBtn "left" 3 50

                    $form;

        radioButtonGrp -e -sl (`optionVar -q SHAPESWeightsControllerType`) -cc ("shapesUI_updateWeightsControllerOption " + $radioGrp1 + " " + $radioGrp2 + " " + $nodeOptionLayout) $radioGrp1;
        radioButtonGrp -e -sl (`optionVar -q SHAPESWeightsServerType`) -cc ("optionVar -iv SHAPESWeightsServerType (`radioButtonGrp -q -sl " + $radioGrp2 + "`)") $radioGrp2;
        shapesUI_updateWeightsControllerOption $radioGrp1 $radioGrp2 $nodeOptionLayout;

    showWindow SHAPESWeightsControllerWin;
}


global proc shapesUI_updateWeightsControllerOption( string $radioGrp1, string $radioGrp2, string $nodeOptionLayout )
{
    //
    // updates the list of available rampWeights and weightsServer nodes
    //
    setParent $nodeOptionLayout;

    string $controls[] = `columnLayout -q -ca $nodeOptionLayout`;

    if (size($controls) && `optionMenu -ex $controls[0]`)
            deleteUI $controls[0];

    string $type = "rampWeights";
    int $enable = 0;
    int $value = `radioButtonGrp -q -sl $radioGrp1`;
    if ($value == 2)
    {
        $type = "weightsServer";
        $enable = 1;
    }

    optionVar -iv SHAPESWeightsControllerType $value;

    radioButtonGrp -e -en $enable $radioGrp2;

    string $nodes[] = `ls -type $type`;

    optionMenu;
        menuItem -l "New";
        for ($n in $nodes)
            menuItem -l $n;
}


// ------------------------------------------------------------------------------------------------
// shape labels
// ------------------------------------------------------------------------------------------------

global proc shapesUI_buildLabelPrefsUI()
{
    //
    // build the preferences window for the labels
    //
    if (`window -ex SHAPESLabelPrefsWin`)
        deleteUI SHAPESLabelPrefsWin;

    if (`windowPref -ex SHAPESLabelPrefsWin`)
        windowPref -r SHAPESLabelPrefsWin;

    window -t "Label Preferences" -w 230 -h 270 SHAPESLabelPrefsWin;

    string $labelTreeForm = `formLayout`;
    treeView -nb 1 -p $labelTreeForm -h 80 -abr 0 -adr 0 -arp 0 -elc shapesUI_setLabelPrefs shpUI_labelTree;
    string $resetButton = `button -l "Default Labels" -h 25 -c shapesUI_resetLabelPrefs`;

    formLayout  -e

                -af shpUI_labelTree "top" 0
                -af shpUI_labelTree "left" 0
                -af shpUI_labelTree "bottom" 25
                -af shpUI_labelTree "right" 0
                -af $resetButton "left" 0
                -af $resetButton "right" 0
                -af $resetButton "bottom" 0

                -ac $resetButton "top" 0 "shpUI_labelTree"

                $labelTreeForm;
    setParent ..;

    shapesUI_listUserLabels;

    showWindow SHAPESLabelPrefsWin;

    // resize the window temporarily to go around the display bug
    window -e -w 231 -h 271 SHAPESLabelPrefsWin;
    window -e -w 230 -h 270 SHAPESLabelPrefsWin;
}


global proc shapesUI_listUserLabels()
{
    //
    // populate the user label list
    //
    global string $gShapes_rgbLabel[];

    treeView -e -ra shpUI_labelTree;

    string $labels[] = shapesUI_getUserLabelList();

    for ($c = 0; $c < size($gShapes_rgbLabel); $c ++)
    {
        treeView -e -ai $labels[$c] "" shpUI_labelTree;
        eval("treeView -e -btc \"" + $labels[$c] + "\" 1 " + $gShapes_rgbLabel[$c] + " shpUI_labelTree");
    }
}


global proc string[] shapesUI_getUserLabelList()
{
    //
    // return the list of user labels
    //
    global string $gShapes_userLabels[];

    string $labels[] = $gShapes_userLabels;
    if (`optionVar -ex SHAPESUserLabels`)
    {
        string $labelString = `optionVar -q SHAPESUserLabels`;
        $labels = stringToStringArray($labelString, ",");
    }
    return $labels;
}


global proc string shapesUI_setLabelPrefs( string $labelName, string $newName)
{
    //
    // store the user labels in an environment variable
    //
    string $items[] = `treeView -q -ch "" shpUI_labelTree`;
    int $id = shapesArray_stringArrayFind($labelName, 0, $items);
    if ($newName == "")
        $newName = "Label" + ($id + 1);
    $items[$id] = $newName;
    string $labelString = stringArrayToString($items, ",");
    optionVar -sv SHAPESUserLabels $labelString;
    treeView -e -cs shpUI_targetTree;
    shapesUI_buildTargetPopupMenu "clear";

    // rebuild the list to display the default labels properly;
    // in Maya 2016 resetting the label by entering en empty string
    // doesn't display the default label
    evalDeferred("shapesUI_listUserLabels");

    return $newName;
}


global proc shapesUI_resetLabelPrefs()
{
    //
    // reset the user labels
    //
    optionVar -rm SHAPESUserLabels;
    shapesUI_listUserLabels;
    treeView -e -cs shpUI_targetTree;
    shapesUI_buildTargetPopupMenu "clear";
}


// ------------------------------------------------------------------------------------------------
// target list dependencies
// ------------------------------------------------------------------------------------------------

global proc shapesUI_buildTargetPopupMenu( string $mode )
{
    //
    // build the popup menu depending on the selection
    //
    popupMenu -e -dai shpUI_targetPopup;

    if ($mode != "clear")
    {
        menuItem -l "Search and Replace..." -p "shpUI_targetPopup" -c ("python(\"from pySHAPES.ui import rename; rename.searchReplaceUI()\")");
        menuItem -l "Prefix/Suffix..." -p "shpUI_targetPopup" -c ("python(\"from pySHAPES.ui import rename; rename.prefixSuffixUI()\")");
        menuItem -d 1 -p "shpUI_targetPopup";

        int $active = 0;
        if (size(`treeView -q -si shpUI_targetTree`))
            $active = 1;
        menuItem -l "Focus Selected" -p "shpUI_targetPopup" -en $active -c ("shapesUI_focusOnSelectedItem 1 shpUI_targetTree {\"\"}");
        menuItem -l "Deselect" -p "shpUI_targetPopup" -en $active -c ("shapesUI_clearListSelection shpUI_targetTree target");
        menuItem -l "Order Below..." -p "shpUI_targetPopup" -en $active -c ("shapesUI_orderBelow 1");

        int $value = `optionVar -q SHAPESReverseTargetListOrder`;
        menuItem -l "Reverse" -p "shpUI_targetPopup" -cb $value -c shapesUI_reverseTargetListOrder;
        menuItem -l "Expand All Groups" -p "shpUI_targetPopup" -c "shapesUI_toggleCollapseAllTargetGroups 1";
        menuItem -l "Collapse All Groups" -p "shpUI_targetPopup" -c "shapesUI_toggleCollapseAllTargetGroups 0";

        menuItem -d 1 -p "shpUI_targetPopup";
        menuItem -l "Solo" -p "shpUI_targetPopup" -en $active -c shapesUI_soloTargetItem;

        menuItem -d 1 -p "shpUI_targetPopup";
        menuItem -l "Track Item" -p "shpUI_targetPopup" -en $active -c ("shapesUI_trackTargetItem 1");
        menuItem -l "Clear Track List" -p "shpUI_targetPopup" -en $active -c ("shapesUI_trackTargetItem 0");
    }

    if ($mode == "labels")
    {
        menuItem -d 1 -p "shpUI_targetPopup";
        menuItem -l "Filter By Label" -p "shpUI_targetPopup" -c shapesUI_filterListByLabel;
        menuItem -d 1 -p "shpUI_targetPopup";
        menuItem -l "No Label" -p "shpUI_targetPopup" -c ("shapesUI_setTargetShapeLabel -1");

        string $labels[] = shapesUI_getUserLabelList();
        for ($l = 0; $l < size($labels); $l ++)
        {
            if (!`gmatch $labels[$l] "*Label*"`)
                menuItem -l $labels[$l] -p "shpUI_targetPopup" -i ("SHAPES_labels" + ($l + 1) + ".png")-c ("shapesUI_setTargetShapeLabel " + $l);
        }

        menuItem -d 1 -p "shpUI_targetPopup";
        menuItem -l "Labels..." -p "shpUI_targetPopup" -c shapesUI_buildLabelPrefsUI;
    }
}


global proc shapesUI_setTargetShapeLabel( int $id )
{
    //
    // set the label color for the selected shape
    //
    global string $gShapes_rgbLabel[];

    string $shape[] = `treeView -q -si shpUI_targetTree`;

    for ($s in $shape)
    {
        string $color = "";
        if ($id == -1)
            $color = "0.396 0.396 0.396";
        else
            $color = $gShapes_rgbLabel[$id];

        eval("treeView -e -btc \"" + $s + "\" 2 " + $color + " shpUI_targetTree");

        string $type = shapesData_getType($s);
        shapesData_setInt($type, shapesData_getIndex($type, $s), "Label", $id);
    }
}


global proc shapesUI_filterListByLabel()
{
    //
    // display only the items which match the label of the current item
    //
    global string $gShapes_selectedTarget;

    shapesUI_clearSearch "target";
    shapesUI_filterList 0;

    string $dataType = shapesData_getType($gShapes_selectedTarget);
    int $dataIndex = shapesData_getIndex($dataType, $gShapes_selectedTarget);
    int $labelId = shapesData_getInt($dataType, $dataIndex, "Label");

    string $types[] = {"shape", "helper", "group", "drivenSet"};

    string $update[];
    string $parents[];
    for ($type in $types)
    {
        int $ids[] = shapesData_getDataIndices($type);
        for ($index in $ids)
        {
            string $item = shapesData_getString($type, $index, "Target");
            int $label = shapesData_getInt($type, $index, "Label");
            if ($label == $labelId)
            {
                string $parent = shapesUI_expandParentItem($item);
                $update[size($update)] = $item;
                $parents[size($parents)] = $parent;
            }
            else
                treeView -e -iv $item 0 shpUI_targetTree;
        }
    }
    for ($item in (stringArrayCatenate($update, $parents)))
        treeView -e -iv $item 1 shpUI_targetTree;

    shapesList_refreshTargetItem $update;
}


proc float[] getValueColor( string $name, float $limit )
{
    //
    // Return the ornament color based on the value of the given
    // channel.
    //
    global string $gShapes_bsNode;

    float $color[] = {0.0, 0.0, 0.0};

    float $shapeVal;
    if (!shapesData_isDrivenSet($name))
        $shapeVal = `getAttr ($gShapes_bsNode + "." + $name)`;
    else
        $shapeVal = `getAttr ($name + ".value")`;
    if ($shapeVal >= $limit || $shapeVal < 0)
    {
        $color = {0.20, 0.75, 0.0};
        if ($shapeVal < 1 && $shapeVal > 0)
            $color = {1.0, 0.86, 0.3};
        else if ($shapeVal > 1)
            $color = {1.0, 0.26, 0.26};
        else if ($shapeVal < 0)
            $color = {0.15, 0.5, 1.0};
    }
    return $color;
}


proc float floatArraySum( float $floats[] )
{
    //
    // Return the sum of all values in the given array.
    //
    float $result;
    for ($i = 0; $i < size($floats); $i ++)
        $result += $floats[$i];
    return $result;
}


global proc shapesUI_filterListByValue( float $val )
{
    //
    // display only the items which match the selected value range
    //
    global string $gShapes_bsNode;

    string $items[] = shapesData_getTargetList();

    string $update[];
    for ($i = 0; $i < size($items); $i ++)
    {
        // Compensate for the case where a target which is currently
        // filtered has just been deleted.
        if (`attributeQuery -n $gShapes_bsNode -ex $items[$i]` || shapesData_isDrivenSet($items[$i]))
        {
            float $color[] = getValueColor($items[$i], $val);
            float $colorSum = floatArraySum($color);
            if ($colorSum > 0)
            {
                treeView    -e
                            -iv $items[$i] 1
                            -ornament $items[$i] 1 0 4
                            -orc $items[$i] $color[0] $color[1] $color[2]
                            shpUI_targetTree;
                $update[size($update)] = $items[$i];
            }
            else
            {
                // Remove the ornament for inactive values.
                if ($colorSum == 0)
                    treeView -e -ornament $items[$i] 0 0 0 shpUI_targetTree;
            }
        }
    }

    shapesList_refreshTargetItem $update;
}


proc int allFilterOff()
{
    //
    // Return if all filters are off.
    //
    if (!`optionVar -query SHAPESFilterActiveChannel` &&
        !`optionVar -query SHAPESFilterMaxChannel` &&
        !`optionVar -query SHAPESFilterConnection` &&
        !`optionVar -query SHAPESFilterSdk` &&
        !`optionVar -query SHAPESFilterWeightDriver` &&
        !`optionVar -query SHAPESFilterRBF` &&
        !`optionVar -query SHAPESFilterPoseInterpolator` &&
        !`optionVar -query SHAPESFilterCombo` &&
        !`optionVar -query SHAPESFilterComboMembers` &&
        !`optionVar -query SHAPESFilterShapeWeights` &&
        !`optionVar -query SHAPESFilterRampWeights` &&
        !`optionVar -query SHAPESFilterWeightsServer` &&
        !`optionVar -query SHAPESFilterDrivenSet`)
            return 1;
    return 0;
}


global proc string[] getComboMembers( string $name )
{
    //
    // Return the names of all combo members based on the given shape
    // name.
    //
    global string $gShapes_targetAssociations[];

    string $result[] = {$name};
    for ($i = 0; $i < size($gShapes_targetAssociations); $i ++)
    {
        string $items[] = python("\"" + $gShapes_targetAssociations[$i] + "\".split(',')");
        if ($items[0] == $name)
        {
            string $targets[] = stringToStringArray($items[2], ";");
            string $driver[] = stringToStringArray($items[4], ";");

            $result = stringArrayCatenate($result, $targets);
            $result = stringArrayCatenate($result, $driver);

            break;
        }
    }
    return $result;
}


global proc shapesUI_filterList( int $clear )
{
    //
    // Display only list items which match the selected filter.
    //
    global string $gShapes_targetAssociations[];

    // clearing can be ignored when called after clearing the list
    // to display only the items of the specified type
    if ($clear)
        shapesUI_clearSearch "target";

    if (!size($gShapes_targetAssociations) || allFilterOff())
        return;

    string $sel[] = `treeView -query -selectItem shpUI_targetTree`;
    string $members[];
    for ($i = 0; $i < size($sel); $i ++)
        $members = stringArrayCatenate($members, (getComboMembers($sel[$i])));

    for ($i = 0; $i < size($gShapes_targetAssociations); $i ++)
    {
        // It's necessary to use the python split function because it
        // doesn't return a sparse array with missing elements.
        string $items[] = python("\"" + $gShapes_targetAssociations[$i] + "\".split(',')");

        int $show = 0;

        string $cmd = "treeView -edit -itemVisible " + $items[0];
        string $visible = " 0";
        string $ornament = "";
        string $ornamentColor = "";

        // Colored value indicator
        if (`optionVar -query SHAPESFilterActiveChannel` || `optionVar -query SHAPESFilterMaxChannel`)
        {
            float $val = 1;
            if (!`optionVar -query SHAPESFilterMaxChannel`)
                $val = 0.001;
            float $color[] = getValueColor($items[0], $val);
            float $colorSum = floatArraySum($color);
            if ($colorSum > 0)
            {
                $ornament = " -ornament " + $items[0] + " 1 0 4";
                $ornamentColor = " -ornamentColor " + $items[0] + " " + $color[0] + " " + $color[1] + " " + $color[2];
                $show = 1;
            }
        }

        // Type filtering
        if (`optionVar -query SHAPESFilterConnection` && $items[1] == "connection")
            $show = 1;
        if (`optionVar -query SHAPESFilterSdk` && $items[1] == "sdk")
            $show = 1;
        if (`optionVar -query SHAPESFilterWeightDriver` && $items[1] == "wd")
            $show = 1;
        if (`optionVar -query SHAPESFilterRBF` && $items[1] == "rbf")
            $show = 1;
        if (`optionVar -query SHAPESFilterPoseInterpolator` && $items[1] == "pi")
            $show = 1;
        if (`optionVar -query SHAPESFilterCombo` && ($items[1] == "combo" || $items[3] == "combo"))
            $show = 1;
        if (`optionVar -query SHAPESFilterComboMembers` && stringArrayContains($items[0], $members))
            $show = 1;
        if (`optionVar -query SHAPESFilterShapeWeights` && $items[5] == "1")
            $show = 1;
        if (`optionVar -query SHAPESFilterRampWeights` && $items[6] == "rampWeights")
            $show = 1;
        if (`optionVar -query SHAPESFilterWeightsServer` && $items[6] == "weightsServer")
            $show = 1;
        if (`optionVar -query SHAPESFilterDrivenSet` && shapesData_isDrivenSet($items[0]))
            $show = 1;

        if ($show)
            $visible = " 1";

        $cmd += $visible + $ornament + $ornamentColor + " shpUI_targetTree;";

        eval($cmd);
        if ($show)
            shapesUI_expandParentItem $items[0];
    }
}


global proc shapesUI_resetLiveFilterCheckBox()
{
    //
    // Reset the live value filter check box.
    //
    if (shapesUI_workspaceControlExists())
        iconTextCheckBox -e -v 0 shpUI_filterLiveCheck;
}


global proc shapesUI_toggleFilterRow()
{
    string $image = "closeBar.png";
    int $state = 0;
    if (`optionVar -query SHAPESShowFilterRow`)
    {
        $image = "openBar.png";
        $state = 1;
    }
    iconTextButton -edit -image1 $image shpUI_filterToggle;
    rowLayout -edit -visible $state shpUI_filterRow;

    // Refresh the list to collect all content for filtering.
    if ($state)
        shapesList_refreshChildItems();
}


global proc shapesUI_resetTypeFilter()
{
    //
    // Reset all type filtering.
    //
    optionVar -intValue SHAPESFilterActiveChannel 0;
    optionVar -intValue SHAPESFilterMaxChannel 0;
    optionVar -intValue SHAPESFilterConnection 0;
    optionVar -intValue SHAPESFilterSdk 0;
    optionVar -intValue SHAPESFilterWeightDriver 0;
    optionVar -intValue SHAPESFilterRBF 0;
    optionVar -intValue SHAPESFilterPoseInterpolator 0;
    optionVar -intValue SHAPESFilterCombo 0;
    optionVar -intValue SHAPESFilterComboMembers 0;
    optionVar -intValue SHAPESFilterShapeWeights 0;
    optionVar -intValue SHAPESFilterRampWeights 0;
    optionVar -intValue SHAPESFilterWeightsServer 0;
    optionVar -intValue SHAPESFilterDrivenSet 0;

    string $items[] = `rowLayout -query -childArray shpUI_filterRow`;
    for ($i = 0; $i < size($items); $i ++)
        iconTextCheckBox -edit -value 0 $items[$i];
}


global proc string shapesUI_expandParentItem( string $item )
{
    //
    // expands the parent item when the list is filtered
    //
    string $parent = `treeView -q -ip $item shpUI_targetTree`;
    if ($parent != "")
        treeView -e -ei $parent 1 -iv $parent 1 shpUI_targetTree;
    return $parent;
}


global proc shapesUI_orderBelow( int $init )
{
    //
    // allows to reorder an item by clicking the target item it should be ordered after
    //
    global string $gShapes_selectedTarget;
    global string $gShapes_orderBelowList[];

    if ($init)
    {
        br_displayMessage -info ("Select the target where " + $gShapes_selectedTarget + " should appear below.");
        $gShapes_orderBelowList[size($gShapes_orderBelowList)] = $gShapes_selectedTarget;
    }
    else
    {
        shapesList_autoOrderNewTarget $gShapes_orderBelowList[0] $gShapes_orderBelowList[1] 0;
        shapesList_listBlendShapeTargets 1;
        treeView -e -si $gShapes_orderBelowList[0] 1 shpUI_targetTree;
        clear $gShapes_orderBelowList;
        shapesMain_buildTargetSlider;
        br_displayMessage -info "";
    }
}


global proc shapesUI_reverseTargetListOrder()
{
    //
    // called when the checkbox changes for allowing to reorder the target list
    //
    int $value = 1 - `optionVar -q SHAPESAllowTargetReorder`;
    treeView -e -rto $value shpUI_targetTree;
    optionVar -iv SHAPESAllowTargetReorder $value;
}


global proc shapesUI_toggleCollapseAllTargetGroups( int $open )
{
    //
    // collapses all group items in the target list
    //
    global string $gShapes_bsNode;

    string $dataNode = shapesData_getDataNode($gShapes_bsNode);

    string $helper[] = shapesData_getHelperList();
    string $expandList[] = stringToStringArray(`getAttr ($dataNode + "." + "expand")`, ",");
    for ($item in $helper)
    {
        treeView -e -ei $item $open shpUI_targetTree;
        int $id = shapesData_getListIndex($item);
        if ($id != -1)
            $expandList[$id] = $open;
    }
    setAttr ($dataNode + "." + "expand") -type "string" (stringArrayToString($expandList, ","));

    // When opening all group members need to get updated to show the
    // relationships.
    if ($open)
        shapesList_refreshChildItems();
}


global proc int shapesUI_focusOnSelectedItem( int $fromMenu, string $list, string $items[] )
{
    //
    // scroll the treeView to the selected item
    //
    global string $gShapes_selectedTarget;

    if ($fromMenu)
        clear $items;

    int $count = 0;
    if (size($items))
    {
        treeView -e -cs $list;
        refresh;
        for ($i in $items)
        {
            if (`treeView -q -iex $i $list`)
            {
                treeView -e -si $i 1 $list;
                if (size($items) == 1)
                    treeView -e -shi $i $list;
                $count ++;
            }
        }
    }
    else
        return 0;

    if ($count > 0)
        return 1;

    return 0;
}


global proc shapesUI_clearListSelection( string $list, string $type )
{
    //
    // deselect any item in the treeView
    //
    global string $gShapes_orderedDriverList[];

    treeView -e -cs $list;
    if ($type == "target")
        shapesMain_buildTargetSlider;
    else
        clear $gShapes_orderedDriverList;
}


global proc shapesUI_trackTargetItem( int $add )
{
    //
    // accumulates a list of selected items
    // or clears it
    //
    global string $gShapes_targetTrackList[];

    if ($add)
    {
        string $sel[] = `treeView -q -si shpUI_targetTree`;
        if (size($sel))
        {
            for ($s in $sel)
                $gShapes_targetTrackList[size($gShapes_targetTrackList)] = $s;
        }
    }
    else
        $gShapes_targetTrackList = {};
}


global proc shapesUI_soloTargetItem()
{
    //
    // enters or leaves solo mode for the selected item
    //
    string $sel[] = `treeView -q -si shpUI_targetTree`;
    if (!size($sel))
        return;

    string $item = $sel[0];
    for ($shape in shapesData_getTargetList())
    {
        string $queryPlug = shapesMain_getQueryPlug($shape);
        string $input[] = shapesMain_getTargetInput($queryPlug);
        if ($shape == $item && $input[0] == "")
            setAttr $queryPlug 1;
        else
        {
            if (!`getAttr -l $queryPlug`)
            {
                if (!size(`listConnections -s 1 -d 0 $queryPlug`))
                    setAttr $queryPlug 0;
            }
        }
    }
}


// ------------------------------------------------------------------------------------------------
// ui actions
// ------------------------------------------------------------------------------------------------

global proc string shapesUI_getSymmetryImage( int $status )
{
    //
    // returns the name of the symmetry icon depending on the available
    // order mapping status
    //
    if (!`optionVar -q SHAPESSymmetryEnabled`)
        return "SHAPES_symmetryInactive.png";

    string $image;
    if ($status == 1)
        $image = "SHAPES_symmetry.png";
    else if ($status == 0)
        $image = "SHAPES_symmetryPartial.png";
    else
        $image = "SHAPES_symmetryOff.png";

    return $image;
}


global proc string shapesUI_getSymmetryImageAnnotation( int $status )
{
    //
    // returns the annotation of the symmetry check button depending on
    // the available order mapping status
    //
    if (!`optionVar -q SHAPESSymmetryEnabled`)
        return "Symmetry mapping is disabled.";

    string $ann;
    if ($status == 1)
        $ann = "Symmetry mapping is present for the entire mesh.";
    else if ($status == 0)
        $ann = "The mesh has partial symmetry mapping. Some vertices are not mapped and will not be respected when mirroring.";
    else
        $ann = "Symmetry mapping is disabled.";

    return $ann;
}


global proc shapesUI_setSymmetryImage( int $get )
{
    //
    // toggles the image of the symmetry button
    // when adding to the symmetry map
    //
    int $status = -1;
    if ($get)
        $status = shapesMirror_getOrderMappingStatus();
    string $image = shapesUI_getSymmetryImage($status);
    string $ann = shapesUI_getSymmetryImageAnnotation($status);
    image -edit -image $image -annotation $ann shpUI_symmetryImage;
    shapesUI_updateSymmetryMenu;
}


global proc shapesUI_setSymmetryStatus( int $status )
{
    //
    // sets the symmetry status as an optionVar
    //
    if (!`optionVar -q SHAPESSymmetryEnabled`)
        $status = 0;
    optionVar -iv SHAPESSymmetry $status;
    shapesUI_setSymmetryImage 1;
}


global proc shapesUI_toggleMirrorItems()
{
    //
    // toggles mirror related menu items depending on the mirror mode
    //
    global string $gShapes_skinMesh;

    int $state = `optionVar -q SHAPESSymmetry`;
    if (!`optionVar -q SHAPESSymmetryEnabled`)
        $state = 1;

    string $items[] = { "shpUI_symmetrizeItem",
                        "shpUI_flipMirrorItem",
                        "shpUI_createOppositeItem",
                        "shpUI_createRbfOppositeItem",
                        "shpUI_matchOppositeItem",
                        "shpUI_mirrorWeightsItem",
                        "shpUI_mirrorRegionWeightsItem"};

    for ($i in $items)
    {
        if (`menuItem -e -ex $i`)
            menuItem -e -en $state $i;
    }

    if (!$state)
        menuItem -e -en 1 shpUI_groupBatchProcessMenuItem;
}


global proc shapesUI_updateSymmetryMenu()
{
    //
    // builds the symmetry menu depending on the symmetry status
    //
    string $items[] = `menu -q -ia shpUI_symmetryMenu`;

    string $mesh = shapesMain_getShapeNode();

    menuItem -e -c ("br_polyMapVertexOrder -selectMapped " + $mesh) $items[3];
    menuItem -e -c ("br_polyMapVertexOrder -selectUnmapped " + $mesh) $items[4];
}


global proc string shapesUI_addShapeHelperAttribute( int $group, string $name, int $label )
{
    //
    // add a custom attribute
    //
    global string $gShapes_bsNode;
    global string $gShapes_selectedTarget;

    if ($gShapes_bsNode == "None")
        return "";

    string $attrList[] = `listAttr -s -k -ud $gShapes_bsNode`;

    if (!`gmatch $name "*_WD*"` && !`gmatch $name "*_PI*"`)
    {
        int $index = -1;
        if (!size($attrList))
            $index = 1;
        else
        {
            for ($i = 0; $i < size($attrList); $i ++)
            {
                if (!`attributeQuery -n $gShapes_bsNode -ex ($name + ($i + 1))` && $index == -1)
                    $index = $i + 1;
            }
        }
        if ($index == -1)
            $index = size($attrList) + 1;
        if ($index >= 1)
            $name += $index;
    }
    // in case a RBF group is created the group name
    // should match the driver name
    else
    {
        $name = shapesDriver_createRbfGroupString($name);
        if (stringArrayContains($name, $attrList))
            return $name;
    }

    addAttr -ln $name -k 1 $gShapes_bsNode;
    setAttr -l $group ($gShapes_bsNode + "." + $name);

    string $type = "helper";
    if ($group)
        $type = "group";

    int $newId = shapesData_getEmptyTargetIndex($type);
    shapesData_addDataItem($type, $newId, $name, $label);

    shapesList_autoOrderNewTarget $name $gShapes_selectedTarget 0;
    shapesList_listBlendShapeTargets 1;

    return $name;
}


global proc shapesUI_createAttributeOnNodeUI()
{
    //
    // opens the window for setting the range values for the attributes to create
    //
    int $pair;
    string $shapes[] = `treeView -q -si shpUI_targetTree`;
    if (size($shapes) == 2)
    {
        if (shapesMirror_swapSideLabel($shapes[0]) == $shapes[1])
            $pair = 1;
    }

    if (`window -ex SHAPESChannelToAttributeWin`)
        deleteUI SHAPESChannelToAttributeWin;

    if (`windowPref -ex SHAPESChannelToAttributeWin`)
        windowPref -r SHAPESChannelToAttributeWin;

    window -t "Set Attribute Range" -w 230 -h 131 SHAPESChannelToAttributeWin;

    frameLayout -lv 0 -mw 5 -mh 5;
        columnLayout -adj 1;
            floatFieldGrp -l "Attribute Min/Max Value" -cw3 160 50 50 -ct3 "right" "both" "right" -co3 10 0 2 -nf 2 -v1 0 -v2 1 shpUI_attrRangeField;
            floatFieldGrp -l "Shape Min/Max Value" -cw3 160 50 50 -ct3 "right" "both" "right" -co3 10 0 2 -nf 2 -v1 0 -v2 1 shpUI_shapeRangeField;
            separator -style "none" -h 5;
            checkBoxGrp -l "Limit To Range" -cw2 161 50 -ct2 "right" "both" -co2 10 0 shpUI_limitAttrRange;
            separator -style "none" -h 5;
            checkBoxGrp -l "Pair" -cw2 161 50 -ct2 "right" "both" -co2 10 0 -en $pair -cc shapesUI_toggleAttributeOnNodePairOptions shpUI_pairAttributes;
            separator -style "none" -h 10;
            button -l "Add Attributes" -h 30 -c shapesUI_createAttributeOnNode;
        setParent ..;
    setParent ..;

    showWindow SHAPESChannelToAttributeWin;
}


global proc shapesUI_toggleAttributeOnNodePairOptions()
{
    //
    // toggles the attributes settings
    // depending on the pair setting
    //
    if (`checkBoxGrp -q -v1 shpUI_pairAttributes`)
    {
        floatFieldGrp -e -v1 -1 -v2 1 -en 0 shpUI_attrRangeField;
        floatFieldGrp -e -v1 0 -v2 1 -en 0 shpUI_shapeRangeField;
        checkBoxGrp -e -v1 1 -en 0 shpUI_limitAttrRange;
    }
    else
    {
        floatFieldGrp -e -v1 0 -v2 1 -en 1 shpUI_attrRangeField;
        floatFieldGrp -e -v1 0 -v2 1 -en 1 shpUI_shapeRangeField;
        checkBoxGrp -e -v1 0 -en 1 shpUI_limitAttrRange;
    }
}


global proc shapesUI_createAttributeOnNode()
{
    //
    // creates an attribute for each selected target channel
    // on the selected node in the scene
    //
    string $sel[] = `ls -sl`;
    if (!size($sel))
        br_displayMessage -error "No node selected to add attributes to";
    string $node = $sel[0];

    string $attributes[] = `listAttr $node`;
    string $shapes[] = `treeView -q -si shpUI_targetTree`;

    int $pair = `checkBoxGrp -q -v1 shpUI_pairAttributes`;
    string $pairAttr;

    // check if any of the selected shapes already exists as an attribute on the selected node
    int $addList[];
    if (!$pair)
    {
        for ($shape in $shapes)
        {
            int $add = 1;
            for ($attr in $attributes)
            {
                if ($shape == $attr)
                    $add = 0;
            }
            $addList[size($addList)] = $add;
        }
    }
    else
    {
        // create a combined attribute name
        // if both shape names are equal in length strip out the side identifier
        // and the result will be the attribute name
        // if both names are not equal in length simply combine them
        if (size($shapes[0]) == size($shapes[1]))
        {
            string $letterArray[];
            for ($x = 1; $x < size($shapes[0] + 1); $x ++)
            {
                if (substring($shapes[0], $x, $x) == substring($shapes[1], $x, $x))
                    $letterArray[size($letterArray)] = substring($shapes[0], $x, $x);
            }
            $pairAttr = stringArrayToString($letterArray, "");
        }
        else
            $pairAttr = $shapes[0] + "_" + $shapes[1];

        if (`attributeQuery -n $node -ex $pairAttr`)
            $addList[size($addList)] = 0;
        else
            $addList[size($addList)] = 1;
    }

    float $attrMin = `floatFieldGrp -q -v1 shpUI_attrRangeField`;
    float $attrMax = `floatFieldGrp -q -v2 shpUI_attrRangeField`;
    float $shapeMin = `floatFieldGrp -q -v1 shpUI_shapeRangeField`;
    float $shapeMax = `floatFieldGrp -q -v2 shpUI_shapeRangeField`;

    int $sdk;
    if ($attrMin != $shapeMin || $attrMax != $shapeMax)
        $sdk = 1;

    int $counter = 0;
    int $pairCount = 1;

    for ($shape in $shapes)
    {
        // check if a shape is already controlled by a combo
        string $targets[];
        string $comboNodes[];

        shapesCombo_getComboNodes($shape, $targets, {}, $comboNodes, {});

        string $drivenNode;
        string $drivenAttr;
        int $listItem = -1;

        for ($i = 0; $i < size($targets); $i ++)
        {
            if ($targets[$i] == $shape && $listItem == -1)
                $listItem = $i;
        }
        if ($listItem != -1)
        {
            // if there is a combo connection check if the master combo node
            // has already a driver connection in case of driver based combos
            // the driver would be connected to the second x input
            // in case of an already connected driver skip this shape and log it
            string $multNodes[] = stringToStringArray($comboNodes[$listItem], ",");
            string $plug[] = `listConnections -p 1 ($multNodes[0] + "." + shapesCombo_secondPlugName($multNodes[0]))`;
            if (size($plug))
            {
                $drivenNode = "";
                $drivenAttr = "";
            }
            else
            {
                $drivenNode = $multNodes[0];
                $drivenAttr = shapesCombo_secondPlugName($multNodes[0]);
            }
        }
        else
        {
            string $queryPlug = shapesMain_getQueryPlug($shape);
            string $plugItems[] = stringToStringArray($queryPlug, ".");
            $drivenNode = $plugItems[0];
            $drivenAttr = $plugItems[1];
        }

        if ($drivenNode != "")
        {
            if ($pair)
            {
                $shape = $pairAttr;
                if ($pairCount == 1)
                {
                    $attrMin = 0;
                    $attrMax = 1;
                }
                else
                {
                    $attrMin = 0;
                    $attrMax = -1;
                }
            }

            if (($pair && size($addList) == $counter + 1) || (!$pair && $addList[$counter]))
            {
                if (!`checkBoxGrp -q -v1 shpUI_limitAttrRange`)
                    addAttr -ln $shape -k 1 $node;
                else
                {
                    if (!$pair)
                        addAttr -ln $shape -k 1 -min $attrMin -max $attrMax $node;
                    else
                        addAttr -ln $shape -k 1 -min -1 -max 1 $node;
                }
            }

            if ($sdk)
            {
                setDrivenKeyframe -dv $attrMin -v $shapeMin -itt "spline" -ott "spline" -cd ($node + "." + $shape) ($drivenNode + "." + $drivenAttr);
                setDrivenKeyframe -dv $attrMax -v $shapeMax -itt "spline" -ott "spline" -cd ($node + "." + $shape) ($drivenNode + "." + $drivenAttr);

                if (!$pair)
                {
                    setAttr ($drivenNode + "_" + $drivenAttr + ".preInfinity") 1;
                    setAttr ($drivenNode + "_" + $drivenAttr + ".postInfinity") 1;
                }
            }
            else
                connectAttr -f ($node + "." + $shape) ($drivenNode + "." + $drivenAttr);
        }
        else
            br_displayMessage -warning ("\"" + $node + "." + $shape + "\" could not be connected because the target is already driven");

        $counter ++;
        $pairCount ++;
    }

    // add the new control to the driver list
    shapesList_storeCustomDriver "" 0;
    // refresh the target list
    shapesList_refreshTargetItem $shapes;

    deleteUI SHAPESChannelToAttributeWin;
}


global proc shapesUI_resizeScrollList( int $dir, string $list )
{
    //
    // resize the target scroll list
    //
    int $tree = 1;
    string $treeItem;
    string $var;

    if ($list == "target")
    {
        $treeItem = "shpUI_targetTree";
        $var = "SHAPESTargetTreeSize";
    }
    else if ($list == "joint")
    {
        $treeItem = "shpUI_driverTree";
        $var = "SHAPESDriverTreeSize";
    }
    else if ($list == "weight")
    {
        $treeItem = "shpUI_shapeWeightsList";
        $tree = 0;
        $var = "SHAPESWeightTreeSize";
    }
    else if ($list == "region")
    {
        $treeItem = "shpUI_regionList";
        $tree = 0;
        $var = "SHAPESRegionTreeSize";
    }
    else
        return;

    float $height;
    if ($tree)
        $height = `treeView -q -h $treeItem`;
    else
        $height = `textScrollList -q -h $treeItem`;

    if ($dir == 1)
        $height += 20;
    else
        $height -= 20;
    if ($height <= 20 && $dir == 0)
        $height = 20;

    if ($tree)
        treeView -e -h $height $treeItem;
    else
        textScrollList -e -h $height $treeItem;

    optionVar -iv $var $height;
}


global proc shapesUI_limitFloatField( string $field )
{
    //
    // limit the user input to a specific range
    //
    if ($field == "angle")
    {
        float $value = `floatFieldGrp -q -v1 shpUI_rangeField`;
        if ($value < -180)
            $value = -180;
        else if ($value > 180)
            $value = 180;
        else if ($value == 0)
            $value = 45;
        floatFieldGrp -e -v1 $value shpUI_rangeField;
        shapesDriver_setShapeDriverAttribute "shpUI_rangeField" $field;
    }
    else if ($field == "centerAngle")
    {
        float $value = `floatFieldGrp -q -v1 shpUI_centerField`;
        if ($value < 0)
            $value = 0;
        else if ($value > 180)
            $value = 45;
        floatFieldGrp -e -v1 $value shpUI_centerField;
        shapesDriver_setShapeDriverAttribute "shpUI_centerField" $field;
    }
    else if ($field == "twistAngle")
    {
        float $value = `floatFieldGrp -q -v1 shpUI_twistAngleField`;
        if ($value < 0.01)
            $value = 0.01;
        else if ($value > 180)
            $value = 180;
        floatFieldGrp -e -v1 $value shpUI_twistAngleField;
        shapesDriver_setShapeDriverAttribute "shpUI_twistAngleField" $field;
    }
    else if ($field == "translateMin")
    {
        float $value = `floatFieldGrp -q -v1 shpUI_distanceMinField`;
        if ($value < 0)
            $value = 0;
        floatFieldGrp -e -v1 $value shpUI_distanceMinField;
        shapesDriver_setShapeDriverAttribute "shpUI_distanceMinField" $field;
    }
    else if ($field == "translateMax")
    {
        float $value = `floatFieldGrp -q -v1 shpUI_distanceMaxField`;
        if ($value < 0)
            $value = 0;
        floatFieldGrp -e -v1 $value shpUI_distanceMaxField;
        shapesDriver_setShapeDriverAttribute "shpUI_distanceMaxField" $field;
    }
}


// ------------------------------------------------------------------------------------------------
// mirror identifiers
// ------------------------------------------------------------------------------------------------

global proc shapesUI_toggleMirrorItemLabel( int $state )
{
    //
    // toggle the label for the mirror direction
    //
    string $labelString = "Mirror Direction (positive to negative)";
    if (!$state)
        $labelString = "Mirror Direction (negative to positive)";
    optionVar -iv SHAPESMirrorDirection $state;
    text -e -l $labelString shpUI_mirrorDirectionLabel;
}


global proc shapesUI_listUserIdentifier()
{
    //
    // populate the fields with the user identifier
    //
    string $left[];
    string $right[];
    shapesUI_getUserIdentifierList($left, $right);
    shapesUI_checkIdentifierPrefs;
    string $leftString = stringArrayToString($left, ", ");
    string $rightString = stringArrayToString($right, ", ");
    textFieldGrp -e -tx $leftString shpUI_mirrorIdentFieldL;
    textFieldGrp -e -tx $rightString shpUI_mirrorIdentFieldR;
}


global proc shapesUI_getUserIdentifierList( string $left[], string $right[] )
{
    //
    // return the list of user identifier
    //
    global string $gShapes_left[];
    global string $gShapes_right[];

    $left = $gShapes_left;
    $right = $gShapes_right;
    if (`optionVar -ex SHAPESUserIdentifierL`)
    {
        string $leftString = `optionVar -q SHAPESUserIdentifierL`;
        $left = stringToStringArray($leftString, ",");
    }
    if (`optionVar -ex SHAPESUserIdentifierR`)
    {
        string $rightString = `optionVar -q SHAPESUserIdentifierR`;
        $right = stringToStringArray($rightString, ",");
    }
}


global proc shapesUI_setIdentifierPrefs()
{
    //
    // store the user identifier in the environment variables
    //
    string $left = `textFieldGrp -q -tx shpUI_mirrorIdentFieldL`;
    string $right = `textFieldGrp -q -tx shpUI_mirrorIdentFieldR`;
    $left = substituteAllString($left, " ", "");
    $right = substituteAllString($right, " ", "");
    optionVar -sv SHAPESUserIdentifierL $left;
    optionVar -sv SHAPESUserIdentifierR $right;

    shapesUI_listUserIdentifier;
}


global proc shapesUI_resetIdentifierPrefs()
{
    //
    // reset the user identifier
    //
    optionVar -rm SHAPESUserIdentifierL;
    optionVar -rm SHAPESUserIdentifierR;

    shapesUI_listUserIdentifier;
}


global proc shapesUI_checkIdentifierPrefs()
{
    //
    // check if the user identifier lists have the same size
    //
    string $left[];
    string $right[];
    shapesUI_getUserIdentifierList($left, $right);

    if (size($left) != size($right))
        br_displayMessage -warning "The side identifier lists have a different number of entries. Please check the mirror preferences.";
}


// ------------------------------------------------------------------------------------------------
// region labels
// ------------------------------------------------------------------------------------------------

global proc shapesUI_listUserRegionLabels()
{
    //
    // populate the fields with the user labels
    //
    string $labels = shapesUI_getUserRegionLabels();
    textFieldGrp -e -tx $labels shpUI_regionLabelsField;
}


global proc string shapesUI_getUserRegionLabels()
{
    //
    // return the list of user labels
    //
    global string $gShapes_regionLabels[];

    string $labels = stringArrayToString($gShapes_regionLabels, ", ");
    if (`optionVar -ex SHAPESUserRegionLabels`)
    {
        string $labelString = `optionVar -q SHAPESUserRegionLabels`;
        $labels = substituteAllString($labelString, ",", ", ");
    }
    return $labels;
}


global proc shapesUI_setRegionLabelsPrefs()
{
    //
    // store the user labels in the environment variable
    //
    string $labels = `textFieldGrp -q -tx shpUI_regionLabelsField`;
    $labels = substituteAllString($labels, " ", "");
    optionVar -sv SHAPESUserRegionLabels $labels;

    shapesUI_listUserRegionLabels;
}


global proc shapesUI_resetRegionLabelPrefs()
{
    //
    // reset the user identifier
    //
    optionVar -rm SHAPESUserRegionLabels;

    shapesUI_listUserRegionLabels;
}


// ------------------------------------------------------------------------------------------------
// split shape
// ------------------------------------------------------------------------------------------------

global proc shapesUI_listSplitShapeIdentifier()
{
    //
    // populate the fields with the user prefixes
    //
    string $prefixes[] = shapesUI_getSplitShapeIdentifier();
    textFieldGrp -e -tx $prefixes[0] shpUI_splitShapeIdentifierLeftField;
    textFieldGrp -e -tx $prefixes[1] shpUI_splitShapeIdentifierRightField;
}


global proc string[] shapesUI_getSplitShapeIdentifier()
{
    //
    // return the split shape prefixes as a list
    //
    global string $gShapes_splitShapeIdentifier[];

    if (`optionVar -ex SHAPESSplitShapeIdentifier`)
    {
        string $prefixString = `optionVar -q SHAPESSplitShapeIdentifier`;
        return stringToStringArray($prefixString, ",");
    }
    return $gShapes_splitShapeIdentifier;
}


global proc shapesUI_setSplitShapeIdentifierPrefs()
{
    //
    // store the user split shape prefixes in the environment variable
    //
    string $left = `textFieldGrp -q -tx shpUI_splitShapeIdentifierLeftField`;
    string $right = `textFieldGrp -q -tx shpUI_splitShapeIdentifierRightField`;
    $left = substituteAllString($left, " ", "");
    $right = substituteAllString($right, " ", "");
    string $sides[] = {$left, $right};
    optionVar -sv SHAPESSplitShapeIdentifier (stringArrayToString($sides, ","));

    shapesUI_listSplitShapeIdentifier;
}


global proc shapesUI_resetSplitShapeIdentifierPrefs()
{
    //
    // reset the user identifier
    //
    optionVar -rm SHAPESSplitShapeIdentifier;

    shapesUI_listSplitShapeIdentifier;
}

// ------------------------------------------------------------------------------------------------
// search and filter
// ------------------------------------------------------------------------------------------------

global proc shapesUI_searchJointString( string $list )
{
    //
    // search in the target or joint list for the given string
    //
    global string $gShapes_currentSearchList;

    string $treeItem;
    string $searchField;
    if ($list == "target")
    {
        $treeItem = "shpUI_targetTree";
        $searchField = "shpUI_targetSearchField";
    }
    else
    {
        $treeItem = "shpUI_driverTree";
        $searchField = "shpUI_driverSearchField";
    }

    string $query = `textFieldGrp -q -tx $searchField`;
    string $queryList[];
    tokenize $query "+" $queryList;

    // With all filters off search within all children of the list.
    // If a filter is active base the search on all visible items only.
    string $items[];
    if (allFilterOff())
        $items = `treeView -q -ch "" $treeItem`;
    else
        $items = `treeView -q -iv $treeItem`;

    string $update[];
    if ($query != "")
    {
        for ($i in $items)
        {
            int $state = 0;
            for ($q in $queryList)
            {
                string $a = $i;
                string $b = "*" + $q + "*";
                if (!`optionVar -query SHAPESCaseSensitiveSearch`)
                {
                    $a = tolower($i);
                    $b = "*" + tolower($q) + "*";
                }
                if (`gmatch $a $b`)
                {
                    $state = 1;
                    break;
                }
            }
            treeView -e -iv $i $state $treeItem;
            if ($state)
            {
                shapesUI_expandParents $treeItem $i;
                if ($list == "target")
                    $update[size($update)] = $i;
            }
        }
    }
    else
    {
        shapesUI_clearSearch $list;
        if ($list == "target")
            shapesUI_filterList 0;
    }

    // remember the last searched list
    // important for keeping the filter active when adding new drivers
    if ($query != "")
        $gShapes_currentSearchList = $list;
    else
        $gShapes_currentSearchList = "";

    shapesList_refreshTargetItem $update;
}


global proc string shapesUI_expandParents( string $treeItem, string $item )
{
    while ($item != "")
    {
        $item = `treeView -q -ip $item $treeItem`;
        if ($item != "")
        {
            treeView -e -ei $item 1 $treeItem;
            $item = shapesUI_expandParents($treeItem, $item);
        }
    }
    return $item;
}


global proc shapesUI_clearSearch( string $list )
{
    //
    // clear the search field and list all targets or drivers
    //
    global string $gShapes_bsNode;
    global string $gShapes_currentSearchList;

    $gShapes_currentSearchList = "";

    string $treeItem;
    string $searchField;
    int $value;

    if ($list == "target")
    {
        $treeItem = "shpUI_targetTree";
        $searchField = "shpUI_targetSearchField";
        $value = `optionVar -q SHAPESAllowTargetReorder`;
    }
    else
    {
        $treeItem = "shpUI_driverTree";
        $searchField = "shpUI_driverSearchField";
        $value = `optionVar -q SHAPESSortJointList`;
    }

    string $items[] = `treeView -q -ch "" $treeItem`;
    if (!size($items))
        return;

    textFieldGrp -e -tx "" $searchField;
    for ($i in $items)
        treeView -e -iv $i 1 -ornament $i 0 0 0 $treeItem;
    // set the list sorting
    treeView -e -rto $value $treeItem;

    if ($list == "target")
    {
        // reset the previous expand state for the items
        // check for the node because upon a new scene it might not exist anymore
        if (`objExists $gShapes_bsNode`)
        {
            string $helper[] = shapesData_getHelperList();
            string $dataNode = shapesData_getDataNode($gShapes_bsNode);
            string $itemList[] = stringToStringArray(`getAttr ($dataNode + "." + "order")`, ",");
            string $expandList[] = stringToStringArray(`getAttr ($dataNode + "." + "expand")`, ",");
            for ($h in $helper)
            {
                if (shapesData_getNonShapeType($h) == "group")
                {
                    int $id = shapesArray_stringArrayFind($h, 0, $itemList);
                    if ($id != -1)
                    {
                        int $state = $expandList[$id];
                        catchQuiet(`treeView -e -ei $h $state $treeItem`);
                    }
                }
            }
        }
        // if the clearing comes from disabling the filters we need to keep the
        // value indicators visible when in live mode
        else if (`iconTextCheckBox -q -v shpUI_filterLiveCheck`)
            shapesJob_updateDisplayValue;
    }
}


global proc shapesUI_getSelection( string $type )
{
    //
    // get the selected object for use as the weight driver parent or
    // as a control node for the RBF solver
    //
    string $sel[] = `ls -sl -tr`;
    if ($type == "parent")
        $field = "shpUI_parentField";
    else
        $field = "shpUI_controlField";

    if (!size($sel))
    {
        textField -e -tx "" $field;
        return;
    }
    else
    {
        int $driverType = shapesUI_shapeDriverOption();
        string $solverNodeOption = `optionMenu -q -v shpUI_solverNodeOption`;

        if ($driverType == 4 && $field == "shpUI_controlField")
        {
            string $ctrls[];
            for ($s in $sel)
            {
                string $shortName[] = `ls -sn $s`;
                $ctrls[size($ctrls)] = $shortName[0];
            }
            textField -e -tx (stringArrayToString($ctrls, ",")) $field;
        }
        else
        {
            string $shortName[] = `ls -sn $sel[0]`;
            textField -e -tx $shortName[0] $field;
        }

        if ($field == "shpUI_controlField")
        {
            string $node = shapesUI_getSelectedNodeOption();
            if ($solverNodeOption != "New")
            {
                int $ids[] = shapesDriver_getRbfDriverIndices($node);
                for ($i = 0; $i < size($ids); $i ++)
                    connectAttr -f ($sel[$i] + ".message") ($node + ".driverList[" + $ids[$i] + "].controlNode");
            }
        }
    }
}


global proc shapesUI_selectNode( string $mode, string $shapes[], string $targetName, string $listItem )
{
    //
    // select the current blendshape node or the selected joint
    //
    global string $gShapes_bsNode;

    string $node;
    if ($mode == "blendShape")
    {
        $node = $gShapes_bsNode;
    }
    else if ($mode == "driver")
    {
        string $sel[] = shapesUI_getDriverNodeNames();
        if (!size($sel) || shapesList_isDriverGroup($sel[0]))
            return;
        $node = $sel[0];
    }
    else if ($mode == "button")
        $node = $shapes[0];
    else if ($mode == "animation")
    {
        select -cl;
        for ($shape in $shapes)
        {
            string $input[] = shapesMain_getTargetInput(shapesMain_getQueryPlug($shape));
            if ($input[1] == "animation")
                select -add $input[0];
        }
        return;
    }

    if ($node != "" && $node != "None")
    {
        // get the current selection
        // if the node from the button and the current selection match;
        // offer to delete the node
        string $current[] = `ls -sl`;
        if ($mode == "button" && size($current))
        {
            if ($current[0] == $node)
            {
                string $queryPlug = shapesMain_getQueryPlug($targetName);
                string $connection[] = `listConnections -s 1 -d 0 -p 1 -c 1 $queryPlug`;
                string $input[] = `listConnections -s 1 -d 0 -scn 1 $node`;
                string $inBtn;
                string $msg = "-m \"Delete the incoming driver node or connection?\"";
                if (size($input))
                {
                    $inBtn = " -b \"Select Upstream\"";
                    $msg = "-m \"Select or delete the incoming driver node or connection?\"";
                }
                string $cmd = "confirmDialog -t \"SHAPES\" " + $msg + $inBtn;
                $cmd += " -b \"Delete Node\"";
                $cmd += " -b \"Break Connection\"";
                $cmd += " -b \"Cancel\"";
                $cmd += " -db \"Cancel\"";
                $cmd += " -cb \"Cancel\"";
                $cmd += " -ds \"Cancel\"";

                string $confirm = `eval $cmd`;
                if ($confirm == "Select Upstream")
                {
                    string $dag = shapesUI_findDagNode($node);
                    if ($dag != "")
                        select -r $dag;
                    else
                        select -r $input[0];
                }
                else if ($confirm == "Delete Node")
                    delete $node;
                else if ($confirm == "Break Connection")
                    disconnectAttr $connection[1] $connection[0];
                shapesList_refreshTargetItem {$targetName};
            }
            else
                select -r $node;
        }
        else
            select -r $node;
    }
}


global proc string shapesUI_findDagNode( string $node )
{
    //
    // find the connected dag node
    //
    string $dag = "";

    string $input[] = `listConnections -s 1 -d 0 -scn 1 $node`;
    if (size($input))
    {
        for ($i in $input)
        {
            string $list[] = `ls -dag $i`;
            if (size($list))
            {
                $dag = $i;
                break;
            }
            else
                $dag = shapesUI_findDagNode($i);
        }
    }
    else
    {
        string $list[] = `ls -dag $node`;
        if (size($list))
            $dag = $node;
    }

    return $dag;
}


proc addDriverNodes( string $nodes[] )
{
    //
    // Add the given nodes to the list of drivers, if not already included.
    // Highlight the nodes in the list and populate the driver settings
    // depending on the current driver type.
    //
    global string $gShapes_orderedDriverList[];

    string $items[];
    for ($node in $nodes)
    {
        if (size(stringToStringArray($node, ".")) == 1)
        {
            shapesList_storeCustomDriver $node 0;
            $items[size($items)] = $node;
        }
    }

    $gShapes_orderedDriverList = $items;

    shapesUI_setDriverNodeName(stringArrayToString($items, ","));
    shapesUI_focusOnSelectedItem(0, "shpUI_driverTree", $items);

    // Update the driver UI.
    shapesDriver_shapeDriverSelectionChanged;
}


global proc shapesUI_getNodeFromScene()
{
    //
    // Get the node selection from the scene and add it to the list of
    // drivers, if not already included.
    // Highlight the nodes in the list and populate the driver settings
    // depending on the current driver type.
    //
    string $nodes[] = `ls -sl -fl`;
    if (!size($nodes))
        return;
    addDriverNodes $nodes;
}


global proc shapesUI_setDriverNodeFromListSelection()
{
    //
    // fill the driver name field based on the driver list selection
    //
    global string $gShapes_orderedDriverList[];

    string $items[] = `treeView -q -si shpUI_driverTree`;

    // If the only selected item in the list is a driver group nothing
    // changes.
    if (size($items) == 1 && shapesList_isDriverGroup($items[0]))
        return;

    // Discard any item which is a driver group.
    string $listItems[];
    for ($i in $items)
    {
        if (!shapesList_isDriverGroup($i))
            $listItems[size($listItems)] = $i;
    }
    shapesList_createOrderedSelectionList $listItems "driver";
    $listItems = $gShapes_orderedDriverList;

    shapesUI_setDriverNodeName(stringArrayToString($listItems, ","));

    // Update the driver UI.
    shapesDriver_shapeDriverSelectionChanged;
}


global proc shapesUI_driverNodeNameEntered()
{
    //
    // Verify and add the entered driver node name to the driver list.
    //
    string $name = `textField -query -text shpUI_driverNodeField`;
    string $items[] = stringToStringArray($name, ",");
    string $add[];
    for ($item in $items)
    {
        if (!`objExists $item`)
            br_displayMessage -warning ("The entered node " + $item + " cannot be found.");
        else
            $add[size($add)] = $item;
    }
    addDriverNodes($add);
}


global proc shapesUI_setDriverNodeName( string $name )
{
    //
    // fill the driver name field with the given name
    //
    global string $gShapes_selectedDriver;

    textField -edit -text $name shpUI_driverNodeField;
    string $items[] = stringToStringArray($name, ",");

    $gShapes_selectedDriver = "";
    if (size($items))
        $gShapes_selectedDriver = $items[0];
}


global proc string[] shapesUI_getDriverNodeNames()
{
    //
    // Return the driver names from the field.
    //
    string $text = `textField -query -text shpUI_driverNodeField`;
    return (stringToStringArray($text, ","));
}


global proc shapesUI_selectDriverInList()
{
    //
    // Select the driver from the driver field in the list.
    //
    string $items[] = shapesUI_getDriverNodeNames();
    shapesUI_focusOnSelectedItem(0, "shpUI_driverTree", $items);
}


global proc shapesUI_selectDriverInScene()
{
    //
    // Select the driver from the driver field in the scene.
    //
    string $items[] = shapesUI_getDriverNodeNames();
    select -replace $items;
}


global proc shapesUI_setCurrentBlendShape()
{
    //
    // Define the current blend shape node as shape driver.
    //
    global string $gShapes_bsNode;

    textField -edit -text $gShapes_bsNode shpUI_driverNodeField;
}


global proc shapesUI_clearDriverField()
{
    //
    // Clear the driver field.
    //
    textField -edit -text "" shpUI_driverNodeField;
    treeView -edit -clearSelection shpUI_driverTree;
    shapesDriver_shapeDriverSelectionChanged;
}


global proc shapesUI_filterDriverList( string $btnItem, int $state )
{
    //
    // display only the clicked type of nodes in the driver list
    //
    global int $gShapes_driverListIsFiltered;
    global string $gShapes_driverListFilterType;
    global string $gShapes_selectedDriver;
    global string $gShapes_driverItems[];

    string $drivers[];
    string $types[];
    for ($i in $gShapes_driverItems)
    {
        string $parts[] = stringToStringArray($i, ",");
        $drivers[size($drivers)] = $parts[0];
        $types[size($types)] = $parts[1];
    }
    int $id = shapesArray_stringArrayFind($btnItem, 0, $drivers);
    string $type = $types[$id];

    if ($gShapes_driverListFilterType != "")
        $type = $gShapes_driverListFilterType;

    string $items[] = `treeView -q -ch "" shpUI_driverTree`;
    for ($i in $items)
    {
        if (!$gShapes_driverListIsFiltered)
        {
            $id = shapesArray_stringArrayFind($i, 0, $drivers);
            if ($types[$id] == $type)
                treeView -e -iv $i 1 shpUI_driverTree;
            else
                treeView -e -iv $i 0 shpUI_driverTree;
        }
        else
            treeView -e -iv $i 1 shpUI_driverTree;
    }

    if (!$gShapes_driverListIsFiltered)
    {
        $gShapes_driverListIsFiltered = 1;
        $gShapes_driverListFilterType = $type;
    }
    else
    {
        $gShapes_driverListIsFiltered = 0;
        $gShapes_driverListFilterType = "";
        shapesUI_focusOnSelectedItem 0 "shpUI_driverTree" {$gShapes_selectedDriver};
    }
}


// ------------------------------------------------------------------------------------------------
// sculpt mode dependencies
// ------------------------------------------------------------------------------------------------

global proc shapesUI_buildSculptCompareSlider()
{
    //
    // create the slider for the sculpt compare
    //
    if (`floatSliderGrp -ex shpUI_compareSlider`)
        deleteUI shpUI_compareSlider;

    floatSliderGrp  -l "Compare"
                    -p shpUI_compareSliderColumn
                    -f 0
                    -v 0
                    -min 0
                    -max 1
                    -pre 3
                    -cw2 160 100
                    -co2 0 5
                    -ct2 "left" "left"
                    -dc shapesSculpt_compareSculpt
                    -cc shapesSculpt_resetCompare

                    shpUI_compareSlider;
}


global proc string shapesUI_buildSculptCompareComboSlider( string $label, int $reset )
{
    //
    // create the combo sliders for the sculpt compare
    //
    global string $gShapes_bsNode;

    float $value = `getAttr ($gShapes_bsNode + "." + $label)`;
    string $slider;
    if ($reset)
    {
        $slider = `floatSliderGrp   -l $label
                                    -p shpUI_compareSliderComboColumn
                                    -h 20
                                    -f 0
                                    -v $value
                                    -min 0
                                    -max 1
                                    -pre 3
                                    -cw2 160 100
                                    -co2 0 5
                                    -ct2 "left" "left"`;
    }
    else
    {
        $slider = `floatSliderGrp   -l $label
                                    -p shpUI_compareSliderComboColumn
                                    -h 20
                                    -f 1
                                    -v $value
                                    -min -0.5
                                    -max 1
                                    -pre 3
                                    -cw3 140 55 100
                                    -co3 0 5 5
                                    -ct3 "left" "left" "left"`;
    }

    if ($reset)
        floatSliderGrp -e -cc ("evalDeferred(\"floatSliderGrp -e -v " + $value + " " + $slider + "; setAttr " + $gShapes_bsNode + "." + $label + " " + $value + "\")") $slider;
    string $plug[] = `listConnections -s 1 -d 0 -c 1 -p 1 ($gShapes_bsNode + "." + $label)`;
    if (size($plug))
        disconnectAttr $plug[1] $plug[0];
    else
        $plug = {"none", "none"};
    connectControl $slider ($gShapes_bsNode + "." + $label);

    string $returnString = $slider;
    $returnString += "," + stringArrayToString($plug, ",");

    return $returnString;
}


global proc int shapesUI_getExportSculptPreference()
{
    //
    // return the id for the export sculpt radio button
    //
    int $index;
    if (`radioCollection -ex shpUI_exportRadioCollection`)
    {
        string $radio = `radioCollection -q -sl shpUI_exportRadioCollection`;
        $index = `match "[0-9]+" $radio`;
    }
    else if (`optionVar -ex SHAPESExportMode`)
        $index = `optionVar -q SHAPESExportMode`;
    return $index;
}


global proc shapesUI_manageUIModeDependencies( int $folder, int $editButton, int $state )
{
    //
    // enables/disables the sculpt options menu items
    // when entering/leaving edit modes
    //
    string $frame[] = {"shpUI_drivenSetFrame", "shpUI_shapeWeightsLayout", "shpUI_regionFrame", "shpUI_animationFrame", "shpUI_driverFrame"};

    for ($f = 0; $f < size($frame); $f ++)
    {
        if ($folder != $f)
            control -e -en $state $frame[$f];
    }
    if ($editButton)
        button -e -en $state shpUI_sculptButton;

    shapesUI_setCorrectiveChannelsState $state;

    // make sure the brush button stays accessible
    iconTextButton -e -en 1 shpUI_brushButton;
}


global proc shapesUI_setCorrectiveChannelsState( int $state )
{
    //
    // enable/disable corrective controls when entering/leaving sculpt/tweak mode
    //
    global int $gShapes_channelsActive;
    global int $gShapes_sculptProcess;

    string $childCtrls[] = `frameLayout -q -ca shpUI_sliderFrame`;
    if (size($childCtrls))
    {
        for ($layout in $childCtrls)
        {
            if (!startsWith($layout, "separator"))
            {
                string $ctrls[] = `rowLayout -q -ca $layout`;

                if (size($ctrls))
                {
                    for ($ctrl in $ctrls)
                    {
                        if (startsWith($ctrl, "iconTextButton"))
                            control -e -en $state $ctrl;
                    }
                }
            }
        }
    }

    $gShapes_channelsActive = $state;

    $childCtrls = `rowLayout -q -ca shpUI_editButtonsLayout`;
    if (size($childCtrls))
    {
        for ($c = 3; $c < size($childCtrls); $c ++)
            control -e -en $state $childCtrls[$c];
    }
}


global proc shapesUI_toggleSculptButtonLabel()
{
    //
    // toggles the label of the sculpt button depending on maya or mudbox sculpt mode
    //
    global int $gShapes_paintWeightsProcess;
    global int $gShapes_sculptProcess;
    global string $gShapes_sculptButtonLabel;

    int $sel = shapesUI_getExportSculptPreference();
    if ($sel == 0)
        $gShapes_sculptButtonLabel = "Create New";
    else if ($sel == 1)
        $gShapes_sculptButtonLabel = "New In Mudbox";
    else if ($sel == 2)
        $gShapes_sculptButtonLabel = "New In ZBrush";
    else if ($sel == 3)
        $gShapes_sculptButtonLabel = "New From FBX";
    else if ($sel == 4)
        $gShapes_sculptButtonLabel = "Custom Export";

    // toggle the label only when not in sculpt mode
    if (!$gShapes_sculptProcess)
        button -e -l $gShapes_sculptButtonLabel shpUI_sculptButton;
}


global proc shapesUI_toggleSculptButton( string $skin, string $corrective, string $connectInfo[], string $view, string $slider, int $mode )
{
    //
    // handles the display of the sculpt mode enter/exit buttons
    // mode 0 = enter
    // mode 1 = exit
    //
    global int $gShapes_tweakWithCombo;
    global string $gShapes_camAttrs[];

    if ($mode == 0)
    {
        int $sel = shapesUI_getExportSculptPreference();
        string $btnString = "Exit Edit Mode";
        string $btnStringShort = "Exit";
        if ($sel == 3)
        {
            $btnString = "Import From FBX";
            $btnStringShort = "Import";
        }

        // re-define the sculpt button
        button  -e
                -l $btnString
                -bgc 0.95 0.1 0.1
                -c ("shapesSculpt_exitSculptMode " + $skin + " " + $corrective + " \"" + (stringArrayToString($connectInfo, ",")) + "\" " + $view + " \"" + $slider + "\" 0 0")
                shpUI_sculptButton;
        // if tweaking with a combo attached add another button
        // allowing to apply the tweak to the combos
        if ($gShapes_tweakWithCombo)
        {
            button  -e
                    -c ("shapesSculpt_exitSculptMode " + $skin + " " + $corrective + " \"" + (stringArrayToString($connectInfo, ",")) + "\" " + $view + " \"" + $slider + "\" 1 0")
                    shpUI_propagateButton;
            evalDeferred("button -edit -manage 1 shpUI_propagateButton");
        }

        // Show the symmetrize button if the mesh has order mapping.
        if (shapesMirror_hasOrderMapping($corrective))
        {
            evalDeferred("iconTextButton -edit -visible 1 -c shapesMirror_symmetrizeEditMesh shpUI_symmetrizeButton");
        }

        // disable the weights buttons
        shapesUI_toggleWeightsUI 0;

        // display the hud buttons
        if (`optionVar -q SHAPESEnableHUD`)
        {
            // find the next free block because particular blocks might be already in use
            int $topBlock = `headsUpDisplay -nfb 2`;
            int $bottomBlock = `headsUpDisplay -nfb 7`;
            int $exitId = `hudButton    -s 2
                                        -b $topBlock
                                        -l $btnString
                                        -ba "center"
                                        -bw 110
                                        -bsh "roundRectangle"
                                        -rc ("shapesSculpt_exitSculptMode " + $skin + " " + $corrective + " \"" + (stringArrayToString($connectInfo, ",")) + "\" " + $view + " \"" + $slider + "\" 0 0")
                                        SHAPESHudExit`;
            int $exitComboId = -1;
            if ($gShapes_tweakWithCombo)
            {
                $topBlock = `headsUpDisplay -nfb 2`;
                $exitComboId = `hudButton   -s 2
                                            -b $topBlock
                                            -l ($btnStringShort + " And Propagate")
                                            -ba "center"
                                            -bw 130
                                            -bsh "roundRectangle"
                                            -rc ("shapesSculpt_exitSculptMode " + $skin + " " + $corrective + " \"" + (stringArrayToString($connectInfo, ",")) + "\" " + $view + " \"" + $slider + "\" 1 0")
                                            SHAPESHudComboExit`;
            }
            int $cancelId = `hudButton  -s 7
                                        -b $bottomBlock
                                        -l "Cancel"
                                        -ba "center"
                                        -bw 60
                                        -bsh "roundRectangle"
                                        -rc ("shapesSculpt_exitSculptMode " + $skin + " " + $corrective + " \"" + (stringArrayToString($connectInfo, ",")) + "\" " + $view + " \"" + $slider + "\" 0 1")
                                        SHAPESHudCancel`;

            optionVar -iv SHAPESExitHudId $exitId;
            optionVar -iv SHAPESExitComboHudId $exitComboId;
            optionVar -iv SHAPESCancelHudId $cancelId;
        }

        // show the sculpt frame
        shapesUI_getCameraAttributes;
        if (`optionVar -q SHAPESShowSculptFrame`)
        {
            string $color = "0.15,0.5,0.0";
            if (`modelEditor -q -cme $view`)
                $color = "0.068,0.227,0.0";

            // attribute order:
            // camera, filmFit, displayGate, displayResolution, displayMask, color
            string $camAttrs[] = {$gShapes_camAttrs[0], $gShapes_camAttrs[1], "1", "0", "1", $color};
            shapesUI_setCameraAttributes $camAttrs 1;
        }
    }
    else
    {
        shapesUI_createDefaultSculptButton;

        // enable the weights buttons
        shapesUI_toggleWeightsUI 1;
        // disable the sculpt ui buttons
        shapesUI_dismissSculptUI;
        // reset the camera attributes
        shapesUI_setCameraAttributes $gShapes_camAttrs 0;
    }
}


global proc shapesUI_createDefaultSculptButton()
{
    //
    // add the default sculpt mode button
    //
    global string $gShapes_sculptButtonLabel;

    button -e -l $gShapes_sculptButtonLabel -bgc 0.365 0.365 0.365 -c "shapesSculpt_initSculptMode \"\"" shpUI_sculptButton;
    evalDeferred("button -e -m 0 shpUI_propagateButton");
    evalDeferred("iconTextButton -edit -visible 0 shpUI_symmetrizeButton");
}


global proc shapesUI_dismissSculptUI()
{
    //
    // disables UI elements when leaving the sculpt mode
    //
    menuItem -e -en 0 shpUI_cancelItem;
    int $exitId = `optionVar -q SHAPESExitHudId`;
    int $exitComboId = `optionVar -q SHAPESExitComboHudId`;
    int $cancelId = `optionVar -q SHAPESCancelHudId`;
    headsUpDisplay -rid $exitId;
    if ($exitComboId != -1)
        headsUpDisplay -rid $exitComboId;
    headsUpDisplay -rid $cancelId;
    optionVar -rm SHAPESExitHudId;
    optionVar -rm SHAPESExitComboHudId;
    optionVar -rm SHAPESCancelHudId;
}


global proc shapesUI_togglePoseInfluenceItem( int $enable )
{
    //
    // toggle the menu item for accessing the pose influence slider
    //
    if ($enable)
        menuItem -e -l "Edit Pose Influences" -en 1 -c shapesSculpt_createPoseInfluenceSlider shpUI_cancelItem;
    else
        menuItem -e -l "Cancel Edit Mode" -en 0 shpUI_cancelItem;
}


global proc shapesUI_getCameraAttributes()
{
    //
    // get the camera attributes to restore them
    // after exiting the sculpt mode
    //
    global string $gShapes_camAttrs[];

    string $view = shapesSculpt_getCurrentModelPanel();
    if ($view == "")
        return;

    string $cam = `modelEditor -q -cam $view`;

    $gShapes_camAttrs[size($gShapes_camAttrs)] = $cam;
    $gShapes_camAttrs[size($gShapes_camAttrs)] = `getAttr ($cam + ".filmFit")`;
    $gShapes_camAttrs[size($gShapes_camAttrs)] = `getAttr ($cam + ".displayFilmGate")`;
    $gShapes_camAttrs[size($gShapes_camAttrs)] = `getAttr ($cam + ".displayResolution")`;
    $gShapes_camAttrs[size($gShapes_camAttrs)] = `getAttr ($cam + ".displayGateMask")`;
    float $col[] = `getAttr ($cam + ".displayGateMaskColor")`;
    $gShapes_camAttrs[size($gShapes_camAttrs)] = shapesArray_floatArrayToString($col, ",");
}


global proc shapesUI_setCameraAttributes( string $attrs[], int $state )
{
    //
    // set the camera attributes when entering/exiting sculpt mode
    //
    float $value;
    if (!shapesUI_getAttributeLockState($attrs[0] + ".filmFit"))
    {
        $value = $attrs[1];
        setAttr ($attrs[0] + ".filmFit") $value;
    }

    if (!shapesUI_getAttributeLockState($attrs[0] + ".displayFilmGate"))
    {
        $value = $attrs[2];
        setAttr ($attrs[0] + ".displayFilmGate") $value;
    }

    if (!shapesUI_getAttributeLockState($attrs[0] + ".displayResolution"))
    {
        $value = $attrs[3];
        setAttr ($attrs[0] + ".displayResolution") $value;
    }

    // if, for some reason an error occurred and the green edit mask
    // remains in the scene set the values back to default
    if (!$state && ($attrs[5] == "0.15,0.5,0.0" || $attrs[5] == "0.068,0.227,0.0"))
    {
        $attrs[4] = 0;
        $attrs[5] = "0.5,0.5,0.5";
    }

    if (!shapesUI_getAttributeLockState($attrs[0] + ".displayGateMask"))
    {
        $value = $attrs[4];
        setAttr ($attrs[0] + ".displayGateMask") $value;
    }

    if (!shapesUI_getAttributeLockState($attrs[0] + ".displayGateMaskColor"))
    {
        float $values[] = shapesArray_stringToFloatArray($attrs[5], ",");
        setAttr ($attrs[0] + ".displayGateMaskColor") -type double3 $values[0] $values[1] $values[2];
    }
}


global proc int shapesUI_getAttributeLockState( string $nodeAttr )
{
    //
    // return true if the attribute is locked or connected
    //
    int $locked = `getAttr -l $nodeAttr`;
    string $connected[] = `listConnections -s 1 -d 0 $nodeAttr`;
    if ($locked || size($connected))
        return 1;
    return 0;
}


global proc shapesUI_toggleAddNewTargetItemLabel( int $inbetween )
{
    //
    // controls the menu item label for adding new targets
    // depending if the shape is added as a new target or an in-between
    //
    if ($inbetween)
    {
        menuItem -e -l "Add Selection As New Default In-Between" shpUI_newDefaultMenuItem;
        menuItem -e -l "Add Selection As New Posed In-Between" shpUI_newPosedMenuItem;
    }
    else
    {
        menuItem -e -l "Add Selection As New Default Target" shpUI_newDefaultMenuItem;
        menuItem -e -l "Add Selection As New Posed Target" shpUI_newPosedMenuItem;
    }
}


// ------------------------------------------------------------------------------------------------
// export / update mesh UI
// ------------------------------------------------------------------------------------------------

global proc shapesUI_buildExportUI( int $export )
{
    //
    // opens the window for setting the export/update parameters
    //
    global string $gShapes_skinMesh;
    global string $gShapes_undoInfo;

    if ($gShapes_skinMesh == "")
        return;

    string $exportDir = "/setup";
    string $title = "Export";
    if (!$export)
    {
        $exportDir = "/transfer";
        $title = "Transfer";
    }

    if ($export)
    {
        if (!shapesData_verifyIndices())
            shapesData_matchIndices;
        shapesList_listBlendShapeTargets 1;
    }

    string $exportPath = shapesUtil_getExportPath($exportDir, 1);
    if ($exportPath == "")
        return;

    if (`window -ex SHAPESExportWin`)
        deleteUI SHAPESExportWin;

    if (`windowPref -ex SHAPESExportWin`)
        windowPref -r SHAPESExportWin;

    window -t $title -w 300 -h 100 SHAPESExportWin;

    string $message;
    if ($export)
        $message = "Exports all target shapes and the related setup.\n";
    else
    {
        $message += "Transfers the setup to the currently selected mesh.\n\n";
        $message += "The transfer is based on a wrap deformer requiring both meshes\nto share the same scene space.\n\n";
    }
    $message += $gShapes_undoInfo;

    string $form = `formLayout`;

        string $descLayout = `frameLayout -l "Description" -cll 0 -cl 0 -mw 5 -mh 5`;
            columnLayout -cal "left";
            text -l $message;
        setParent $form;

        string $pathLayout = `frameLayout -lv 0 -cll 0 -cl 0 -mw 5 -mh 5`;
            shapesUI_buildExportPathOption $pathLayout $exportPath $export;
        setParent $form;

        string $presetsLayout = `frameLayout -l "Presets" -cll 1 -cl 1 -en 0 -mw 5 -mh 5 -m 0`;
            shapesUI_buildPresetOptions $presetsLayout;
        setParent $form;

        string $generalLayout = `frameLayout -l "General" -cll 0 -cl 0 -mw 5 -mh 5`;
            shapesUI_buildGeneralOptions $generalLayout;
        setParent $form;

        string $optionsLayout = `frameLayout -l "Options" -cll 0 -cl 0 -mw 5 -mh 5`;
        if ($export)
            shapesUI_buildExportOptions $optionsLayout;
        else
            shapesUI_buildUpdateOptions $optionsLayout;
        setParent $form;

        int $spacer = 10;

        string $separator = `separator -style "none"`;

        string $execute;
        if ($export)
        {
            $execute = `button -l $title -h 30 -c ("shapesUtil_exportShapeSetup 1 \"" + $exportPath + "\" \"\"")`;
            frameLayout -e -m 0 $presetsLayout;
            frameLayout -e -m 0 $generalLayout;
            $spacer = 0;
        }
        else
        {
            $execute = `button -l $title -h 30 -c ("shapesUtil_transferBlendShapeSetup \"" + $exportPath + "\"")`;
            frameLayout -e -cl 1 $optionsLayout;
        }
        setParent $form;

        formLayout  -e

                    -af $descLayout "top" 3
                    -af $descLayout "left" 3
                    -af $descLayout "right" 3
                    -af $pathLayout "left" 3
                    -af $pathLayout "right" 3
                    -af $presetsLayout "left" 3
                    -af $presetsLayout "right" 3
                    -af $generalLayout "left" 3
                    -af $generalLayout "right" 3
                    -af $optionsLayout "left" 3
                    -af $optionsLayout "right" 3
                    -af $execute "bottom" 3
                    -af $execute "left" 3
                    -af $execute "right" 3

                    -ac $pathLayout "top" 10 $descLayout
                    -ac $presetsLayout "top" 10 $pathLayout
                    -ac $generalLayout "top" $spacer $presetsLayout
                    -ac $optionsLayout "top" $spacer $generalLayout
                    -ac $separator "top" 15 $optionsLayout

                    $form;

    showWindow SHAPESExportWin;
}


global proc shapesUI_buildExportPathOption( string $parent, string $path, int $export )
{
    //
    // create a file path field when exporting to a custom file
    //
    global string $gShapes_bsNode;

    if (!$export)
    {
        columnLayout -cal "left";
        text -l ("Export Path:\n\n" + $path);
        setParent $parent;
    }
    else
    {
        columnLayout -cal "left";
            checkBox -l "Custom Export Path" -cc ("optionVar -iv SHAPESUseCustomNodeDataExportPath #1; shapesUI_enableExportPathField;") shpUI_customExportPathCheck;
        setParent ..;

        checkBox -e -v (`optionVar -q SHAPESUseCustomNodeDataExportPath`) shpUI_customExportPathCheck;

        string $path;
        if (`optionVar -ex SHAPESCustomNodeDataExportPath` && `optionVar -q SHAPESCustomNodeDataExportPath` != "")
            $path = `optionVar -q SHAPESCustomNodeDataExportPath`;
        else
            $path = shapesUtil_getExportPath("/setup", 1);

        string $filePath = $path + "/" + shapesMain_shortenNodePath($gShapes_bsNode, 0) + ".ma";

        string $pathForm = `formLayout`;
            string $pathLabel = `text -l "Export Path" -w 74 -al "left"`;
            textField -w 100 -tx $filePath -en 0 shpUI_exportPathField;
            button -l "Select" -w 46 -en 0 -c ("shapesUI_selectExportPath \"" + $filePath + "\"") shapesUI_exportPathSelectButton;
            formLayout  -e

                        -af $pathLabel "top" 0
                        -af $pathLabel "bottom" 0
                        -af $pathLabel "left" 1
                        -af shpUI_exportPathField "top" 1
                        -af shapesUI_exportPathSelectButton "top" 0
                        -af shapesUI_exportPathSelectButton "right" 5

                        -ac shpUI_exportPathField "left" 5 $pathLabel
                        -ac shpUI_exportPathField "right" 7 shapesUI_exportPathSelectButton

                        $pathForm;
        setParent ..;

        shapesUI_enableExportPathField;
    }
}


global proc shapesUI_enableExportPathField()
{
    //
    // enable/disable the export path field
    //
    int $enable = `optionVar -q SHAPESUseCustomNodeDataExportPath`;

    textField -e -en $enable shpUI_exportPathField;
    button -e -en $enable shapesUI_exportPathSelectButton;
}


global proc shapesUI_selectExportPath( string $path )
{
    //
    // open a window to let the user choose a custom export file path
    //
    string $filter = "Maya ASCII (*.ma)";
    string $userPath[] = `fileDialog2 -dir $path -fm 0 -ff $filter -okc "Select" -cap "Select Export Path"`;
    if ($userPath[0] == "")
    {
        checkBox -e -v 0 shpUI_customExportPathCheck;
        optionVar -iv SHAPESUseCustomNodeDataExportPath 0;
        shapesUI_enableExportPathField;
        return;
    }
    textField -e -tx $userPath[0] shpUI_exportPathField;
    if (endsWith($userPath[0], ".ma"))
        $userPath[0] = `python("import os; os.path.dirname('" + $userPath[0] + "')")`;

    optionVar -sv SHAPESCustomNodeDataExportPath $userPath[0];
}


global proc shapesUI_toggleSubdivisionSlider()
{
    //
    // toggle the enabled state of the subdivision slider based on the
    // subdivide state
    //
    intSliderGrp -e -en (`optionVar -q SHAPESExportSmoothed`) shpUI_exportSubdivisionsField;
}

global proc shapesUI_toggleSubdivisionOptions( string $menu )
{
    //
    // toggle the enabled state of the subdivision options based on the
    // export type
    //
    int $value = `optionMenu -q -sl $menu`;
    if ($value > 1) $value = 0;
    rowColumnLayout -e -en $value shpUI_exportSubdivisionsLayout;
    if (!$value)
    {
        $childArray = `rowColumnLayout -q -ca shpUI_exportSubdivisionsLayout`;
        checkBox -e -v 0 $childArray[0];
        optionVar -iv SHAPESExportSmoothed 0;
    }
}


global proc shapesUI_buildExportOptions( string $parent )
{
    //
    // creates the option controls for the export window
    //
    rowColumnLayout -rs 1 5 -adj 1;
        string $exportOption = `optionMenu`;
            menuItem -l "Export Only";
            menuItem -l "Delete Shape Drivers and Combos After Export";
            menuItem -l "Delete Entire Blend Shape Setup After Export";
            //menuItem -l "Delete Reference Edit Items After Export";
            menuItem -l "Rebuild Blend Shape Setup";
            menuItem -l "Export Mirrored";
        string $itemsOption = `optionMenu`;
            menuItem -l "All Targets";
            menuItem -l "Reference Edits: Targets";
            menuItem -l "Reference Edits: Targets And Drivers";
        separator -st "none";

        rowColumnLayout -nc 2 -cw 1 100 -cal 1 "left" -rs 1 5 -adj 2 shpUI_exportSubdivisionsLayout;
            $value = `optionVar -q SHAPESExportSmoothed`;
            checkBox -l "Smooth" -v $value
                     -cc ("optionVar -iv SHAPESExportSmoothed #1; shapesUI_toggleSubdivisionSlider;")
                     -ann (uiRes("m_SHAPES_ui.kExportSmooothed"));
            $value = `optionVar -q SHAPESExportSubdivisions`;
            intSliderGrp -l "Levels" -min 0 -max 5 -step 1 -field 1 -v $value -ad3 3 -cw3 40 25 20
                         -en (`optionVar -q SHAPESExportSmoothed`)
                         -cc ("optionVar -iv SHAPESExportSubdivisions #1;")
                         -ann (uiRes("m_SHAPES_ui.kExportSubdivisions"))
                         shpUI_exportSubdivisionsField;
        setParent ..;

        separator -st "none";
        text -l "File Format" -al "left";
        string $formatOption = `optionMenu`;
            menuItem -l "Maya ASCII";
            menuItem -l "OBJ";
    setParent ..;

    shapesUI_getExportUIOptions 1 ($exportOption + "," + $itemsOption + "," + $formatOption);
    shapesUI_toggleSubdivisionOptions $exportOption;

    optionMenu -e -cc ("shapesUI_setExportUIOptions 1 \"" + $exportOption + "," + $itemsOption + "," + $formatOption + "\"; shapesUI_toggleSubdivisionOptions " + $exportOption + ";") $exportOption;
    optionMenu -e -cc ("shapesUI_setExportUIOptions 1 \"" + $exportOption + "," + $itemsOption + "," + $formatOption + "\"") $itemsOption;
    optionMenu -e -cc ("shapesUI_setExportUIOptions 1 \"" + $exportOption + "," + $itemsOption + "," + $formatOption + "\"") $formatOption;
}


global proc shapesUI_buildPresetOptions( string $parent )
{
    //
    // creates the preset controls for the export window
    //
    rowColumnLayout -rs 1 5;
        string $exportOption = `optionMenu`;
            menuItem -l "User Defined";
            menuItem -l "Transfer All Blend Shapes";
            menuItem -l "Transfer Selected Blend Shapes";
            menuItem -l "Update";
            menuItem -l "Transfer Resolution Workflow";
        text -l "Transfer yields custom options as set below";
    setParent ..;
}


global proc shapesUI_buildGeneralOptions( string $parent )
{
    //
    // creates the general option controls for the transfer window
    //
    rowColumnLayout -nc 2 -cw 1 100 -cal 1 "left" -rs 1 5;
        text -l "Target Node";
        optionMenu shpUI_transferTargetNodeOption;
            menuItem -l "Create New";
            string $nodes[] = `ls -type "blendShape"`;
            if (size($nodes))
            {
                for ($n in $nodes)
                    menuItem -l $n;
            }
    setParent ..;
}


global proc shapesUI_buildUpdateOptions( string $parent )
{
    //
    // creates the option controls for the transfer window
    //
    rowColumnLayout;
        string $skinCheck = `checkBox -l "Copy Skin Weights (Removes Any Existing)"`;
        separator -st "none" -h 5;
        string $hideCheck = `checkBox -l "Hide Previous Mesh"`;
    setParent ..;

    rowColumnLayout -nc 2 -cw 1 100 -cal 1 "left" -rs 1 5;
        text -l "Transfer Mode";
        string $transferOption = `optionMenu`;
            menuItem -l "Delete Previous Skin Mesh";
            menuItem -l "Transfer Targets Only (No Drivers)";
            menuItem -l "Transfer All";
            menuItem -l "Transfer And Use Previous As Master";
            menuItem -l "Transfer All And Use Selection As Master";
        text -l "Targets";
        string $targetsOption = `optionMenu`;
            menuItem -l "All Targets";
            menuItem -l "Selected Targets/Groups (No Drivers)";
            menuItem -l "Ignore Selected Targets/Groups (No Drivers)";
        text -l "Rename";
        string $renameOption = `optionMenu`;
            menuItem -l "No Change";
            menuItem -l "Keep Previous Name";
            menuItem -l "Swap Names";
        string $suffixLabel = `text -l "Rename Suffix"`;
        string $suffixField = `textField`;
        text -l "Wrap";
        string $wrapOption = `optionMenu`;
            menuItem -l "Default";
            menuItem -l "Wrap Only";
            menuItem -l "Transfer And Wrap A Duplicate";
    setParent ..;

    rowColumnLayout;
        int $value = `optionVar -q autoWeightThreshold`;
        string $autoCheck = `checkBox -l "Auto Weight Threshold" -v $value`;
    setParent ..;

    frameLayout -e -cc "window -e -h 389 SHAPESExportWin" $parent;

    string $controls[] = {$skinCheck, $transferOption, $targetsOption, $renameOption, $suffixField, $wrapOption, $hideCheck};
    string $controlsString = stringArrayToString($controls, ",");

    shapesUI_getExportUIOptions 0 $controlsString;

    checkBox -e -cc ("shapesUI_setExportUIOptions 0 \"" + $controlsString + "\"") $skinCheck;
    checkBox -e -cc ("shapesUI_setExportUIOptions 0 \"" + $controlsString + "\"") $hideCheck;
    optionMenu -e -cc ("shapesUI_setExportUIOptions 0 \"" + $controlsString + "\"") $transferOption;
    optionMenu -e -cc ("shapesUI_setExportUIOptions 0 \"" + $controlsString + "\"") $targetsOption;
    optionMenu -e -cc ("shapesUI_setExportUIOptions 0 \"" + $controlsString + "\"") $renameOption;
    textField -e -cc ("shapesUI_setExportUIOptions 0 \"" + $controlsString + "\"") $suffixField;
    optionMenu -e -cc ("shapesUI_setExportUIOptions 0 \"" + $controlsString + "\"") $wrapOption;
    checkBox -e -cc ("optionVar -iv autoWeightThreshold #1") $autoCheck;
}


global proc shapesUI_getExportUIOptions( int $export, string $controls )
{
    //
    // read the user settings in the export ui
    //
    string $var;
    string $values[];
    string $valueString;

    if ($export)
        $var = "SHAPESExportOptions";
    else
        $var = "SHAPESTransferOptions";
    $valueString = `optionVar -q $var`;

    $values = stringToStringArray($valueString, ",");
    if (($export && size($values) != 3) || (!$export && size($values) != 7))
    {
        // reset the transfer preferences if the values don't match
        shapesGlobal_setTransferOptionVars 1;
        $valueString = `optionVar -q $var`;
        $values = stringToStringArray($valueString, ",");
    }

    string $controlItems[] = stringToStringArray($controls, ",");
    float $val;
    if ($export)
    {
        for ($i = 0; $i < size($controlItems); $i ++)
        {
            $val = $values[$i];
            optionMenu -e -sl $val $controlItems[$i];
        }
    }
    else
    {
        $val = $values[0];
        checkBox -e -v $val $controlItems[0];
        $val = $values[1];
        optionMenu -e -sl $val $controlItems[1];
        $val = $values[2];
        optionMenu -e -sl $val $controlItems[2];
        $val = $values[3];
        optionMenu -e -sl $val $controlItems[3];
        if ($values[4] == "")
            $values[4] = "_previous";
        textField -e -tx $values[4] $controlItems[4];
        $val = $values[5];
        optionMenu -e -sl $val $controlItems[5];
        $val = $values[6];
        checkBox -e -v $val $controlItems[6];

        // handle disabling
        shapesUI_toggleTransferOptions $controls;
    }

    optionVar -sv $var (stringArrayToString($values, ","));
}


global proc shapesUI_setExportUIOptions( int $export, string $controls )
{
    //
    // set the user settings in the export ui
    //
    string $var;
    string $values[];

    if ($export)
        $var = "SHAPESExportOptions";
    else
        $var = "SHAPESTransferOptions";

    string $controlItems[] = stringToStringArray($controls, ",");
    string $val;
    if ($export)
    {
        for ($i = 0; $i < size($controlItems); $i ++)
            $values[$i] = `optionMenu -q -sl $controlItems[$i]`;
    }
    else
    {
        $val = `checkBox -q -v $controlItems[0]`;
        $values[size($values)] = $val;
        $val = `optionMenu -q -sl $controlItems[1]`;
        $values[size($values)] = $val;
        $val = `optionMenu -q -sl $controlItems[2]`;
        $values[size($values)] = $val;
        $val = `optionMenu -q -sl $controlItems[3]`;
        $values[size($values)] = $val;
        if (`textField -q -tx $controlItems[4]` == "")
            textField -e -tx "_previous" $controlItems[4];
        $val = `textField -q -tx $controlItems[4]`;
        $values[size($values)] = $val;
        $val = `optionMenu -q -sl $controlItems[5]`;
        $values[size($values)] = $val;
        $val = `checkBox -q -v $controlItems[6]`;
        $values[size($values)] = $val;

        // handle disabling
        shapesUI_toggleTransferOptions $controls;
    }

    string $valueString = stringArrayToString($values, ",");
    optionVar -sv $var $valueString;
}


global proc shapesUI_toggleTransferOptions( string $controls )
{
    //
    // enable/disable controls based on
    // the selection of transfer options
    //
    int $enable[] = {1, 1, 1, 1, 1, 1, 1};

    string $controlItems[] = stringToStringArray($controls, ",");

    if (`optionMenu -q -sl $controlItems[1]` == 1)
    {
        optionMenu -e -sl 1 $controlItems[5];
        $enable[5] = 0;
    }

    if (`optionMenu -q -sl $controlItems[3]` != 2)
        $enable[4] = 0;

    if (`optionMenu -q -sl $controlItems[5]` == 2)
        $enable = {0, 0, 0, 0, 0, 1, 0};

    for ($c = 0; $c < size($controlItems); $c ++)
        control -e -en $enable[$c] $controlItems[$c];
}


// ------------------------------------------------------------------------------------------------
// export / import deltas UI
// ------------------------------------------------------------------------------------------------

global proc shapesUI_buildImportDeltasUI( string $bsNode, string $file, string $deltaItems[], int $selected )
{
    //
    // opens the window for importing the blend shape deltas
    //
    if (`window -ex SHAPESDeltaImportWin`)
        deleteUI SHAPESDeltaImportWin;

    if (`windowPref -ex SHAPESDeltaImportWin`)
        windowPref -r SHAPESDeltaImportWin;

    int $currentIds[];
    string $currentNames[];
    shapesData_getCurrentShapeIdsAndNames($currentIds, $currentNames);

    window -t "Import Deltas" -w 500 -h 350 SHAPESDeltaImportWin;

    string $formList[];

    string $form = `formLayout`;

        string $channelsLayout = `scrollLayout -cr 1`;
            string $columnLayout = `columnLayout -adj 1 -w 300`;
            string $checkForm = `formLayout`;
                string $allCheck = `checkBox -l ""`;
                string $allLabel = `text -l "All"`;
                string $namesCheck = `checkBox -l ""`;
                string $namesLabel = `text -l "Import Names"`;
                string $remapCheck = `checkBox -l ""`;
                string $remapLabel = `text -l "Remap Indices"`;

                formLayout  -e

                            -af $allCheck "top" 6
                            -af $allCheck "left" 3
                            -af $allLabel "top" 5
                            -af $namesCheck "top" 6
                            -af $namesLabel "top" 6
                            -af $remapCheck "top" 6
                            -af $remapLabel "top" 6

                            -ac $allLabel "left" 5 $allCheck
                            -ac $namesCheck "left" 20 $allLabel
                            -ac $namesLabel "left" 5 $namesCheck
                            -ac $remapCheck "left" 20 $namesLabel
                            -ac $remapLabel "left" 5 $remapCheck

                            $checkForm;

                setParent ..;

            separator -st "in" -h 20;

            for ($i = 0; $i < size($deltaItems); $i ++)
            {
                string $items[] = stringToStringArray($deltaItems[$i], ",");
                string $ibItems[] = stringToStringArray($items[2], ":");
                stringArrayRemoveAtIndex(size($ibItems) - 1, $ibItems);
                string $ibText = "-";
                if (size($ibItems))
                    $ibText = stringArrayToString($ibItems, ", ");
                int $idValue = $items[0];

                string $itemForm = `formLayout`;
                    string $check = `checkBox -l ""`;
                    string $name = `text -l $items[1] -al "left"`;
                    string $idLabel1 = `text -en 0 -l "Index:"`;
                    string $id1 = `intField -en 0 -v $idValue -w 30`;
                    string $idLabel2 = `text -en 0 -l "Remap to:"`;
                    string $id2 = `intField -en 0 -v $idValue -w 30`;

                    popupMenu;
                    for ($j = 0; $j < size($currentIds); $j ++)
                        menuItem -l $currentNames[$j] -c ("intField -e -v " + $currentIds[$j] + " " + $id2);
                    menuItem -d 1;
                    menuItem -l "Next Available" -c ("shapesUtil_setNextAvailableDeltaIndex " + $itemForm + " " + $id2);

                    string $ibLabel = `text -l "Inbetweens:"`;
                    string $ib = `text -l $ibText -w 50 -al "left"`;

                    formLayout  -e

                                -af $check "top" 6
                                -af $check "left" 3
                                -af $ib "top" 5
                                -af $ib "right" 3
                                -af $name "top" 5
                                -af $idLabel1 "top" 5
                                -af $id1 "top" 2
                                -af $idLabel2 "top" 5
                                -af $id2 "top" 2
                                -af $ibLabel "top" 5

                                -ac $name "left" 10 $check
                                -ac $name "right" 15 $idLabel1
                                -ac $idLabel1 "right" 5 $id1
                                -ac $id1 "right" 15 $idLabel2
                                -ac $idLabel2 "right" 5 $id2
                                -ac $id2 "right" 15 $ibLabel
                                -ac $ibLabel "right" 5 $ib

                                $itemForm;

                $formList[size($formList)] = $itemForm;

                setParent ..;
            }
        setParent $form;

        string $info = `text -l "Deltas will be appplied to the entire mesh or selected vertices."`;

        string $execute = `button -l "Import" -h 30 -c ("shapesUtil_performImportBlendShapeDeltas \"" + $bsNode + "\" \"" + $file + "\" \"" + $columnLayout + "\" " + $selected)`;

        setParent $form;

        formLayout  -e

                    -af $channelsLayout "top" 3
                    -af $channelsLayout "left" 3
                    -af $channelsLayout "right" 3
                    -af $info "left" 3
                    -af $info "right" 3
                    -af $execute "bottom" 3
                    -af $execute "left" 3
                    -af $execute "right" 3

                    -ac $channelsLayout "bottom" 10 $info
                    -ac $info "bottom" 10 $execute

                    $form;

    // callbacks
    checkBox -e -cc ("shapesUI_toggleAllDeltaChecks \"" + stringArrayToString($formList, ",") + "\" \"" + $allCheck + "\"") $allCheck;
    checkBox -e -cc ("shapesUI_toggleRemapItems \"" + stringArrayToString($formList, ",") + "\" \"" + $remapCheck + "\"") $remapCheck;

    showWindow SHAPESDeltaImportWin;
}


global proc shapesUI_toggleAllDeltaChecks( string $formListString, string $check )
{
    //
    // toggles all checkboxes for the delta import
    //
    int $value = `checkBox -q -v $check`;
    string $formList[] = stringToStringArray($formListString, ",");

    for ($form in $formList)
    {
        string $child[] = `formLayout -q -ca $form`;
        checkBox -e -v $value $child[0];
    }
}


global proc shapesUI_toggleRemapItems( string $formListString, string $remapCheck )
{
    //
    // enables/disables the index items for remapping
    //
    int $value = `checkBox -q -v $remapCheck`;
    string $formList[] = stringToStringArray($formListString, ",");

    for ($form in $formList)
    {
        string $child[] = `formLayout -q -ca $form`;
        text -e -en $value $child[2];
        intField -e -en $value $child[3];
        text -e -en $value $child[4];
        intField -e -en $value $child[5];
    }
}

// ------------------------------------------------------------------------------------------------
// connecting blend shape nodes
// ------------------------------------------------------------------------------------------------

global proc shapesUI_connectBlendShapeNodeUI()
{
    //
    // opens a window to let the user connect two blend shape nodes
    //
    string $win = "SHAPESConnectBlendShapeNodesWin";
    if (`window -ex $win`)
        deleteUI $win;

    window -t "Connect Blend Shape Nodes" -wh 280 192 $win;

    frameLayout -lv 0;
        text -l "Select two blend shape nodes to connect.\nThe first selection acts as the driver." -h 40;

        string $listForm = `formLayout`;
            string $list = `textScrollList -ams 1 shpUI_blendShapeNodesList`;
            string $orderText = `text -l "source -> destination" -h 30`;
            string $button = `button -l "Connect" -h 30 -c ("shapesUI_executeConnectBlendShapeNodes " + $win)`;

            formLayout  -e

                        -af $list "top" 0
                        -af $list "left" 0
                        -af $list "right" 0
                        -af $orderText "left" 0
                        -af $orderText "right" 0
                        -af $button "bottom" 0
                        -af $button "left" 0
                        -af $button "right" 0

                        -ac $list "bottom" 3 $orderText
                        -ac $orderText "bottom" 3 $button

                        $listForm;

        setParent ..;
    setParent ..;

    string $nodes[] = `ls -type "blendShape"`;
    if (size($nodes))
    {
        for ($n in $nodes)
            textScrollList -e -a $n shpUI_blendShapeNodesList;
    }

    textScrollList -e -sc ("shapesUI_connectBlendShapeNodeTrackSelection " + $orderText) shpUI_blendShapeNodesList;

    showWindow $win;
}

global proc shapesUI_connectBlendShapeNodeTrackSelection( string $textControl )
{
    //
    // creates an ordered list based on the list selection
    //
    global string $gShapes_orderedBsList[];

    string $nodes[] = `textScrollList -q -si shpUI_blendShapeNodesList`;
    if (size($nodes))
    {
        if (size($gShapes_orderedBsList) == 0 || size($gShapes_orderedBsList) >= 2)
            $gShapes_orderedBsList = $nodes;
        else
        {
            if (size($gShapes_orderedBsList) == 1 && size($nodes) == 1 && $gShapes_orderedBsList[0] != $nodes[0])
                $gShapes_orderedBsList[0] = $nodes[0];

            if (size($nodes) > 1)
            {
                for ($n in $nodes)
                {
                    if (!stringArrayContains($n, $gShapes_orderedBsList))
                        $gShapes_orderedBsList[size($gShapes_orderedBsList)] = $n;
                }
            }
        }
    }

    text -e -l ($gShapes_orderedBsList[0] + " -> " + $gShapes_orderedBsList[1]) $textControl;
}


global proc shapesUI_executeConnectBlendShapeNodes( string $win )
{
    //
    // select the nodes from the list
    // and perform the connection
    //
    global string $gShapes_orderedBsList[];

    if (!size($gShapes_orderedBsList) || size($gShapes_orderedBsList) != 2)
        br_displayMessage -error "Select two blend shape nodes to connect";

    select -r $gShapes_orderedBsList;
    shapesUtil_connectBlendShapeNodes;

    deleteUI $win;
}


global proc SHAPES_ui(){}
