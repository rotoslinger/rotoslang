// ------------------------------------------------------------------------------------------------
//
// SHAPES
//
// blend shape editing tool for Maya
//
// required plugins:
//   SHAPESTools
//
// Ingo Clemens
// www.braverabbit.com
//
// copyright brave rabbit, Ingo Clemens 2014-2023
//
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
//
// THE SOFTWARE PRODUCT IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR
// IMPLIED, INCLUDING, BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NON-INFRINGEMENT OF THIRD-PARTY RIGHTS. THE ENTIRE RISK AS TO THE QUALITY AND
// PERFORMANCE OF THE SOFTWARE PRODUCT IS WITH YOU.
// NEITHER BRAVE RABBIT NOR ITS SUPPLIERS WARRANT THAT THE FUNCTIONS CONTAINED IN THE SOFTWARE
// PRODUCT WILL MEET YOUR REQUIREMENTS OR THAT THE OPERATION OF THE SOFTWARE PRODUCT WILL BE
// UNINTERRUPTED OR ERROR-FREE. BRAVE RABBIT IS NOT OBLIGATED TO PROVIDE ANY UPDATES TO THE
// SOFTWARE.
// IN NO EVENT SHALL THE AUTHOR OF THIS SOFTWARE PRODUCT BE LIABLE FOR ANY SPECIAL, CONSEQUENTIAL,
// INCIDENTAL, DIRECT OR INDIRECT DAMAGES WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR
// LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, FOR PERSONAL INJURY, LOSS OF BUSINESS
// INFORMATION, OR ANY OTHER PECUNIARY LOSS) ARISING OUT OF THE USE OF OR INABILITY TO USE THIS
// PRODUCT, EVEN IF THE AUTHOR OF THIS SOFTWARE PRODUCT IS AWARE OF THE POSSIBILITY OF SUCH
// DAMAGES AND KNOWN DEFECTS, ANY CLAIM BY A THIRD PARTY AND EVEN IF THE REMEDY FAILS OF ITS
// ESSENTIAL PURPOSE.
//
// ------------------------------------------------------------------------------------------------


global proc SHAPESCreateHotkey( string $tool )
{
    //
    // set up the hotkey
    //
    string $win = "SHAPESHotkeyWindow";

    string $keySet = `optionMenuGrp -query -value shpUI_hotkeySetOption`;
    if ($keySet == "Create New")
    {
        if (`hotkeySet -query -exists "Maya_Default_SHAPES"`)
            hotkeySet -edit -delete "Maya_Default_SHAPES";
        hotkeySet -current "Maya_Default_SHAPES";
    }
    else
        hotkeySet -edit -current $keySet;

    string $key = `textFieldGrp -query -text shpUI_hotkeyField`;
    int $shiftMod = `checkBoxGrp -query -value1 shpUI_shiftCheck`;
    int $ctrlMod = `checkBoxGrp -query -value1 shpUI_ctrlCheck`;
    int $altMod = `checkBoxGrp -query -value1 shpUI_altCheck`;

    string $upCmd;
    string $downCmd;
    string $cmdString1;
    string $cmdString2;
    string $runAnn1;
    string $runAnn2;
    string $nameAnn1;
    string $nameAnn2;

    if ($tool == "brush")
    {
        $upCmd = "SHAPESBrushMMCommand";
        $downCmd = "SHAPESBrushMMPopDownCommand";
        $cmdString1 = "SHAPESBrushMarkingMenu;";
        $cmdString2 = "MarkingMenuPopDown";
        $runAnn1 = "Open the SHAPES Brush marking menu";
        $runAnn2 = "Close the SHAPES Brush marking menu";
        $nameAnn1 = "SHAPESBrushMM";
        $nameAnn2 = "SHAPESBrushMMPopDown";
    }
    else if ($tool == "compare")
    {
        $upCmd = "SHAPESCompareDraggerToolPressCommand";
        $downCmd = "SHAPESCompareDraggerToolReleaseCommand";
        $cmdString1 = "if (`contextInfo -ex SHAPESCompareDraggerToolContext1`) deleteUI SHAPESCompareDraggerToolContext1; global string $SHAPESLastToolBeforeCompare; $SHAPESLastToolBeforeCompare = `currentCtx`; SHAPESCompareDraggerToolContext; setToolTo SHAPESCompareDraggerToolContext1;";
        $cmdString2 = "if (`contextInfo -ex SHAPESCompareDraggerToolContext1`) deleteUI SHAPESCompareDraggerToolContext1; if ($SHAPESLastToolBeforeCompare != \"\") setToolTo $SHAPESLastToolBeforeCompare; else setToolTo $gSelect;";
        $runAnn1 = "Activate the SHAPES compare dragger tool";
        $runAnn2 = "Deactivate the SHAPES compare dragger tool";
        $nameAnn1 = "SHAPESCompareDraggerToolPress";
        $nameAnn2 = "SHAPESCompareDraggerToolRelease";
    }

    if (`runTimeCommand -query -exists $upCmd`)
        runTimeCommand -edit -delete $upCmd;
    if (`runTimeCommand -query -exists $downCmd`)
        runTimeCommand -edit -delete $downCmd;

    runTimeCommand -annotation $runAnn1 -category "User" -command $cmdString1 $upCmd;
    runTimeCommand -annotation $runAnn2 -category "User" -command $cmdString2 $downCmd;

    nameCommand -annotation $nameAnn1 -command $upCmd ($nameAnn1 + "_NameCommand");
    nameCommand -annotation $nameAnn2 -command $downCmd ($nameAnn2 + "_NameCommand");

    string $cmd = "hotkey -keyShortcut \"" + $key + "\"";
    if ($shiftMod == 1)
        $cmd += " -shiftModifier";
    if ($ctrlMod == 1)
        $cmd += " -ctrlModifier";
    if ($altMod == 1)
        $cmd += " -altModifier";
    string $cmdRelease = $cmd + " -releaseName (\"" + $nameAnn2 + "_NameCommand" + "\")";
    $cmd += " -name (\"" + $nameAnn1 + "_NameCommand" + "\")";
    eval($cmd);
    eval($cmdRelease);

    SHAPESGetHotkey $tool;
    shapesUI_updateHotkeyInfo $tool;

    deleteUI $win;
}


global proc SHAPESDeleteHotkey( string $tool )
{
    //
    // remove the hotkey for the given tool
    //
    string $cmdName;
    string $command;
    string $downCmd;
    string $var;

    if ($tool == "brush")
    {
        $cmdName = "SHAPESBrushMM";
        $command = $cmdName + "Command";
        $downCmd = "SHAPESBrushMMPopDownCommand";
        $var = "SHAPESBrushHotkey";
    }
    else if ($tool == "compare")
    {
        $cmdName = "SHAPESCompareDraggerToolPress";
        $command = $cmdName + "Command";
        $downCmd = "SHAPESCompareDraggerToolReleaseCommand";
        $var = "SHAPESCompareDraggerToolHotkey";
    }

    if (`runTimeCommand -exists $command`)
    {
        int $ids = `assignCommand -query -numElements`;
        for ($i = 1; $i < $ids; $i ++)
        {
            string $cmd = `assignCommand -query -command $i`;
            if (`gmatch $cmd ("*" + $cmdName + "*")`)
            {
                string $keyArray[] = `assignCommand -query -keyArray $i`;
                hotkey -keyShortcut $keyArray[0] -name "";
                hotkey -keyShortcut $keyArray[0] -releaseName "";
            }

            $cmd = `assignCommand -query -name $i`;
            if (`gmatch $cmd ("*" + $cmdName + "*")`)
            {
                assignCommand -edit -delete $i;
            }
        }
        runTimeCommand -edit -delete $command;
        runTimeCommand -edit -delete $downCmd;

        optionVar -remove $var;
    }

    shapesUI_updateHotkeyInfo $tool;
}


proc string keyString( string $keys )
{
    string $items[] = stringToStringArray($keys, ",");
    if (size($items))
        return tolower($items[0]);
    return "";
}


proc int hasShift( string $keys )
{
    string $items[] = stringToStringArray($keys, ",");
    if (size($items))
    {
        if ($items[0] == tolower($items[0]))
            return 0;
        else
            return 1;
    }
    return 0;
}


proc int hasAlt( string $keys )
{
    string $items[] = stringToStringArray($keys, ",");
    if (size($items))
    {
        if ($items[1])
            return 1;
    }
    return 0;
}


proc int hasCtrl( string $keys )
{
    string $items[] = stringToStringArray($keys, ",");
    if (size($items))
    {
        if ($items[2])
            return 1;
    }
    return 0;
}


proc setFromCurrent( string $tool )
{
    string $current = SHAPESGetHotkey($tool);
    textFieldGrp -edit
                 -text (keyString($current))
                 shpUI_hotkeyField;
    checkBoxGrp -edit
                -value1 (hasShift($current))
                shpUI_shiftCheck;
    checkBoxGrp -edit
                -value1 (hasCtrl($current))
                shpUI_ctrlCheck;
    checkBoxGrp -edit
                -value1 (hasAlt($current))
                shpUI_altCheck;
    if (size($current))
    {
        button -edit
               -manage 1
               SHAPESDeleteHotkeyButton;
        separator -edit
                  -manage 0
                  SHAPESDeleteHotkeyButtonSeparator;
    }
}


global proc string SHAPESGetHotkeyAsLabelString( string $tool )
{
    string $label;
    string $keySettings;
    string $control;
    if ($tool == "brush")
    {
        $keySettings = SHAPESGetHotkey("brush");
        $control = "shpUI_currentBrushHotkeyLabel";
    }
    else if ($tool == "compare")
    {
        $keySettings = SHAPESGetHotkey("compare");
        $control = "shpUI_currentCompareHotkeyLabel";
    }
    if ($keySettings != "")
    {
        string $items[] = stringToStringArray($keySettings, ",");
        if (size($items) > 2)
        {
            if (hasShift($keySettings))
                $label += "Shift ";
            if (hasCtrl($keySettings))
                $label += "Ctrl ";
            if (hasAlt($keySettings))
                $label += "Alt ";
            $label += keyString($keySettings);
        }
        else
            $label = $keySettings;
    }
    else
        $label = "None";

    return $label;
}


global proc string SHAPESGetHotkey( string $tool )
{
    //
    // return the hotkey for the given tool
    // and save it to an environment variable if the force flag is set
    //
    string $cmdName;
    string $command;
    string $var;
    if ($tool == "brush")
    {
        $cmdName = "SHAPESBrushMM";
        $command = $cmdName + "Command";
        $var = "SHAPESBrushHotkey";
    }
    else if ($tool == "compare")
    {
        $cmdName = "SHAPESCompareDraggerToolPress";
        $command = $cmdName + "Command";
        $var = "SHAPESCompareDraggerToolHotkey";
    }

    if (!`runTimeCommand -query -exists $command`)
        return "";

    string $key[];
    int $count = `assignCommand -query -numElements`;
    for ($i = 1; $i <= $count; $i ++)
    {
        string $name = `assignCommand -query -name $i`;
        if ($name == $cmdName + "_NameCommand")
        {
            $key = `assignCommand -query -keyArray $i`;
            optionVar -stringValue $var (stringArrayToString($key, ","));
        }
    }
    return stringArrayToString($key, ",");
}


proc createHotkeySetOption()
{
    string $keySets[] = `hotkeySet -query -hotkeySetArray`;
    int $default = -1;
    for ($i = 0; $i < size($keySets); $i ++)
    {
        if ($keySets[$i] == "Maya_Default")
            $default = $i;
    }
    if ($default != -1)
        stringArrayRemoveAtIndex($default, $keySets);

    separator -style "none" -height 10;
    optionMenuGrp -label "Set"
                  -columnWidth2 30 100
                  -columnAttach2 "right" "left"
                  -columnOffset2 0 5
                  shpUI_hotkeySetOption;
    menuItem -label "Create New";
    for ($ks in $keySets)
        menuItem -label $ks;
}


global proc SHAPESSetupHotkey( string $tool )
{
    //
    // open the window for defining the hotkeys
    //

    string $win = "SHAPESHotkeyWindow";
    if (`window -exists $win`)
        deleteUI $win;

    string $title;
    string $descr;
    if ($tool == "brush")
    {
        $title = "SHAPES Brush";
        $descr = "Enter the hotkey\nfor the marking menu";
    }
    else if ($tool == "compare")
    {
        $title = "Sculpt Compare";
        $descr = "Enter the hotkey for\nthe sculpt compare tool";
    }

    window -t $title -width 206 -height 154 $win;

    if (`windowPref -exists $win`)
        windowPref -edit -width 206 -height 154 $win;

    rowColumnLayout;

        separator -style "none" -height 10;
        text -label "Enter the hotkey\nfor the marking menu" -align "center";
        createHotkeySetOption;
        separator -style "none" -height 10;
        textFieldGrp -label "Key"
                     -columnWidth2 30 100
                     -columnAttach2 "right" "left"
                     -columnOffset2 0 5
                     shpUI_hotkeyField;
        rowLayout -numberOfColumns 3;
            checkBoxGrp -label "Shift"
                        -columnWidth2 30 20
                        -columnAttach2 "right" "left"
                        -columnOffset2 0 5
                        shpUI_shiftCheck;
            checkBoxGrp -label "Ctrl"
                        -columnWidth2 30 20
                        -columnAttach2 "right" "left"
                        -columnOffset2 0 5
                        shpUI_ctrlCheck;
            checkBoxGrp -label "Alt"
                        -columnWidth2 25 20
                        -columnAttach2 "right" "left"
                        -columnOffset2 0 5
                        shpUI_altCheck;
        setParent ..;
        separator -style "none" -height 10;

        button -label "Delete Hotkey"
               -command "SHAPESBrushDeleteMMHotkey"
               -manage 0
               SHAPESDeleteHotkeyButton;
        separator -style "none"
                  -height 10
                  -manage 0
                  SHAPESDeleteHotkeyButtonSeparator;

        rowLayout -numberOfColumns 2;
            button -label "OK" -width 100 -command ("SHAPESCreateHotkey " + $tool);
            button -label "Cancel" -width 100 -command ("deleteUI " + $win);
        setParent ..;

    setParent ..;

    setFromCurrent $tool;

    showWindow $win;
}
